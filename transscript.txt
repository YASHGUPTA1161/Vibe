[00:00:00,000] 
[00:00:00,000] Imagine building your next startup with nothing more than a sentence. This is
[00:00:06,240] Vibe, an AI powered app builder that makes that possible. And in this course,
[00:00:12,240] you're going to learn how to build it yourself. Let's try it out by entering a
[00:00:17,680] simple prompt and hitting submit. What you're about to see next is something you'd normally expect from
[00:00:24,400] high-end tools like Lovable, Replet, or Bolt. But in this tutorial, it is
[00:00:30,000] something you will learn how to build. The result, a fully functional Netflix
[00:00:35,680] style homepage generated entirely by AI. We can explore the full app right here
[00:00:42,399] in the preview and everything just works. The layout, the interactions,
[00:00:48,160] even models and favorites. It doesn't just look like a Netflix style homepage,
[00:00:54,079] it behaves like one. And just above the preview, there's a live URL. You can
[00:01:00,160] open it in a new tab, share it with others, or test the app in a real
[00:01:05,199] browser environment. And when you're ready to see exactly how it works, simply switch to the code tab and
[00:01:12,080] explore every component, utility, and file that was created. But how is this
[00:01:17,200] even possible? And how does it all work? Let's break it down. What you're looking
[00:01:22,799] at here is the inest developer server. It shows a background task that kicked
[00:01:28,560] off as soon as we submitted our prompt. The task itself is handled by an AI
[00:01:34,560] coding agent. The agent has access to various tools used to build the app. It
[00:01:41,040] can run commands in the terminal, create, read, or even update files. And
[00:01:46,720] its goal is to create a fully functional Nex.js JS application tailored to the
[00:01:52,720] user's request. You can click into any step to see exactly what happened and
[00:01:58,240] when. Which packages were installed, what commands were run, and which files
[00:02:03,759] were created or modified. Finally, the agent spins up a real
[00:02:09,759] development environment using an E2B sandbox, a secure container that runs
[00:02:15,680] your app and exposes a live URL, so you can preview and interact with it just
[00:02:21,440] like any deployed project. And finally, the finished app is saved
[00:02:26,959] to our Postgress database powered by Neon. Let's head back to our Netflix project
[00:02:34,239] for a second. And just above the message form, you will see that we have a message, two credits remaining. That's
[00:02:41,440] right. Each generation uses a credit. So, let's see what else we can build
[00:02:46,879] with this app and find out what happens when we spend our last point.
[00:02:52,480] This time, I will go with something a bit more interactive, like a conbon
[00:02:57,680] board I can drag around. And just like our previous project, this one was
[00:03:03,040] created flawlessly. I can drag and drop cards and even create new ones.
[00:03:08,959] Everything just works. And just like our previous project, I can visit the file
[00:03:14,879] explorer and see every line of code that was generated. Notice how I've got one
[00:03:21,120] more credit left. Let's go ahead and spend it. Right beneath our homepage, we can find
[00:03:28,800] all of our previously generated apps or vibes as we are going to call them.
[00:03:35,120] Let's click into the first one just to confirm it is still live and working.
[00:03:41,760] But now, let's use our final credit to build something new. This time I'm going
[00:03:48,560] to build an admin dashboard and I'm hoping to see some status cards and a
[00:03:53,920] pageionated table. And here it is, a sleek looking admin dashboard with
[00:04:00,560] status cards, sidebar, and a pageentated searchable data table. Notice how I have
[00:04:08,319] no more credits left. meaning that when I try to generate a new prompt, I'm
[00:04:14,239] going to get an error and it is time to upgrade. In order to get more credits,
[00:04:19,680] it's time to upgrade. Billing is powered by Clerk. That's right. Just like their
[00:04:26,400] out system, the developer experience is incredibly smooth. No web hooks, no
[00:04:32,560] complicated code, no confusing Stripe setup. Everything works out of the box.
[00:04:38,560] Watch how quickly I can upgrade my account. That's it. I have upgraded and
[00:04:44,320] I am now on the premium plan and I can see my status reflected immediately in
[00:04:49,680] the user settings. And as a developer, you can now track your monthly recurring revenue on the
[00:04:56,000] clerk dashboard page. After a successful upgrade, you will see that you have a
[00:05:01,680] 100 credits remaining and beneath them the exact time they will reset. And by
[00:05:07,360] the way, dark mode is fully supported in this project. You can switch it on from the project's settings bar, and it will
[00:05:14,560] immediately update the entire app's UI, including the code explorer and the
[00:05:20,320] landing page. This isn't just a coding tutorial. We'll
[00:05:25,520] also be following a proper Git workflow throughout the project. This will include creating commits, new branches,
[00:05:32,960] and real pull requests. Every pull request will be reviewed by Code Rabbit, our AI reviewer that
[00:05:40,800] provides feedback on everything from logic issues to best practices.
[00:05:46,320] All actionable insights and critical mistakes will be flagged automatically, drastically improving our code quality.
[00:05:54,639] Let's quickly go over the text stack we'll be using. Next.js 15 with React 19
[00:06:01,919] make our framework with support for serverside rendering and server components. TRPC combined with fanstack
[00:06:09,440] query will ensure our app meets full stack type safety. Prisma OM with
[00:06:15,600] postgress provided by Neon will be our database solution. Tailwind version 4
[00:06:21,919] for styling along with chats and UI for accessible and reusable components.
[00:06:27,759] Authentication and billing will be done by clerk while background jobs and agent
[00:06:33,440] tooling and agent networks will be done by ingest. E2B for executing AI
[00:06:40,080] generated code in secure cloud sandboxes. Docker for generating custom
[00:06:45,759] sandbox templates. Open AAI anthropic or Grock depending on the model you choose
[00:06:52,560] to power your AI agents. Code Rabbit for AI powered code reviews. And of course,
[00:06:59,440] we'll deploy everything to production when it's finished. And now, without further ado, let's get started.
[00:07:06,000] 
[00:07:07,840] In this chapter, we're going to set up our Nex.js project, confirm our environment, get familiar with the file
[00:07:14,720] structure and versions of our project, and set up our component library. And
[00:07:19,840] finally, create a GitHub repository for this project. So let's start by setting
[00:07:25,199] up our Next.js project. If you head to the documentation page of Nex.js and
[00:07:31,440] click on the installation tab, you will find the system requirements. The minimum Node.js version is 18.18
[00:07:39,599] and these are the supported operating systems. So first things first, let's confirm we have a proper node version
[00:07:46,319] installed. You can go inside of your terminal and you can run node-v.
[00:07:51,680] And while you're here, also confirm these two commands. You should not be getting errors for any of these three.
[00:07:59,360] If you get errors for any of them, it is time to upgrade or reinstall your node.
[00:08:04,960] You can do that by visiting the official Node.js website. If you have a version
[00:08:10,000] which is lower than 18.18, you're going to have to upgrade as well. Keep in mind
[00:08:15,759] that if you are or Linux or some different operating system, your versions of npm and npx may be
[00:08:22,879] different, but as long as you're not getting any errors and you have a correct node version, you are good to
[00:08:28,080] go. So now let's go ahead and let's actually install our Nex.js application.
[00:08:36,000] Seeing here, we have an automatic installation CLI command. So I'm going to go ahead and copy it, but I'm not
[00:08:42,320] going to run it immediately. I will slightly modify it. Instead of using at
[00:08:47,440] latest, I'm going to write the exact version 15.3.4.
[00:08:53,040] So instead of latest, I'm going to do 1534. Why am I doing this? And do you need to
[00:09:00,160] do this? The reason I'm doing this is because I don't know when my viewers will come across this video. This might
[00:09:06,800] be a month from now, 6 months from now, or a year from now. And depending on that, there might be a lot of new
[00:09:13,680] breaking changes introduced in the latest versions. So if you want to, you
[00:09:19,040] can use the latest version. That's perfectly fine. But if you want to avoid any breaking changes, meaning that
[00:09:25,519] you're watching this video far into the future, like 6 months from now or a year from now, and you just want to code
[00:09:31,360] along, I'm giving you the option to use the exact version that I had at the
[00:09:36,959] time. Right? So this is the latest version at the time of me making this tutorial. So I'm going to go ahead and
[00:09:43,680] use this version. I'm going to create a project called a vibe. I'm going to
[00:09:48,720] select yes for TypeScript, yes for slint, yes for Tailwind, and I'm also
[00:09:54,240] going to select yes for the source directory. Be careful here because I think that the default value might be
[00:10:00,640] no. So use the arrow keys to select yes and press enter. Same thing for the app
[00:10:06,000] router. Make sure you select yes here. Yes for Turboac, but only for nextdev in
[00:10:12,160] my case. And I'm not going to customize the import alias. So this will be the
[00:10:17,519] only no option for me. And now let's just wait for our dependencies to install.
[00:10:24,399] After our dependencies have installed, you're going to see a success message like this. What you have to do next is
[00:10:30,640] you have to enter this directory with your terminal. So let's go ahead and do change directory vibe like this. And
[00:10:38,880] once you're inside of here, you can run the ls command to see a list of files inside. Before we run this project, I
[00:10:45,519] want to set up our IDE, the place where we are going to write some code. For me,
[00:10:50,800] that's going to be VS Code. So I'm going to go ahead and select open, and I will select my new Vibe project.
[00:10:59,200] Inside of here, you should be seeing a similar or the exact same file and
[00:11:04,720] folder structure. So, first let's confirm our versions. I'm going to go inside of package JSON. You can see that
[00:11:11,680] I have Turboac here because I selected TurboAC. Yes, you can see that I have React 19. You can see that I have next
[00:11:19,440] 15.3.4. You can see that I use Tailwind version 4 and TypeScript version 5. And these
[00:11:26,800] are probably the most important versions for this project. Of course, if you are watching this into the future and you
[00:11:33,519] want to use whatever are the newest versions for you, you absolutely can. You don't have to worry about this. Then
[00:11:39,680] I'm simply showing this for those people who want to use the exact same versions as me. Great. So about the config files,
[00:11:47,519] I have a tsconfig, a post CSS config, next config, and an esllet config. You
[00:11:53,519] might notice that Tailwind config is missing. That is because we are using Tailwind version 4, which no longer
[00:12:00,160] introduces a Tailwind config. Inside of the source folder, I have an
[00:12:06,399] app folder. Source folder is quite important. Make sure you have it. So, inside of the app folder here, I have a
[00:12:13,440] favicon, globals, layout, and page. You can quickly visit them if you want
[00:12:20,000] to. And inside of my public folder, you can see that I have some SVGs here.
[00:12:27,360] Great. So now let's go ahead and let's install Shats CNN UI into our project.
[00:12:34,560] First of all, let's mark these as completed. Now let's go ahead and set up Shatsen
[00:12:41,440] UI. So by visiting chats UI and going into the introduction you can see that even
[00:12:47,920] though we are going to use it as our component library is actually not a component library.
[00:12:54,399] Instead it is how you build a component library. It is basically a collection of
[00:12:59,920] open code components with composition pattern that you can simply add to your
[00:13:05,760] project. So let's go ahead and go inside of the installation and select next.js.
[00:13:10,880] Let's pick our package manager here. Let's copy the command. Make sure you
[00:13:16,480] are doing this inside of your project. So again, you can run ls to confirm you are inside. And once again, instead of
[00:13:23,279] using latest, I'm going to go ahead and show you which version I have. So for me, that is 2.7.0.
[00:13:31,760] So let's go ahead and run the command.
[00:13:37,680] My apologies. instead of latest 2.7.0
[00:13:44,160] in it. If you get prompted to install, you can select yes. I'm going to be using neutral for my color here.
[00:13:51,920] And there we go. Just like that, we have initialized chats UI into our project. Here you can see how it verified the
[00:13:58,959] framework next.js and it valid validated the Tailwind config. It found version 4.
[00:14:05,600] Perfect. You can see that it also installed some dependencies, modified our global CSS and created one file. So
[00:14:12,880] we can now go ahead and visit all of those things here. You can see that I now have CLSX
[00:14:19,680] Lucid React and I believe also Tailwind Animate CSS.
[00:14:25,839] I think that's the new package that came from uh Shotsy UI and Tailwind merge is
[00:14:32,639] new as well I believe. Great. So those are the packages that SHAT CN CLI added.
[00:14:39,279] Now let's go ahead and look at our lib file utils inside of the source folder.
[00:14:44,320] In here we have a CN function which we're going to use throughout our project whenever we need to safely uh
[00:14:50,480] merge or add dynamic Tailwind classes. And it also modified the globals.css
[00:14:58,399] by adding a bunch of variables which we can now use uh to build our project
[00:15:03,600] theme. It also added dark mode rules as well. Perfect.
[00:15:10,160] So now let's go ahead and let's learn how to add a component. So for example,
[00:15:15,440] let's go inside of our components here. Let's select a button component and
[00:15:21,199] let's go ahead and select CLI option for the installation. And let's go ahead and copy this to clipboard. And I'm going to
[00:15:28,880] use 2.7.0 add button. And just like that, we have added a
[00:15:35,600] component to our project. If you get prompted with the option to use legacy
[00:15:40,959] peer depths or force, uh you can select any of those two options. But if you're
[00:15:46,480] using the same versions as me, I'm pretty sure uh it will you will have the exact same experience. It should just
[00:15:52,399] work straight out of the box. But if you get any errors or any uh decisions to
[00:15:58,320] make, you can select legacy peer depths. If you don't have that choice, perfectly fine. You can just continue.
[00:16:05,040] Great. So now you can go inside of source components UI and you can find button.tsx
[00:16:10,800] and you can see that it's using some of these new packages that it added before and it also uses the CN which it
[00:16:18,000] initialized before. So the cool thing about SAT CNUI components is that they are open code meaning that it's not
[00:16:25,199] bundled in a Node.js package. it is actually available for us to modify and
[00:16:30,880] build as much as we want. So now let's go ahead and let's run our project.
[00:16:37,279] So npm rundev you will see d- turbo pack here and then you can open the localhost
[00:16:43,199] 3000 to see your app. Now let's go ahead and let's modify
[00:16:49,680] source app page tsx so we can see some changes here.
[00:16:55,279] go inside of page here and let's learn how to actually write a page component.
[00:17:00,959] So I'm going to remove everything and the important thing here is that your components need to be uh using default
[00:17:08,640] export. Right? So the name doesn't matter. This can be called home or it
[00:17:13,679] can be called page. I like to use the page convention. And now in here I can just write hello world.
[00:17:20,959] And once I save you will see the change hello world. If this is your first time using Visual Studio Code, if you have a
[00:17:28,640] little uh circle here, it means the file is unsaved. So, just hit save and then
[00:17:35,360] it will be updated. And here's what happens if you don't do
[00:17:40,480] a default export. It will not be able to find the page. So, that's why default
[00:17:45,919] expert is important here. But the name itself does not matter. But of course,
[00:17:51,200] you can't use some reserved uh things, right? You should not be able to call this error, right? Because error is
[00:17:58,480] already reserved. Great. So now let's go ahead and let's test out our tailwind. So I'm going to
[00:18:05,919] go ahead and add a class name here. Text bold.
[00:18:11,039] My apologies. It is font bold. I forgot. There we go. And now my font is bold.
[00:18:17,280] But let's try changing the color. Text rows 500. And now I've changed the color. You
[00:18:23,919] might notice that I have this little color icon. And when I hover over my classes, I can see the inner CSS it is
[00:18:31,200] applying. If you want to see the exact same thing, you can go ahead and install Tailwind
[00:18:37,200] CSS IntelliSense package. It will be quite useful in this tutorial.
[00:18:42,799] Great. Now, let's go ahead and let's remove this and let's add a button from components
[00:18:49,039] UI button. Let's go ahead and give it some children. And let's close it.
[00:18:57,679] And just like that, you have a button here. And now I'm going to show you a quick
[00:19:03,120] way you can enter the button inner code. You can use command or control and then
[00:19:08,960] click here and that will take you to the actual source components UI button.
[00:19:16,240] Right? So it will be quite useful for you to learn this shortcut because I will use it quite often in the tutorial
[00:19:23,200] so you don't get confused how I got there that fast. Another shortcut you should learn is command space. My
[00:19:30,480] apologies command P or control P depending if you are on Windows. And
[00:19:36,240] then once you open this bar you can search for button and press like this.
[00:19:41,600] I'm going to be using this quite extensively in the tutorial. So it would be good that you learn this as well. So
[00:19:47,520] once you're inside of the button here, you can see that we can have some variants like destructive. Let's go
[00:19:53,840] ahead and try it out.
[00:19:59,679] Once you add it, you can see that the destructive variant is now uh active.
[00:20:04,960] But what happens if you go inside of the code and change this to danger? You can see how it immediately breaks.
[00:20:12,000] And we have to change this to danger. So what we've just done is we've changed the inner code of the button to our
[00:20:19,039] liking. Instead of destructive, it is now called danger. So let's bring that
[00:20:24,480] back now and let's try creating a new one. So new and let's go ahead and try
[00:20:30,240] something fun like background purple 500 text white.
[00:20:36,240] And if you go ahead and try now, you will see that you have the new option. And just like that, you created your own
[00:20:42,640] variant. So that's the power of Shatsen UI. And now that we confirm the button
[00:20:49,120] is working, let's go ahead and let's add all of the other components. The reason I want to add all other components is so
[00:20:55,919] that it's easier to follow along in this tutorial. You obviously don't need all of them and you can clean them up later,
[00:21:03,120] but it's just going to be easier for us to have all of them at our disposal and then simply choose which ones we want to
[00:21:09,280] use instead of having to install and wait. So, I'm going to go ahead and shut down my app and I'm going to run npxhat
[00:21:16,400] cnui 2.7.0-all. And this will add every single component
[00:21:22,159] to our project. And you can see how it added all of
[00:21:27,679] these components, but it skipped the button because it already exists. Perfect.
[00:21:33,840] So, now we can go ahead and inside of your source components UI, you will see all of these various components here.
[00:21:40,720] You now probably have a lot of unsaved files here. My apologies, not unsaved,
[00:21:45,760] uncommitted files. Uh, we're going to explore what that means in a second. So,
[00:21:51,679] let's go ahead now and let's do the last thing that we need, which is create a GitHub repository. So, I'm going to go
[00:21:58,960] ahead and go inside of my GitHub. And I selected new repository here. Now, just a quick note, you don't have to do this.
[00:22:06,159] So yes, following this step right here, creating a GitHub repository, branching
[00:22:12,000] out, doing commits, and opening pull requests, it's completely optional. It
[00:22:17,679] is simply for those who want to learn uh how to follow a proper Git workflow. If
[00:22:23,520] that is not something of interest to you, you don't have to do it at all.
[00:22:28,559] Right? So I'm going to create a new repository called Vibe, and I'm going to set it to private. And I'm going to
[00:22:34,880] create a new repository here. And then I'm going to go ahead and copy uh these
[00:22:40,640] three lines because we need to push an existing repository here. But before we
[00:22:46,159] can do that, we have to stage our changes. So we have 53 unstaged changes now. So let's go ahead and add a plus
[00:22:53,280] here. And now all of them are staged. And now let's add a commit message. So
[00:22:58,480] I'm going to go ahead and do 01 setup. basically my commit messages will match
[00:23:04,080] uh my chapter and then I'm just going to commit. And then what we're going to do
[00:23:09,120] is we're going to go ahead inside of our project and we're going to run those three commands here.
[00:23:15,039] Wait a second. And now if you go ahead and refresh your repository, you can see
[00:23:20,320] that you have your project available right here. And now in here you no longer have that button publish a branch
[00:23:27,200] because now you have access to your uh remote origin main meaning that this is
[00:23:34,000] no longer a local repository. This is now a remote branch on a remote repository. Perfect. So that marks the
[00:23:42,799] end of this chapter and now we are ready to start setting up our database. Amazing job and see you in the next
[00:23:49,520] chapter. In this chapter, we're going to set up
[00:23:51,000] 
[00:23:55,039] our database. We're going to start by obtaining a connection URL using a poser
[00:24:01,200] database provided by Neon. We are then going to set up Prisma, our OM. We're
[00:24:07,679] going to learn how to add and modify a Prisma schema, some basic migrations, as
[00:24:12,880] well as how to use a database studio, and also how to reset your database in case something goes wrong. And then
[00:24:20,400] we're going to go ahead and branch out, open up a pull request, and review and
[00:24:25,600] merge that pull request. So, let's go ahead and visit Neon database. You can
[00:24:31,360] use the link in the description or the link you can see on the screen to let them know you came from this video. Once
[00:24:37,840] you've created an account with Neon, go ahead and click create project. I'm going to go ahead and call my project
[00:24:44,159] Vibe, and my database name will be Vibe as well. And then I'm going to click the
[00:24:49,760] connect button and I'm going to copy the snippet for my connection string. After that, I'm going to go inside of my
[00:24:56,240] project and I will create a new file environment. Inside of here, I'm going to create a
[00:25:02,159] database URL and I'm going to paste my connection string.
[00:25:08,799] After that, let's go ahead and let's set up Prisma. You can use the link in the
[00:25:14,240] description or the link you can see on the screen to let them know you came from this video. This helps me a lot in
[00:25:19,600] creating more content like this. So let's go ahead and learn how to use Prisma with Nex.js. The first step is to
[00:25:27,679] set up the project. Since we already have that, we don't have to do that.
[00:25:32,799] Instead, we can go immediately to step two, install and configure Prisma. Since
[00:25:38,400] we are using other databases, specifically Neon, let's click here so
[00:25:43,440] we know what to install. So, let's go ahead and start by installing Prisma and TSX as our dev dependencies.
[00:25:54,240] Once this was installed, I will just go ahead and go inside of my package. JSON
[00:26:01,039] so you can see the versions, right? Prisma is 6.10.1 and TSX is 4.2. 20.3.
[00:26:09,919] So if you're using the latest versions, this probably does not matter for you. But if you want to use the same versions
[00:26:16,240] as me, you would go ahead and set up your installation like this. For
[00:26:21,760] example, if you want to. Great. So after we've done this, our next step is to install
[00:26:30,559] Prisma client, but this time not as a dev dependency, but as an actual
[00:26:36,159] dependency instead. After we've done this,
[00:26:41,919] let me show you the version. Prisma client 6.10.1. So I think the
[00:26:48,640] most important thing about the Prisma versions is that Prisma client needs to match your Prisma dev dependency. At
[00:26:56,159] least at the time of me making this video, I'm pretty sure that is an important rule. It might change in this
[00:27:02,159] in the future. So I'm not sure, but I think it was this way for a long time now. So now let's go ahead and let's
[00:27:09,039] actually run our app. So in here they have this snippet but I'm not sure if
[00:27:14,480] this exact output will work with our directory because we have a source file
[00:27:20,080] here. So instead what I'm going to do is I'm just going to run npx prisma init with nothing more. So npx prisma init.
[00:27:29,039] Let's go ahead and run this. And after this was finished I see this
[00:27:36,159] big log here. So your Prisma schema was created in Prisma/sema.prisma.
[00:27:45,360] Prisma would have added database URL but it already exists in your environment.
[00:27:52,480] You already have a g ignore file. Don't forget to add environment in here. So pretty good warnings here. So yes, every
[00:27:58,960] time you run npx prisma in it, it creates an environment file or it modifies it and it adds a database URL.
[00:28:07,279] But this time it detected that we already have a database URL inside of
[00:28:12,720] our environment. So it didn't do anything. Right? Usually it would modify
[00:28:18,960] your uh uh environment file and it would write a big message at the top saying
[00:28:25,279] modified or generated by Prisma. But the only thing you need in your environment is the database URL. So even if yours
[00:28:32,320] looks different, maybe in the future they've changed this. All you need is a database URL for now. Great. So now
[00:28:40,000] let's go ahead and let's visit the other things added inside of Prisma folder. We
[00:28:45,679] now have a schema.prisma. And what's important here is that your provider is
[00:28:50,880] posgress and that your URL is the database URL. So make sure you don't
[00:28:56,000] have any typos here. But if you got this warning message, it means you have typed
[00:29:01,600] it correctly because it did not override it. And yes, about this second message,
[00:29:07,360] uh don't forget to add environment in the git ignore file. That is very important. But as you can see, my
[00:29:13,919] environment file is grayed out, which actually means it is inside of git ignore. You can find it right here.
[00:29:22,159] Great. So now that we have that set up, let's go ahead and learn how to modify
[00:29:28,080] the schema. So I'm going to go ahead and I'm going to copy this exact changes that they are using in their Prisma. If
[00:29:35,039] you don't have access to that documentation page for whatever reason, don't worry. I'm just doing this as an
[00:29:40,240] example. Our schema will be different anyway, or you can just pause the screen and type it out now. So basically we're
[00:29:46,960] adding a user model with an ID of type integer and it will auto increment.
[00:29:52,480] Basically if I add one user it will be ID1 and then I add another user it will
[00:29:57,919] be ID2. Then an email string which is required and unique and a name string
[00:30:04,159] which is optional. So basically, Prisma is using decorators
[00:30:10,240] for stuff like defining a primary key or ID in this case or adding the default
[00:30:16,080] value or setting something to be unique. And if you want to make a field optional, you simply add a question mark
[00:30:23,520] after its type. And if you want to make a relation like user and post, you start
[00:30:29,360] by defining well obviously your database structure one to many many to many,
[00:30:34,480] right? uh and then you simply add how you want it to be architectured. So I
[00:30:39,520] want user to have many posts but I want post to have only one user. So you
[00:30:44,799] define the second model and you literally say it's an array of that
[00:30:50,159] model, right? And then inside of here in order to properly connect it using foreign keys, what you have to do is you
[00:30:57,679] have to set the author ID or the user ID and then you have to create an actual
[00:31:03,840] relation using the foreign key. So you have to use user as the model and then
[00:31:09,120] you use a decorator relation. So it matches the outer id and it references
[00:31:14,960] the ID of the user model and this is the place where you would add things like on
[00:31:20,320] delete cascade right so in case the user gets deleted we want the model post to
[00:31:27,440] get deleted as well so you can remove this for now just leave it exactly like this this is like a pretty good minimal
[00:31:33,760] example to learn Prisma and one thing I forgot to tell you yes you can install
[00:31:39,679] Prisma uh here to see the syntax. I should have told you this before. My
[00:31:45,200] apologies. I just remembered. Uh, so make sure to install this, right? So you can see the pretty colors and
[00:31:50,640] everything. And once you've done this, make sure you save this file. And let's go ahead and see how do we actually, you know, commit
[00:31:58,399] this, right? Because right now, uh, our database here is completely empty.
[00:32:03,519] Nothing yet exists here. Nothing is pushed here. So let's go ahead and let's do npx prisma migrate dev. I'm not going
[00:32:11,039] to do this flag because that's not how we're going to uh run our commands. So, npx prisma migrate dev. And now we're
[00:32:19,360] going to be asked to uh call this migration in a certain way.
[00:32:27,360] So, I'm going to call this migration in it. And just like that, we applied the
[00:32:32,960] migration. And two things have happened now. Actually, three things. The first
[00:32:38,159] thing is that it synchronized our database from neon to the schema. Right?
[00:32:43,760] So now uh our neon database has the same schema there. Uh the second thing it did
[00:32:49,440] is it created a migrations file instead of our project. And the third thing it did is it generated the Prisma client
[00:32:56,399] instead of source generated Prisma. Right? So let's try and check all of those things out. Uh if you go inside of
[00:33:02,640] your Prisma, you can now see the migrations here. And inside of here you can see the actual SQL file that
[00:33:08,480] happened. Uh and the second thing you can see is
[00:33:14,240] I'm not sure where is my uh generated. It's right here. Source generated. There
[00:33:20,080] we go. You can see the Prisma is now available here. And the third thing that it did is it synchronized the Neon
[00:33:26,960] database. So if you go inside of neon uh and if you go inside of tables I think
[00:33:32,480] you might be able to see there we go post and user right. So you can see uh
[00:33:38,320] the exact fields here title content published author ID and user relation ID
[00:33:45,600] email name and posts relation. There we go. So we officially synchronized all of
[00:33:50,880] those things now. So let's go ahead and see the next steps that we have to do.
[00:33:56,080] Uh in here it suggest creating a seed script. Let's go ahead and do that.
[00:34:01,120] Right, I'm going to copy this. You don't have to do this, but I think it's nice.
[00:34:06,720] It's a nice way to learn Prisma. Let's go inside of Prisma and let's create a seed.ts
[00:34:12,720] script like this. And let's paste it inside. Now in here I have to go inside
[00:34:18,560] of source I think. Let me just see how do I access this.
[00:34:28,639] All right, found it. So it's source generated Prisma, right? We have to go
[00:34:33,679] inside of source generated Prisma. It's not inside of app like they suggested
[00:34:40,320] here. Perhaps uh this depends on whether you use the source folder or not or
[00:34:45,359] they've changed it. So they use the prisma dot user create input. Now if
[00:34:50,720] you're wondering where does this come from? How does it know user create input? Why is this called user? Well,
[00:34:58,000] that's actually the magic of Prisma. Every time that you modify the Prisma
[00:35:03,119] schema and you run the proper command npx prisma migrate dev which internally
[00:35:09,280] runs npx prisma generate. What basically happens is that it
[00:35:14,880] refreshes its internal uh intellisense typescript tool if I can call it like
[00:35:20,720] that and it creates a bunch of these useful types for you. So right now you
[00:35:25,839] also have things like Prisma uh you can see all these weird things. If I I think
[00:35:32,240] I can you I can import user and I can import post right and if I were to add a
[00:35:37,359] new model I would be able to import that as well. Right? So that's the cool thing about Prisma. Uh perfect. So I have this
[00:35:44,800] user data here and let me just if you if you are not unable to copy this let me
[00:35:50,560] just show you this first example and all the other ones are exactly like that and
[00:35:55,839] this is the bottom part right uh or you can use the link that I will put on the screen uh for this seed
[00:36:02,960] script if you want if you are unable to find it great so now let's go ahead and
[00:36:09,119] let's add this to our package JSON so Prisma and seed
[00:36:14,800] Let's go inside of package. JSON. So after scripts here, let's add Prisma
[00:36:22,000] seed. TSX Prisma SLT seed.ts. Just ensure that yours is in the correct
[00:36:29,119] place. And once you've done that and saved the
[00:36:34,400] file, uh in here we have a warning. Before starting the development server, note that if you're using Nex.js JS
[00:36:41,680] version 15.2.0 or 15.2.1 do not use Turboac. Right? So you can
[00:36:47,839] see that Turbopac sometimes has this small little issues. But since we are on a newer version, we should have no
[00:36:54,400] problems here. Right? Uh and now let's go ahead and run npx Prisma database
[00:37:00,079] seed here like that. And that uses the tsx Prisma
[00:37:06,240] seed. And there we go. The seed command has been executed. So, just make sure you have tsx installed in your dev
[00:37:12,079] dependencies and your seed command set at the correct place. And you should immediately be able to see this if you
[00:37:18,240] go inside of your neon database. And if you go inside of your users, you will see Alice and Bob inside of the users
[00:37:25,119] here. So, we successfully populated our database. Perfect. Another way of seeing this data is by using the Prisma Studio.
[00:37:33,040] So, NTX Prisma Studio should open it up on 555.
[00:37:39,599] And there we go. You can see that inside of here, I have some posts and I have some users
[00:37:47,680] right here, Alice and Bob. Perfect. Let's see what are the next steps here.
[00:37:53,760] So, now we have to learn how to actually uh fetch our data, right? So, let's go
[00:38:00,000] ahead and do that. I'm going to go ahead inside of my project inside of source
[00:38:06,560] inside of lib and I'm going to create a database.ts file. So they recommend
[00:38:11,680] creating Prisma. I like to call it database. And I'm going to import Prisma
[00:38:17,119] client from generated Prisma. This is the same thing that they are doing. I'm just using an alias here. And then you
[00:38:24,480] literally have to do the same thing here. I'm going to go ahead and try and
[00:38:30,160] explain uh how this works. So basically
[00:38:35,200] why not just export new Prisma client. The reason why is because of Nex.js hot
[00:38:41,440] reload. Uh every time a hot reload happens a new Prisma client gets initialized and that causes problems and
[00:38:48,480] you would actually see a warning in your terminal about that. So what they do is they store Prisma in a global because
[00:38:56,800] global as the window object is not affected uh by hot reload.
[00:39:04,480] I used window object. I'm not sure if this belongs to the window nameace. Perhaps node namespace would be a better
[00:39:12,079] descriptor of it. And I also don't like to use the export default. So I will just use the export const here. And let
[00:39:19,760] me just put it here. Actually, I have to do it like this. Okay.
[00:39:26,240] So, now that we've done that, let's go ahead and let's uh try and query
[00:39:31,359] something. So, I'm going to go inside of my source folder inside of app page.x
[00:39:38,880] and I'm going to go ahead and import prisma from lib database right here. And
[00:39:46,960] I will get my users from await which means I have to turn this into an asynchronous component prisma dot user
[00:39:56,160] and let's just use find many and then I'm going to remove this entirely and do
[00:40:02,400] JSON stringify users null and two and we can remove the button import. So this is
[00:40:09,760] a server component by default meaning that it is rendered on the server and it
[00:40:15,119] has access to the database. Server component is not the same thing as server side rendering. Those are two
[00:40:22,079] different concepts. A server component is actually a react thing not a next.js
[00:40:28,640] thing. Next.js is simply the environment where server components can be demonstrated. So let's go ahead now and
[00:40:35,920] do npm rundev. Let's visit localhost 3000. And in here
[00:40:42,000] you should see a JSON of your users inside. And if you change this to post
[00:40:48,800] and change this to posts, you should be able to see posts here as well. So that
[00:40:56,720] is basically it. Right in here they go a bit more in depth. They're creating a whole, you know, unique include. We're
[00:41:04,000] going to learn that through the project itself. So that's basically it for this. But there is one more thing I want to uh
[00:41:11,440] go over here. So we added the schema, we learned about basic migrations and we learned about database studio. But we
[00:41:18,079] didn't learn about database reset. So why do we even need to learn about
[00:41:24,800] database reset? Well, I just think it's very useful for development. So let me
[00:41:29,839] go ahead and actually modify this. So for development, right, not for
[00:41:35,040] production cases, right? You would pretty much never need to reset your database in production, but during
[00:41:41,760] development, it's just super easy if you get stuck, right? Because this is the case now. So we now have some posts and
[00:41:48,800] we have some users, right? So what happens if I go ahead now inside of my
[00:41:54,079] schema Prisma here and for example, I remove the title from the post. It's no
[00:42:00,079] longer required. or I remove the email, right? And if I go ahead and do that now. So, npx prisma migrate dev. I'm
[00:42:08,079] going to add this changes now. Uh it will probably ask me to reset database
[00:42:13,760] anyway, right? Uh that's why this is a dev command, right? It should this
[00:42:19,040] should also not be used in production. You would usually do npx prisma migrate.
[00:42:24,880] You can learn more about that uh in the actual Prisma documentation here. And there we go. So now we have a problem.
[00:42:31,760] You are about to drop the column title which still contains nonnull values and
[00:42:37,520] you're about to drop the column emails. Are you sure you want to create and apply this migration? I'm going to
[00:42:43,280] select yes and I'm going to call this test migration here. Uh and this time it
[00:42:48,960] worked right. So this seems to be uh normal now. But the problem is what if
[00:42:54,720] you do something more complicated? For example, let's try and let's drop the user here and let's drop this. Right?
[00:43:02,640] I'm trying to make a scenario uh where this actually stops working. Right?
[00:43:10,000] Let me try this. I'm going to do another migration and
[00:43:16,960] I'm going to call this test again.
[00:43:22,079] Test two. And okay, it's still working. Never mind. Basically, my point is that
[00:43:29,200] you need to learn how to nuke your database. Let's say that you do some some of your own experiments here and
[00:43:36,400] you get to a point where you're getting errors with your npx Prisma migration. What I usually do if I get completely
[00:43:43,599] stuck and I'm in development, this is important only for development mode. I
[00:43:49,760] would go inside of Prisma here and I will remove all of my migrations, all of them. And then I would do npx prisma
[00:43:57,280] migrate reset like this. Are you sure you want to reset your
[00:44:03,119] database? All data will be lost. And I will press yes. Right. So, uh, oh yes,
[00:44:11,200] um, I forgot that resetting it also runs the seed script. So, let's remove the seed script because it doesn't make
[00:44:17,680] sense, right? We just use it to learn. So, we can remove that. We can go inside of our package JSON and we can remove
[00:44:23,359] this. And we can also go inside of our source app page and we can remove this as well.
[00:44:37,040] And then let's go ahead and just confirm that we can do npx prisma migrate reset
[00:44:42,960] again. So just confirm and this should clear
[00:44:48,319] your entire database. Basically this is quite useful in
[00:44:54,480] development mode when you are for example doing what we just did right we just learned how to use Prisma. So we
[00:45:00,960] populated our database with some models. We don't really need we don't need the user with name optional and email
[00:45:09,359] required and posts right there. There's not going to be any posts in our project. So we just learned how to reset
[00:45:15,440] our database as well. Perfect. So now it's time to create our first pull
[00:45:21,200] request. Once again uh the part of git workflow
[00:45:26,640] of this tutorial is completely optional only for those who want to learn. So you can end the chapter here uh if you don't
[00:45:33,200] want to follow the git workflow. So what I'm going to do is I'm going to go ahead down here where it says main and I'm
[00:45:40,480] going to click create new branch and I'm going to call this 02 and then I'm going
[00:45:46,480] to call it database. So I'm going to call my branches according to my chapter 02 database. And you can see that down
[00:45:53,440] here it says 02 database. Then I'm going to go ahead and click the plus icon to
[00:45:58,480] add all of these changes. And then I'm going to go ahead and add my 02 database commit message. And after that, I'm
[00:46:05,760] going to publish my branch. And once I've done that, I'm going to go back to my GitHub here. And immediately
[00:46:13,119] you will see an option to create a pull request in my repository. If this did not appear for you, you can manually go
[00:46:20,160] inside of pull requests, new pull request. The base will be main or master
[00:46:26,800] depending on what you're using. And you're going to select your new branch here in the compare. And then create a
[00:46:32,640] pull request and then click create pull request right here.
[00:46:40,000] And once you've created your pull request, you can go inside of file changes here. And in here you can see
[00:46:45,920] every single thing that was modified. You can see that we added the Prisma client instead of our lib database. We
[00:46:53,599] slightly modified our page tsx and we added the schema prisma. We installed
[00:46:59,520] some new packages and we also added uh source generated prisma to get ignore.
[00:47:05,280] So that was not added. And after that we can go ahead and merge this pull request and click confirm merge. Uh I'm not
[00:47:13,119] going to delete my branch simply so I have access to all of my branches here. You can see that I can now always go
[00:47:18,880] back to that state of the application. And then what you have to do inside of your project is the following. Go uh
[00:47:26,319] down here and click on the 02 database branch and then you have to select your
[00:47:32,319] main branch. You might be wondering which one this main or this main. Well,
[00:47:38,400] basically the difference is one is a local branch and the other one is a remote branch. So the remote branch
[00:47:44,880] would be the one that is most uh well I I would say that is the source of truth.
[00:47:51,599] I could be wrong in doing this because you could have some changes on your main branches that you didn't push. But in
[00:47:58,400] our case we're going to push everything from the main branch. So in your case it doesn't matter if you click on this one
[00:48:04,960] or if you click on this one you will have the exact same result. What's important is that you do the following.
[00:48:11,200] uh you click on synchronize changes here and then okay
[00:48:16,319] like this. And now you should no longer have any uh visible buttons here, right?
[00:48:22,559] And if you go inside of your graph, you should see this an initial commit then 01 and then something different for 02,
[00:48:30,960] right? Because we branched out and then we merged that back into our main like
[00:48:36,960] that. And now if you go ahead inside of your main here, you can see that six minutes ago we merged this, right? Uh,
[00:48:45,040] perfect. So that's it for this chapter, you can now see that even though I'm in my main branch, I still have my Prisma
[00:48:52,240] schema, meaning everything is fine. Everything is good. Perfect. So let's go
[00:48:57,920] ahead and wrap this up. So I'm going to go ahead and uh
[00:49:03,520] check this as done. Amazing job. and see you in the next chapter.
[00:49:08,000] 
[00:49:09,599] In this chapter, we're going to set up TRPC, which is going to be our data access layer. Let's go ahead and let's
[00:49:17,119] head to the TRPC documentation page. You can use the link in the description or the link you can see on the screen to
[00:49:23,200] let them know you came from this video. Once you are on the landing page, go
[00:49:28,880] ahead and click on the docs. And in here, click on the client usage. And in
[00:49:34,240] here you can find tanstack react query with a little star icon. And in here
[00:49:40,319] going to server components. Be mindful that at the top here you do have a
[00:49:45,680] nex.js tab but that is talking about an older nex.js version. So make sure that
[00:49:53,520] you are inside of tanstack react query server components. This is what we need.
[00:49:59,599] The first thing we have to do is install all the necessary dependencies. So, if you're watching this video far into the
[00:50:06,000] future, I would recommend waiting until you see the exact versions that I had installed. So, before you run this, what
[00:50:13,119] I suggest you do, and what I suggest you do before you start any of my chapters,
[00:50:18,240] is click on this button right here and just click okay. Basically, this is just
[00:50:24,240] a sanity check to confirm that you are on your main branch and that you didn't accidentally uh forget to synchronize
[00:50:32,160] your merged branch from the previous chapter. So, you only care about this if you are actually following the git
[00:50:38,720] workflow. Once you've done that and you are confirmed to be on the main branch, you
[00:50:44,480] can go ahead and install all of these packages. I am going to show you which versions exactly I have installed.
[00:50:52,319] Let's head into package.json so we can see all the changes here.
[00:50:58,800] As you can see, I have tenstack react query 5.80.10 and all tRPC versions are 11.4.2.
[00:51:08,400] So if that's something you care about, you can go ahead and install these
[00:51:13,599] versions as follows. You would add this exact number to all of these packages
[00:51:20,400] regarding TRPC and then you would change this from using the latest version to using
[00:51:27,920] 5.80.10 and the ones for ZOD client only and
[00:51:35,200] server only are not that important but I'm going to show you them as well. So server only is 0.0.1 0.1 and zod is a
[00:51:43,359] package we already have installed and we had it installed in the first chapter setup because when we added all chats
[00:51:50,960] component we also added forms and forms in chaten use zod for validation so
[00:51:57,119] that's why this isn't marked as a new dependency because we already had it great so now that you have confirmed to
[00:52:04,640] installed all TRPC ones just double check that you actually have the same versions of all TRP PC packages because
[00:52:12,160] that is quite important, right? So the version here is the the important
[00:52:17,200] version here is 11.x, right? The minor versions probably don't matter that
[00:52:22,640] much, but there is a big breaking change in uh 11 if you're coming from 10 or 9.
[00:52:28,720] So make sure you're using at minimum 11 something and then you're good to go.
[00:52:34,079] Perfect. Now let's go ahead and let's create a small init file here. Uh so I'm
[00:52:40,720] going to copy this. Uh it's a very simple snippet. So even if you don't have access to this documentation page,
[00:52:47,280] don't worry. I will pause the screen and you will be able to copy with me. Let's create a TRPC folder inside of our
[00:52:53,440] source folder. And inside let's create init.ts. And in here we are importing init TRPC
[00:53:00,800] from TRPC server package and cache from React. We are setting up the create
[00:53:06,000] TRRPC context here with some mock information and we are also creating our
[00:53:11,760] initial T object which is basically initializing the TRPC and then we are
[00:53:16,960] extending it to create the router callers uh and factory and base procedure.
[00:53:23,359] Perfect. So that's our init file. Now let's go ahead and scroll a bit down
[00:53:28,559] and let's create our base routers. So I'm going to go ahead inside of TRPC
[00:53:34,160] I'm going to create routers folder and inside app.ts.
[00:53:41,040] So I'm importing Z from zod and from the previously created init file I'm
[00:53:46,480] importing the TRPC router with the base procedure. So in here we have a very simple procedure called hello and it
[00:53:53,760] accepts text which is a string and it returns back an object with a property
[00:53:59,760] greeting which is a string with the information from the text that we've entered. We are going to test this out
[00:54:06,240] later so it's easier for you to understand if this is the first time seeing the TRPC syntax.
[00:54:12,319] So that's it for the routers and now what we have to do is we have to create
[00:54:17,520] our API folder DRPC and then a special uh Nex.js variable folder uh and then
[00:54:24,720] route.ts. So let's do that first. Inside of source app folder, let's
[00:54:30,640] create API. Then let's create tRPC. And then let's create a dynamic folder inside of square
[00:54:37,839] brackets TRPC again. and then route. DS
[00:54:43,119] and let's go ahead and copy this. Now, in here, we're going to get some errors. It's specifically uh about this import
[00:54:50,480] alias. So, we don't use uh this curly little string. Instead, we use an add
[00:54:56,000] sign. So, you can just switch it to that and you will have no more errors. As you can see, uh all of these things already
[00:55:02,160] exist. So, we have the TRPC server package. They are just extending it here. Some tree shaking it seems. And
[00:55:09,040] the TRPC in it is the one we just created as well as the router's app. Right? So you can commandclick on this
[00:55:15,680] to visit that same as the init one. And this is a NodeJS package. So that's a different thing. Great. You can save
[00:55:22,960] this as well. Just double check that you have app folder API TRPC TRPC in square
[00:55:29,920] brackets and then route.ts. It's very important to have this exact structure.
[00:55:37,200] Great. Once we've done that, let's go ahead and let's create the queryclient.ts.
[00:55:44,000] So I'm going to go inside of source drpc queryclient.ts.
[00:55:53,359] Yes, it is.ts. Perfect. So about super JSON, we can um let's do this. Let's
[00:56:00,240] immediately install it. So super JSON because we are going to need it. And I will go inside of my package JSON here.
[00:56:07,359] So this is my version in case you want to use the exact same one. And what
[00:56:12,400] we're going to do is we're going to immediately enable serialized data using superjson.s serialize and des serialize
[00:56:19,200] data using superjson. DS serialize as well. So you can leave it the component
[00:56:25,040] like this. No need to modify anything further. Now let's go ahead and let's create our
[00:56:32,000] client.tsx. So this will basically be a wrapper, a provider of TRPC and Tstack query which
[00:56:40,640] we're going to wrap our entire app around. Uh if this is your first time ever seeing Tanstack query or TRPC, this
[00:56:47,760] is a lot of information at once. Uh but if you've ever worked with uh React
[00:56:53,599] Query or something like SVR, I promise it's a similar API. It is just uh a bit
[00:57:00,400] more advanced data access layer format that we are doing here. So as much as
[00:57:06,160] this setup seems a little bit complicated, it is definitely worth it. You will see how easy it will be to
[00:57:12,480] build your API routes and your procedures later on. You will thank yourself for going through this because
[00:57:19,119] of how easy it will be to maintain this project going forward. Right? So just
[00:57:24,240] stay with me. I promise it will be worth it. So let's create client.tsx
[00:57:29,359] inside of here. client.tsx. So this extension is important because
[00:57:35,200] this will be exporting a component. So since this is a bit of a larger file, I'm going to go ahead and explain what
[00:57:41,760] it is. So first of all, we are adding use client because this has to be a client component. You can see it tries
[00:57:46,880] to access the window here and it's also using some uh hooks like use state that
[00:57:53,280] can only be achieved using a client component. That's why we are using use client at the top and you can also see
[00:57:59,839] the explanation here. So we are importing all of those things. We should not have any errors because we either
[00:58:05,680] created or installed these packages. So one thing that we are going to change
[00:58:11,440] is this. So I don't like how this is specifically tailored for Versell because I don't know where you want this
[00:58:17,839] deployed. So don't worry. I'm going to show you how you can modify this so it works well regardless of where you
[00:58:24,079] deploy. So let's go inside of our let's just save the file uh
[00:58:32,400] and let's go inside of environment here and let's simply add next public app URL
[00:58:40,799] and this will be the following. When you go ahead and do npm rundev you're going
[00:58:46,000] to see where your app is being run. So go ahead and copy this and simply paste
[00:58:51,520] it inside. Then I always like to copy from here and then paste it rather than type it out
[00:58:58,319] because you can do some typos if you're not careful. And you can see how complicated this is, right? So it
[00:59:04,240] recognizes Versell URL and then it has to append the protocol and then it has to add this because Versel URL doesn't
[00:59:10,880] have the protocol otherwise it has to guess that we are using the 3000 port. It's just completely unnecessary. We can
[00:59:17,760] do this much easier. you can return this completely and instead of using this you
[00:59:22,880] can just do process environment next public app URL. So then when you deploy,
[00:59:28,319] you will simply change this to your production URL regardless of where you deploy and this will work just fine. And
[00:59:34,880] in my opinion, it's much simpler to work with. And this is important, right? You can see that this will attempt to load
[00:59:41,839] the URL from localhost 3000 /trpc.
[00:59:48,720] So it's important that you didn't do any changes herec.
[00:59:54,160] That's why this structure is important. And then in here we just have some regular uh trpc and uh tanstack query
[01:00:02,880] setup. But we have to enable the transformer superjson because we did enable it here. So we have to enable it
[01:00:10,480] here as well. So let's do the following at the top here. I'm going to import superjson from super JSON and I'm going
[01:00:18,160] to go down here remove this part and simply uncomment. So we are using the
[01:00:23,599] super JSON and you can ignore the error for now. It's because we need to enable it in some other places as well to get
[01:00:29,200] it to work. So once you've done this, we didn't do any changes besides
[01:00:35,920] this and this. Right? That's the only thing we changed. So now as per their
[01:00:42,079] instructions, we have to go ahead and wrap this in the root of our application when using Nex.js. Since we are in
[01:00:49,040] Nex.js, JS. Let's go inside of the root of our application and that's inside of the app folder layout. So in here simply
[01:00:57,680] go ahead and wrap the entire application. So be careful with the component you are
[01:01:04,160] importing. It is TRPC react provider from TRPC client. The reason I'm telling
[01:01:10,799] you to be careful is because there are similarly named imports from packages.
[01:01:16,240] We are not importing from any npm package. If you need to be able to command or controlclick here and it
[01:01:22,799] should lead you to this exact component which has this little superjson error. That's the one we need to import and
[01:01:29,440] wrap our application around because if you just do TRPC provider, you can see that that also exists, but that's the
[01:01:36,319] incorrect one, right? It's TRPC react provider from TRPC client component that
[01:01:41,760] is currently throwing the error. That's the one we need. Once you've done that, we have to create
[01:01:48,480] a server.tsx. And this is where things become interesting. So let's just do that now.
[01:01:55,040] I'm going to go inside of DRPC and I'm going to create server.tsx. And I'm going to paste this here. And
[01:02:02,000] you can immediately delete this part. So this is just an example. If your router is on a separate server, not case for
[01:02:08,000] us. So we can remove this. So you can see it's much simpler. Now again, we have all of this either installed or
[01:02:14,960] already created. Great. So now that we have that, uh
[01:02:20,240] let's go ahead and just fix this little super JSON uh issue here that I'm
[01:02:25,359] having. So I'm using super JSON in client.dsx.
[01:02:32,720] I'm using it in queryclient.ds. And I think I should also be using it in
[01:02:37,760] init.ds. You can see that I have it commented out here. So let's enable this and let's
[01:02:44,640] import super JSON from super JSON. This basically helps with serialization when
[01:02:50,559] it comes to passing specific props from server to client components with complex
[01:02:55,680] objects, right? Like well object, array, date, things like that. Super.json helps
[01:03:00,960] sparse those things. Uh great. So we now created server.dsx.
[01:03:07,280] And this is actually a very very uh interesting file and I'm going to try
[01:03:12,559] and do my best to explain why. So that is basically it for the setup. We are now ready to use this API. So let's go
[01:03:20,480] ahead and let's do that. In here I think they've added the most complicated example. So I'm going to try and use a
[01:03:26,960] more familiar example first. Let's go inside of source app folder and let's go
[01:03:32,319] inside of page.tsx and let's try and do the following. Let's add TRPC
[01:03:39,599] using use TRPC from naturally client, right? That's our client.tsx
[01:03:46,559] component. This is where we import everything client related. So now we have access to TRPC. You can
[01:03:53,520] see that I can find my hello and I can go ahead and pass in the query options inside. I can find the greeting or the
[01:04:01,359] text and I can say hello. Right, this isn't doing anything now.
[01:04:08,400] I'm just showing you the API and how it works. So, let's just quickly go inside
[01:04:13,599] of our routers here so you can see this change in real time and so I can give you a little tip if it doesn't change
[01:04:19,760] for you. So, go inside of TRPC routers app and rename this from hello to, for
[01:04:25,440] example, create AI, something like that. You can see how immediately I've gotten
[01:04:31,599] an error here because that's how TR the RPC works. So instead of having to do localhost 3000 / AI slashcreate
[01:04:41,520] dash AI, right, which is most of the time a literal string, right? So it's
[01:04:47,280] very hard to u it's very easy to make mistakes, right? I can accidentally do this and this is now an invalid API
[01:04:53,760] route, but I wouldn't know until I see a 404 error. So what the RPC does is it
[01:04:59,280] enables full stack type safety from start to end. So if I accidentally make a mistake here, it immediately throws an
[01:05:06,799] error like this route doesn't exist. That's what the RPC is.
[01:05:12,400] And it is much easier to build your apps when you know that you can rely on your code rather than having to see it break
[01:05:19,280] in production and then go and fix it. Right? So if it works inside of your IDE, if there are no errors here, it
[01:05:26,319] will pretty much work everywhere. That's the power of having uh end to end type
[01:05:31,599] safety. And let's go ahead and change one more thing inside of this input here. This basically represents things
[01:05:38,000] you can send to your API. So let's go ahead and imagine an API post request.
[01:05:44,319] Again, for example, this would be create AI. In here we would send something like body and then we would somehow you know
[01:05:51,359] stringify this with text hello right this is a stupid example right but you
[01:05:57,200] know what I mean uh this is also very easy to break but in here you can see that if I try sending a number here I'm
[01:06:04,720] getting an error why because we clearly defined this needs to be a string so if I change this to uh number now you can
[01:06:12,559] see that it works right but if I try string it will break So what happens if
[01:06:18,319] you are not being able to see the same result as me? Right? When I hover over text, I can see the text is a type of
[01:06:24,880] number. When I hover over create AI, I can see the input and text number and output is a greeting of string. Right?
[01:06:31,920] Exactly as I'm typing it here. If you are seeing type any for everything, you
[01:06:38,480] could be having a problem with your setup. So what you can do is you can go
[01:06:43,760] uh inside of extra information and go into frequently asked questions and here
[01:06:51,039] we have it. It doesn't work. I'm getting any everywhere. So there are a couple of
[01:06:56,400] things you can do. The first thing is you can check your tsconfig.json
[01:07:01,680] and in here make sure you have strict true enabled. The second thing is to
[01:07:06,960] make sure that you are using the proper TypeScript version and make sure your editor is using the same TypeScript
[01:07:12,720] version as package JSON. So for me, none of these things were ever an issue, but
[01:07:17,920] I did have this as an issue and this is what actually fixed my types. So go
[01:07:23,440] inside of your VS Code settings.json. Let me just go ahead and try and do
[01:07:30,480] this. So settings, let me Oh, I think that yeah, you can
[01:07:37,200] just create it if you want to. So go inside and create a VSS code like this
[01:07:43,760] and then settings.json and you can paste this inside and then
[01:07:49,280] you can click allow if this happens. And let me go back to page.tsx. So nothing
[01:07:54,799] changed for me because this worked from the start. But if you're having any problems, when I say any, I mean this
[01:08:02,000] you're getting the type any all over your project, it could be due to these
[01:08:07,440] missing settings. So this actually fixed my problem once. So that's why I am sharing it with you. And you can always
[01:08:13,200] do commandshiftp and then reload window and this kind of restarts the TypeScript
[01:08:18,719] server. So then it could work maybe. Great. So now let's actually see the
[01:08:24,480] result of this query. So make sure that you have your app
[01:08:29,600] running and that you can visit uh your root page. And first thing you should see is this very big error. Why? Because
[01:08:37,759] by default in Nex.js every page and component is a server component unless
[01:08:43,839] specified differently or if it is a direct child of a client component. So
[01:08:50,080] let's go ahead and add use client to the top. This will then turn it into a
[01:08:55,279] client component. And you can see we no longer have these errors. We can now use hooks as much as we want. So what I want
[01:09:00,960] to do now is show you how we actually get data from our API using a very
[01:09:06,000] familiar use query from the package 10stack react query. And in here you
[01:09:12,159] would usually create you know your own fetch method which would then call
[01:09:17,520] forward slash AI create AI and then you would pass in the body right and you
[01:09:24,080] would have the JSON stringify blah blah blah. What you can do now is the following. You can just use the TRPC
[01:09:30,239] oneRPC create AI and pass in the query options inside text and let's try Antonio here.
[01:09:38,480] Let's go back inside of Yeah, you can also commandclick here and it will take you directly to the router. So, I'm
[01:09:44,560] going to change this back to string. And then what we can do is simply render
[01:09:51,600] data. Let's just do JSON stringify data. There we go. And there we go. Greeting.
[01:09:59,120] Hello Antonio. If I change this to John, it will change to hello John. That's how
[01:10:06,800] we're going to fetch our data. This is our data access layer. Great. So, this
[01:10:12,000] is the most simple way of fetching data using a client component, right? Everyone knows this. But let's go ahead
[01:10:18,880] and cover two more examples which I think are important, right? So, we've kind of set up the RPC and we
[01:10:25,280] experimented with a client component. Now, let's experiment with a server component. And then finally, let's
[01:10:30,719] experiment with pre-fetching. And I'm going to try to explain what it is and why it is important.
[01:10:37,120] So basically server components have several advantages over client components. Uh they are not of course
[01:10:44,000] one is not a replacement of other. They work together. But server components have that advantage that they are well
[01:10:50,080] on a server which means server components have direct access to the database for example. But in our case
[01:10:56,080] what's important is that they render sooner than client components. Right? So
[01:11:02,400] what is currently happening is that our application has to wait for page.tsx to
[01:11:08,000] be rendered from the server and only then does it start fetching the data.
[01:11:14,560] But what if we could start fetching the data on the server and then continue
[01:11:21,360] using the data using this familiar API within a client component that is
[01:11:26,880] prefetching. But in order to understand pre-fetching, let's first remove use client like this and let's break our
[01:11:34,320] app. So immediately our app is broken, right? We can't use tRPC here at all.
[01:11:40,480] Right? So now what we have to do is we have to learn how to use TRPC inside of a server component. And let me just show
[01:11:46,480] you uh I'm going to try and do this. So if I add console log here
[01:11:52,480] and just remove these things and just refresh, I think that you should be seeing server component inside
[01:11:59,199] of your terminal. How come you're seeing it in the terminal? Because it is a server component, right? Because if I
[01:12:06,320] change this to use client now and change this to client component and refresh,
[01:12:13,600] I'm pretty sure we can still see it here. Yes, this is a bad example. My apologies. Previously in the past you
[01:12:20,080] could not see it if it was a client component. Uh so yeah ignore this. I tried to do an example but I used a
[01:12:27,840] wrong one. Let's just learn how to fetch data from a server component. So in here we actually have some guides. Let me
[01:12:35,840] just go back here. There we go. So uh in here getting data
[01:12:41,920] in a server component. So let's go ahead and simply create this little caller
[01:12:47,440] inside of our server.tsx. So go inside of tRPC server.tsx
[01:12:53,600] and at the end here export const caller call the app router create caller create
[01:12:59,440] trpc context right. So there is a way you could you know fetch data from a
[01:13:04,560] server component and that would be either you know directly calling the database like calling Prisma or there is
[01:13:13,600] nothing stopping you from fetching inside of a server component. So you could again do create AI and then the
[01:13:22,080] body blah blah blah right but that is unnecessary overhead because server component already has access to the
[01:13:29,679] database right no point in doing this that's why TRPC has invented something called a caller so what you can do now
[01:13:37,199] is let me just confirm the API you can import the caller so let's just do that
[01:13:42,640] so I'm going to do cons data and turn this into an asynchronous server component component and await caller
[01:13:49,920] from DRRPC server create AI and let me just see do I have to do it like this? I
[01:13:55,679] have to Antonio server and then I believe let me just check is
[01:14:02,320] it data like this? There we go. JSON stringified
[01:14:09,440] data. So this is how you would fetch from a server component using TRPC using a
[01:14:16,239] caller. So this isn't doing a network request on the server component. This is server component literally directly
[01:14:24,000] having a remote procedure access a remote procedure protocol to TRPC.
[01:14:29,440] That's why TRPC is so powerful because I think it's one of the only RPCs
[01:14:34,480] available that has these types of callers. I could be wrong, but it's the only one I've seen that performs this
[01:14:40,000] well. And this isn't so impressive right now, but if you've worked with server components before and you tried any kind
[01:14:46,480] of RPC here, you would almost always encounter an issue that you lose
[01:14:51,840] authorization headers, right? Uh the server component would never know if the user is logged in or not. TRPC solved
[01:14:59,679] that problem as well. That's why I love TRPC so much because it allows us to leverage server components. So now let's
[01:15:07,280] finally do the uh way we are going to use the RPC and that is using
[01:15:12,560] pre-fetching. So we would do things like this const query client would be get
[01:15:19,760] query client from gRPC server. We're not going to call the caller here but we
[01:15:25,760] will import tRPC from here. And then in here we're going to do void t uh
[01:15:31,520] queryclient dot prefetch query drpc create ai query options text
[01:15:41,360] Antonio and this time prefetch
[01:15:46,719] and then in here what we would do is we would add a hydration boundary from
[01:15:52,159] tanstack react query. We would pass the state to be dehydrate
[01:15:58,800] again imported from tanstack react query and pass in the query client. And then in here we would render a client
[01:16:07,120] component. So let's go ahead and create that client.tsx.
[01:16:13,600] This is not a reserved keyword. So this is just a component which needs use client at the top. And then in here what
[01:16:22,320] we would be able to do is the following. We can now get the data by using use
[01:16:27,840] suspense query from tanstack react query. And let's add
[01:16:34,080] our TRPC from the client and pass in TRPC create AI query options. And
[01:16:41,280] important, you need to have the exact same text here. Otherwise, the
[01:16:46,719] pre-fetching will fail because this would usually be some kind of filter. For example, instead of text, you would
[01:16:52,800] most likely have page one limit 10. So if you prefetch one thing and then
[01:16:58,880] expect to have something in suspense in the client component, it wouldn't work. That's why it is super important that
[01:17:05,520] your query options are exactly the same in your prefetch and in your client component. And then in here, you would
[01:17:12,800] be able to do JSON stringify data. And now let's go ahead and let's do
[01:17:18,719] this. So let's go inside of here. Let's import client from dot /client and let's wrap this
[01:17:26,320] inside of suspense from react and let's add a fallback here
[01:17:34,159] loading. So what's going on here?
[01:17:39,840] Basically instead of directly calling the data inside of a server component what we are
[01:17:46,800] doing is we are leveraging t uh we are leveraging tanstack queries cache and
[01:17:52,159] state and we are immediately populating it the moment server component gets
[01:17:58,080] created the moment server component loads because this will then allow the
[01:18:04,000] client component to load whenever it loads because we know a server component will load sooner than client component,
[01:18:10,719] but this time the client component won't have to wait until it gets loaded and
[01:18:16,400] only then initiate a network request. Instead, it will already have the data
[01:18:22,239] ready even though because we prefetched it inside of a server component. And
[01:18:28,800] it's very important to use a void here. And this prefetch query actually doesn't return anything. So even if you tried
[01:18:35,679] things like this, this wouldn't work. it doesn't return anything. They've done that on purpose so you don't uh so you
[01:18:43,600] don't actually use this data because pre-fetching query all it does is it
[01:18:48,640] initiates a call on a server component but only for the sole purpose of populating
[01:18:54,960] uh tanstack query which can then be accessed in a client component. So we are leveraging server component to start
[01:19:03,360] fetching our data immediately and then we are passing it down to the client
[01:19:09,199] component which uses a familiar API. So because this is use client, we can now
[01:19:14,480] go ahead and have a use effect here, right? We can go ahead and we can have a
[01:19:20,080] state here, right? We can do all of these things and it would work as fast
[01:19:26,239] as if we did the entire thing in a server component. So we don't lose the familiarity of client components and we
[01:19:33,840] also don't lose the speed of server components. We basically get the best of both worlds by doing this. And let's
[01:19:41,040] finally try it out. You can see it works just fine. I know this is still a bit
[01:19:46,480] confusing. I try to explain it the best I can. I would highly suggest, you know, reading about prefetching and just going
[01:19:53,280] through uh this documentation in the first place. Perhaps Dave explained it a
[01:19:59,360] bit better, but this is how I like to explain it. Basically, we are now getting the best of both worlds. both
[01:20:05,840] the speed of server components and the familiarity of client components
[01:20:12,480] and I think that this officially uh marks the end of this chapter right so
[01:20:17,920] let's just remove these things because we don't need them and what we're going to start doing in the next chapter is
[01:20:23,440] finally initializing our uh background jobs and start introducing some
[01:20:29,679] background actions we now have our database we have our OM and we have our data access layer. So those are the
[01:20:36,560] three things that we need so we can start saving uh some data in our database properly. Right? So let's go
[01:20:43,920] ahead now and mark this as completed. We did all of these things and let's go
[01:20:49,840] ahead and branch out now. So I'm going to go ahead and go down here and create
[01:20:54,880] a new branch. I'm going to call this 03 DRPC setup. I'm going to go inside of my
[01:21:02,320] source control here and I'm going to stage all changes and then I'm going to
[01:21:08,480] add 03 TRPC setup comment and I'm going to commit and then I'm going to uh
[01:21:16,239] publish the branch. Then let's go ahead to our GitHub to
[01:21:21,600] open a pull request. So in here compare and pull request and
[01:21:28,960] let's create a pull request. And as you can see I have something that
[01:21:36,400] you probably don't in your pull request and that is an AI code review using code
[01:21:44,080] rabbit. As you can see not only do I have a complete summary of this pull
[01:21:50,000] request. As you can see, we introduced TRRPC integration for type safe API calls between client and the server and
[01:21:57,280] we also added some chores. Not only that, but I have a change file by file
[01:22:02,960] summary so you can see exactly what I did in each file. And I also have a
[01:22:08,400] sequence diagram explaining exactly how every single component works in which
[01:22:15,040] order and how it responds with data and result, which is especially useful if
[01:22:21,199] this is your first time working with the RPC and Tanstack query.
[01:22:26,400] And I also have some potential issues it caught. For example, we added this dummy
[01:22:33,679] TRPC context from the documentation. Right? So, it noticed that and it told
[01:22:39,120] me that I should replace this hard-coded user ID with proper authentication. In
[01:22:44,480] this exact case, it is okay for us to proceed because this is just uh our
[01:22:50,159] initial TRPC code. We will replace this later when we add authentication. But you can see how it already started
[01:22:56,719] noticing some potential issues in our code. And then it also told us to change
[01:23:02,320] this further on when we update this React context. So it actually
[01:23:07,679] understands our code very very indepth. If you're interested in having the exact
[01:23:13,920] same code review, you can use the link in the description or the link you can see on the screen and create a Code
[01:23:21,199] Rabbit account. But that is not all. So now I'm going to go ahead and merge this
[01:23:26,800] right here. Let's merge this pull request. I'm not going to delete my branch simply
[01:23:34,159] so I have access to it right here. So this was our previous chapter and now we have TRPC setup. And you can see that I
[01:23:41,679] got this popup in my Visual Studio Code as well asking if I want to start a
[01:23:46,960] review inside of my Visual Studio Code. So, since I just reviewed my code uh in
[01:23:53,040] a pull request, I'm going to click no. But I'm going to show you in a second what this is. So, before we proceed, go
[01:24:00,239] ahead and make sure you change back to your main branch. And then just click on
[01:24:05,760] this little button to synchronize the changes. And then when you click on a graph here,
[01:24:12,080] you should see our last one was a database commit. And then we merged that. And now we branched out for TRPC
[01:24:19,440] setup. and we merge that back inside. And what I suggest you install is Code
[01:24:26,400] Rabbit extension. So Code Rabbit is a completely free VS Code extension. You
[01:24:32,639] can go ahead inside of your extensions here, Code Rabbit, and install it. And
[01:24:38,159] if you don't want it connected to your pull requests, you can have complete
[01:24:43,760] free code reviews in your Visual Studio Code. All you need is an account with
[01:24:49,280] Code Rabbit. You can use the link you can see on the screen and you will get amazing pull request reviews, but also
[01:24:55,920] you will get completely free code reviews in your IDE. We're going to try
[01:25:00,960] that in the next chapter because we just reviewed our code in a pull request this time. So again, just confirm you are on
[01:25:07,760] your main branch and you have synchronized all changes. And that will allow us to continue to the next
[01:25:13,520] chapter. So let's go ahead and mark this as done. Amazing job. We now have the
[01:25:20,239] database access, our ORM, and our data access layer. We are finally ready to
[01:25:25,840] start doing some AI related things and background jobs. Amazing, amazing job. And see you in the next chapter.
[01:25:33,000] 
[01:25:34,320] In this chapter, we're going to learn all about background jobs. We're going to learn how to add them to an Nex.js GS
[01:25:40,800] application and we're going to learn what they are and why we need them. In
[01:25:46,239] order to understand that, let's first look at a normal example. Imagine a login form. You enter your email, your
[01:25:54,000] password, you click login, we send a network request, and we get an instant response. Success or fail. We've already
[01:26:01,679] seen this a million times. But now imagine you have a more complex task at
[01:26:07,199] hand. Imagine you offered your user an ability to generate a summary of a very
[01:26:13,440] very long YouTube video. Imagine my videos for example, they are sometimes
[01:26:19,360] 12 24 hours long. So this time we send a network request.
[01:26:25,440] And in order for our backend to generate this summary, it can take well over 30
[01:26:31,360] seconds to do that because just imagine everything that needs to happen. We first have to download the YouTube
[01:26:37,600] video. Then we have to transcribe the video and only then can we send that to
[01:26:43,120] an AI model to generate the summary. So depending on the size of the video, depending on the AI model you will use
[01:26:49,600] and depending on your overall infrastructure, it can take well over 30 seconds for that to finish. And if you
[01:26:56,960] have a task that's running for so long within a normal network request like this one, you know, something completely
[01:27:03,920] normal, you risk your user never getting the result. So the problem is not that
[01:27:10,000] the user has to wait. The problem is this network request can time out, the
[01:27:16,080] user can accidentally close the tab, or the user can lose their connection. If
[01:27:21,199] any of these things happen, the user will never get the result back and we have to start the entire process again.
[01:27:27,920] That's why we have something called background jobs. So let's imagine this again. The user clicks generate summary.
[01:27:34,880] This time we send a network request again, but instead of using our backend to generate the summary, we use our
[01:27:41,920] backend to invoke a background job. And the moment we've done that, we are
[01:27:47,760] finished with our network request, which means that we immediately return back to the user and say the summary is being
[01:27:54,880] generated and the user can now close the tab, they can go for a run, they can do whatever they want. What's actually
[01:28:02,320] happening is that the moment we invoke a background job, the background job now
[01:28:07,679] runs in a separate environment independent of the user's session,
[01:28:12,719] independent of the user's connection, right? And we can simply notify the user when we are done. This is the structure
[01:28:20,080] you have to understand if you want to build AI apps because depending on the model you will use and the complexity of
[01:28:26,719] the app you will build most of your tasks will be longunning tasks.
[01:28:32,880] We will achieve this in our project using ingest. So let's go ahead and
[01:28:38,080] create our first function and let's trigger a background job from nextjs.
[01:28:44,159] You can use the link you can see on the screen or the link in the description to let them know you came from this video.
[01:28:50,960] And once you're here, you can immediately go inside of the documentation, select NextJS,
[01:28:57,440] and select app router here. And then let's go ahead and install inest.
[01:29:03,760] Before you do that, just make sure that you are on your main branch. And you can click synchronize changes just to
[01:29:10,320] confirm uh you didn't have any unsaved changes here. You can see my last
[01:29:15,360] chapter was TRPC setup and yours should be as well. So I'm going to shut down my
[01:29:21,520] app now and I'm going to do npm install injust.
[01:29:27,760] And now that I have this installed, let me quickly show you my package JSON so you can see the version that I'm using.
[01:29:35,760] Once you have installed Injust, the second step is to run the Ingest developer server.
[01:29:43,440] The version that I will be using is 1.8.0.
[01:29:48,960] But you can see that in here they simply target the latest version. So when you
[01:29:54,320] see me now doing this npx inest- cli at latest, the latest is equivalent to
[01:30:02,960] 1.8.0. zero just in case you were interested in my exact version. So, npx inest- cli at
[01:30:13,040] latest or a specific version and then dev. And when I start this, you can see
[01:30:18,320] that it says injustdev server is online at localhost 8288.
[01:30:23,840] And if I visit the project here, well, you can see that not much is going on here. It is a developer server, but
[01:30:30,800] nothing is here for us to do. So what we have to do now is we also have to have
[01:30:36,960] our app running. So let's do mpm rundev. And in here you will start to see
[01:30:43,040] something. You will start to see a bunch of 404 pages here. That is because the
[01:30:48,719] ingest developer server is trying to find our inest initialization in our
[01:30:54,480] project. But since we haven't done that, we just have a bunch of 404s. So let's go ahead and continue with the
[01:31:00,880] documentation here. I'm going to go ahead and create an ingest folder and then put a client.ts
[01:31:08,960] inside with this simple code snippet. So let me go ahead here inside of source
[01:31:16,320] and I will create a new folder called inest and I will create client.ts
[01:31:22,639] and I will paste this inside. I'm going to call this vibe project or vibe
[01:31:28,639] development something like that. basically the name of your project here and once you've
[01:31:34,880] done that you should oh actually not yet sorry so this is the first step and then
[01:31:41,360] we come to the second step which is creating an API endpoint for ingest so
[01:31:46,639] you can copy this snippet as well and go inside of app API create a new folder
[01:31:52,400] ingest and inside go ahead and create route ts
[01:31:58,880] and paste this inside and you and replace this with an add sign and a forward slash. There we go. It's
[01:32:05,840] basically using this inest which we just created. And the moment you save this file, if you have named it correctly and
[01:32:12,320] put it in the API folder, you should go here and you will see that
[01:32:17,440] now you finally get 200 here because it finally found the ingest integration and
[01:32:23,760] now it will only try to hit that endpoint instead of all of these other ones.
[01:32:30,400] Great. But we still don't have anything useful in the developer server here. So
[01:32:35,920] let's go ahead now and let's continue by creating the first ingest function.
[01:32:42,080] So I'm going to go here inside of source ingest functions.ts and create a new function. So inside of
[01:32:50,239] ingest folder in the source, make sure you don't accidentally do this inside of API inest. So in here create functions.
[01:32:58,639] Whoops. Functions. DS
[01:33:03,760] import the client and a simple hello world in just create function. We give this an ID. We give this an event name.
[01:33:10,800] And we have a very simple step which waits for 1 second and it then returns a
[01:33:17,040] dynamic string which uses the data we can pass to this background job. So this
[01:33:22,080] is an example. So they show us how easy it is for us to pass some data to this background job. This would be for
[01:33:29,040] example a link to a YouTube video we want to summarize, right? That's what
[01:33:34,080] this data object would hold. For example, I think I have a typo in my
[01:33:39,120] functions here. So, let me just fix that. And then let's go inside of the app folder API inest route and inside of
[01:33:45,760] here, let's import hello world from that inest functions file. And now if you go
[01:33:53,280] back here you should be seeing uh your app here available auto detected. You can see
[01:34:00,080] everything is fine. It found it at API inest framework next.js and one function
[01:34:07,199] found hello world because we just added it here. So if I rename this to hello
[01:34:12,480] world 2, it immediately renames here as well. And now instead of these
[01:34:18,080] functions, let me just refresh. So, it's back to this name. I can now click invoke here. And you probably have empty
[01:34:24,960] data, but you can go ahead and add email and pass in I don't know it it can even
[01:34:30,320] just be the name. It doesn't matter. And click invoke function. And you will see how it went from ceued to running to
[01:34:37,040] completed. So that's the status that just happened. It happened very quickly because uh there wasn't no no no one
[01:34:44,960] there was no function before this. So the queue to running went very fast and the running only took 1 second because
[01:34:51,760] we only wait for 1 second. For example, let's now increase this to 10 seconds
[01:34:58,960] and save the file. And let's go inside of our functions invoke and let's click
[01:35:04,320] this again. You can see how now it keeps running. It's running for 5 seconds, 7
[01:35:12,080] seconds, and finally after 10 seconds, it's finished. Is this getting familiar
[01:35:18,800] to what we just discussed? This is a background job. The only problem so far
[01:35:25,600] is that we are not invoking this function from our network request. We are manually clicking on invoke here.
[01:35:32,639] How do we invoke this from in our case TRPC procedure? Let's go ahead and let's
[01:35:38,719] do that. So I'm going to go inside of source trpc
[01:35:44,560] routers_app and in here I'm going to call this invoke. This will be base procedure and
[01:35:52,639] let's add an input here z.object and let's pass in the text to be z dot
[01:36:00,400] string like this. And then instead of dotquery, let's add dot mutation. This
[01:36:07,679] time it's going to be asynchronous here. Let's extract input from here
[01:36:15,360] like this. And this time what we're going to do is await inest from injust
[01:36:21,760] client. The name of the function
[01:36:28,080] you can find here. This is the name of the function you will run. So pass that here and then you pass in
[01:36:36,400] the data and the data can be anything you want but we know that we accept email here. Uh so let's go ahead and
[01:36:43,760] pass email to be input.ext because we defined it as text here. And
[01:36:50,880] this is how you invoke a background job from TRPC. So now let's go ahead and
[01:36:56,719] actually use this invoke method. I'm going to go inside of source at folder
[01:37:02,400] and I'm going to go inside of page.tsx here and uh well we already have this
[01:37:10,880] set up but since we are not going to need it I'm going to delete it for now. I'm going to delete this client.tsx.
[01:37:17,840] I'm going to go back inside of the page here and I will simply return a div here
[01:37:23,440] test and I will remove everything from here. We only use this to learn about
[01:37:29,840] the RPC. So let's mark this as use client. So this becomes a client component. The use client is very
[01:37:36,400] important for our demonstration here. So please do it. Now when you refresh on your local host 3000, you should just
[01:37:42,719] see a test here. So now let's go ahead and let's create a padding for maximum
[01:37:48,320] width 7 XL MX auto. And in here let's
[01:37:53,440] add a button component. invoke background job.
[01:38:01,040] And there we go. We now have a button to invoke a background job. So let's go
[01:38:06,320] ahead and add TRPC here. Use TRPC
[01:38:12,080] and let's add invoke from use mutation from tanstack react query. Pass in
[01:38:19,119] tRPC.invoke and pass in the mutation options here.
[01:38:26,320] And then in here on click call invoke
[01:38:32,080] and call mutate and pass in the text to be test or John
[01:38:41,119] something like that. So what I want to demonstrate to you now
[01:38:46,400] is how quickly this background job uh lasts in comparison to the network
[01:38:52,560] request. So, I'm going to go ahead and open my developer console here. I'm going to go inside of the network tab
[01:38:59,440] and I will click invoke background job and let me just see did I even do
[01:39:05,600] anything now or not because I I'm definitely expecting to
[01:39:10,639] see something here but it is not uh happening.
[01:39:17,119] Let me refresh the page.
[01:39:22,400] All right. So my website froze. So what I did was I simply shut down my app and
[01:39:29,119] I did npm rundev again. So I'm hoping to try it out again. This time
[01:39:36,000] successfully. There we go. Now when I click on invoke a background job, you can see how
[01:39:42,400] quickly this finished. Let's just see. 468 milliseconds. That's how long this
[01:39:50,000] network request took. But we know that the actual background job took 10
[01:39:56,400] seconds. So that is what we wanted to achieve. If I go inside of the RPC
[01:40:02,320] invoke again uh and inside of the ingest and go inside of the functions, let's
[01:40:07,840] change this to 30 seconds and add a comment here. You know, imagine this is
[01:40:13,600] a u download step right here. In here we are downloading a video. Then in here,
[01:40:20,480] imagine this is a transcript step. Another 10 seconds. And
[01:40:26,159] then finally, you know, imagine this is a summary step. And this finally then
[01:40:33,520] takes 5 seconds. This is what we want to achieve, right? The moment we click on
[01:40:40,400] generate summary, we send a network request. We trigger a background job and
[01:40:45,520] we immediately allow the user to close the tab. Right? So let's try it again.
[01:40:50,960] Uh in order if you want to you can also do this. You can go inside of your layout
[01:40:56,880] in app folder and you can add a toaster
[01:41:01,920] from components UI soner like this. I just like to order the
[01:41:08,639] components like so. And now once you've added the toaster you can go inside of the page here go inside of mutation
[01:41:15,679] options and add on success here. And you can add toast from soner.su
[01:41:22,159] success background job started.
[01:41:29,199] And now you will see the following. If your app gets stuck, you can go ahead and just do mpm rundev again. Uh I did
[01:41:36,800] get this happen a few times and I think I solved it when I removed the turbo pack, but we'll see. Basically, if your
[01:41:43,760] app hangs on loading, don't worry. You can just uh restart it. it will not happen in the actual app. So let's try
[01:41:50,159] this now. Uh we can also do disabled here and let's do invoke is
[01:41:57,679] pending like that and we can also go inside of
[01:42:04,719] invoke function here. the RPC invoke and after a wait let's return
[01:42:11,840] okay success like this so now if you click invoke
[01:42:19,920] background job you can see this is it the request is finished right the user
[01:42:25,440] can now close their tab and what's happening is in the background right we
[01:42:31,280] are now doing the first step which would be 30 seconds of downloading a YouTube
[01:42:38,080] video. After that, we're going to go ahead onto the second step, right? Which
[01:42:44,639] would be transcribing a video. So, let's see. After 30 seconds here is finished,
[01:42:50,639] we go to the second step. And this step will last for 10 seconds because we just
[01:42:57,280] wait for transcription to happen. And then finally, we have a third step. And
[01:43:03,760] in here we would do the AI summarization. And that's it. Hello John
[01:43:09,840] or this would actually be the summarization. Right? So that is how background jobs work. And that's how you
[01:43:16,480] add them uh in a Nex.js environment. Right? And it doesn't matter if the user
[01:43:22,320] lost their internet connection. It doesn't matter if they're closed the tab because the moment they invoke a
[01:43:28,159] background job, the background job has started. they can lose their internet connection. Obviously in development
[01:43:34,639] mode if you lose the internet connection your dev server would fail. So yes in development technically you need you
[01:43:42,080] cannot really shut down your laptop but in production it will run on a separate
[01:43:47,360] server in a separate environment right and from this inest developer server you can easily cancel things if you don't
[01:43:54,080] want to you can rerun them uh you can go ahead and look at the payload that was added you can do a bunch of things here
[01:44:01,280] uh and one cool thing about ingest steps is this will later be of course more
[01:44:06,719] complex things than just sleeping for 30 or 10 seconds. This will be API calls, database requests and if they fail, it
[01:44:14,800] is crucial to well retry them and that is what inest does automatically for
[01:44:20,880] you. Uh they actually have a cool example on their landing page here. They
[01:44:25,920] have uh and yes they have agent kit. This is something I didn't want to talk about immediately because I don't want
[01:44:32,159] to confuse you, right? So uh alongside background jobs, we're going to use injust to build autonomous agents,
[01:44:38,639] right? So AI and background jobs go hand in hand and Injust is the platform to do
[01:44:45,119] both of that. But I first want to introduce it through background jobs because it's easier to understand,
[01:44:50,639] right? And in here they have three very cool examples. So this is the transcription example. You can see that
[01:44:57,760] uh they have a step called transcribe video. So it's very similar to step.slip, slip, but instead it is
[01:45:03,920] step.run and they call it transcribe video and in here they simply return a deepgram SDK
[01:45:11,679] with a function to transcribe a video URL and once this steps finishes they
[01:45:17,520] call an LLM chat GPT uh GPT4 to create a
[01:45:22,639] summary. So exactly what we did. So this would be the two steps right this would be the first one you know transcribe the
[01:45:29,199] video and then the second one summarize the video right I just use a download
[01:45:34,400] step as well so looks like we don't need a download step right so this is what you can use in just for the second one
[01:45:40,960] is to build AI with automatic retries cach caching and improved observability
[01:45:47,520] right so it's way more powerful than I can showcase in this short chapter
[01:45:53,440] that's why We will have more chapters later on to build the actual agent networks, agent router, and agent tools,
[01:46:01,360] right? And of course, you can do sleep, which right now seems only for fun, but
[01:46:06,719] sleep can be very useful. For example, you can send a welcome email to a user, then wait a week, and then send a
[01:46:13,440] follow-up email. So, yes, that's how long these tasks can wait. They are
[01:46:18,880] background tasks. Uh, perfect. Yes. And for development, you don't need any
[01:46:24,080] account yet. But later uh for production, for deployment, we're going to have to create an account with
[01:46:30,080] ingest. But for development, there's going to be no need for that as well. And I think that's great because we can
[01:46:35,440] get started right away just by running this. Perfect. So I think that was the
[01:46:41,119] goal of this chapter. I think we achieved this exact thing right here. So
[01:46:48,080] we set up inest. Let me just change the color. So we've set up inest. We created
[01:46:53,920] the first function. We explored the ingest developer server and we triggered a background job from Nex.js. Now let's
[01:47:01,280] go ahead and branch out and push this to GitHub. So let me see this chapter name. This is 04 background jobs. So I'm going
[01:47:10,400] to go ahead and click here. You can see that I have 10 unsaved files. And I also
[01:47:16,159] have this little database in the inest folder. If you're wondering what that is, I'm just guessing it's cache for the
[01:47:21,679] inest developer server. And now I'm going to go and click on the main here. I will click create new
[01:47:28,560] branch and I will do 04 background jobs.
[01:47:34,400] After I've done that, I'm going to stage all of my changes and I'm going to create a commit message
[01:47:42,000] and I'm going to click commit. And then you can see that code rabbit extension
[01:47:47,520] if you remember from the previous chapter uh you can install this a completely free AI code extension which
[01:47:54,800] allows you to review all of those files. So let's go ahead and review all of
[01:48:00,159] these files and while this is doing its own thing which is most likely a
[01:48:05,280] background job on its own. So you can see uh you can see background jobs every day right? You probably just didn't know
[01:48:12,080] they were called background jobs. While that is going on, let's go ahead and
[01:48:17,199] let's create a new pull request inside of our repository here. So, let me go inside of pull requests here. Uh, new
[01:48:24,639] pull request. Uh, oh, looks like it won't push until
[01:48:30,000] uh this reviews. So, I'm going to go ahead and review first.
[01:48:35,440] Actually, it will. I just have to click publish branch. Yes, I forgot to click that. So, make sure you click publish
[01:48:41,199] branch. And you can see that this is still doing its own thing in the background. And I think now that we have
[01:48:46,400] a new branch. There we go. I forgot to do that. My apologies. So, now we're going to have two uh AI reviews here.
[01:48:53,520] One is going to be from here and the other one is going to be from here. And you can see how cool it is that it can
[01:49:00,960] add comments on my code locally here in my
[01:49:06,400] There we You can see fox fix duplicate step ID. So it noticed that all of my steps are called wait a moment uh which
[01:49:14,080] is very you know not useful uh when you were reading inside of the ines
[01:49:19,679] developer server. So it already detected that for example. So you can see how cool it is and it also fixes some wrong
[01:49:28,400] things here. Payload mismatch with ingest function. This is of course not
[01:49:33,440] something that uh we need to fix right now simply because this is a demo. But
[01:49:38,639] it is very useful. As you can see, it detects pretty much everything. So if
[01:49:44,560] you don't want it here in your pull requests, you can have it here in your
[01:49:49,600] uh IDE. And here we have our pull request
[01:49:56,000] summary which is pretty much identical as you can see uh to the reextension for
[01:50:04,239] Visual Studio Code. You're going to see in here we have fix duplicate step ids
[01:50:09,679] and you can see that here at the bottom I have the exact same issue here. So you
[01:50:15,119] can choose which one do you like more. Do you like your pull request reviewed or do you want to submit clean pull
[01:50:22,560] requests by having this run before you push a pull request? So in here I'm
[01:50:29,840] going to read through the pull request simply because we have the summary here. So we introduced an API endpoint to
[01:50:36,400] handle background jobs using inest. We added a button on the main page to
[01:50:41,440] trigger a background job with real-time toast notification on success. We use
[01:50:46,719] this to visually measure how quickly the network request is finished in uh comparison to how long the background
[01:50:53,520] job actually lasts. Right? And this is what I like the most. I like the sequence diagram because it is exactly
[01:51:01,520] what we discussed in the beginning of the chapter. So the user clicks on
[01:51:06,880] invoke a background job. We send the invoke mutation with the text and then
[01:51:12,719] our TRPC router which is our network request simply sends the event with that
[01:51:20,080] data. This can basically read as invoke a background job and the moment we do
[01:51:27,199] that we can send back the user. Okay, success. So this part right here is
[01:51:35,679] identical to what I wanted to achieve here. The user clicks, we send the
[01:51:41,599] network request, we forward the data to a background job, and we immediately respond to the user so they can close
[01:51:48,320] the tab and move on. And the fun thing about this background jobs is the way
[01:51:55,520] Code Rabbit just reviewed my 10 files here is by using a background job. They
[01:52:01,440] definitely didn't have a network request which went on for 30 seconds. They had a
[01:52:07,199] background job which did this exact thing. So I went through this potential
[01:52:14,080] changes. They are all very correct. But since this was just a demonstration, it
[01:52:19,280] makes no sense to fix them right now because we will remove the whole page entirely uh in the first place. Right?
[01:52:26,719] So we are good to go with merging this pull request right here. I'm not going
[01:52:33,040] to delete my branch simply so I can go back to this part whenever I want. Uh
[01:52:39,920] and let's go ahead now right here. Let me close this. Let's go
[01:52:47,119] back to our main branch. Let's click this and let's synchronize our changes.
[01:52:53,440] And after that, I'm going to click no on this. I'm going to go inside of my
[01:52:58,960] source control on the graph. And you can see that I have 04 background jobs now
[01:53:05,119] merged right here. And you can see that I'm on the main branch. And I should have access to my inest folder here,
[01:53:12,480] which basically means we fixed all these things. Perfect. I'm also not going to
[01:53:18,400] do uh anything regarding this code rabbit uh comments here simply because all of this was just a demonstration.
[01:53:26,320] Amazing amazing job. Let's go ahead and mark this as complete now
[01:53:32,080] and see you in the next chapter when we are going to extend the use of our background jobs with AI. Amazing amazing
[01:53:39,599] job. In this chapter, working to implement AI
[01:53:41,000] 
[01:53:45,360] background jobs. In order to do that, the first thing we're going to have to do is choose our AI provider. In here, I
[01:53:54,480] have added a list of all the options that we have and some comments for each
[01:53:59,760] of them. Starting with the best choice, which is Open AI. It is by far the most
[01:54:08,480] reliable, the most normal rate limit with a fast reset and a very very good
[01:54:16,080] coding model. This is the coding model that I have chosen GPT4.1
[01:54:22,080] and it is almost perfect. The absolute best coding model though is cloth
[01:54:30,400] specifically set 3.5 or 4. They are kings of coding models. The problem with
[01:54:38,880] anthropic is a very strict rate limit and when you hit the rate limit it will
[01:54:45,040] take you longer than 24 hours for that rate limit to reset. So it's it is just
[01:54:51,119] very very annoying to work with. If you want to, you can choose anthropic, but
[01:54:57,599] you will almost certainly hit a rate limit and you're going to have to either change the model or create a whole new
[01:55:04,480] organization and account. So, basically, Anthropic allocates their resources to
[01:55:11,199] uh higher paying customers, right? Which are this very very large companies. So, it's not exactly suitable for tutorials.
[01:55:18,800] As per Grock or XAI, I'm not sure. I haven't worked with it. It is on the
[01:55:24,880] list of the supported AI models, so I don't know. I won't recommend it and I
[01:55:30,560] won't tell you not to use it. I I'm not sure. And as for Gemini or Google, the
[01:55:36,480] great thing about Gemini is the amazing free tier. The biggest problem with it
[01:55:41,760] for our use case, it is just not good for calling tools. It will straight up be errors all around. So because of that
[01:55:49,679] at this moment I just don't recommend it. Uh I've heard that Grock AI has free
[01:55:55,920] tier. So I would rather you use Grock than Gemini. So unfortunately at this
[01:56:02,239] point I cannot recommend Gemini. It is okay for this simple chapter that we're
[01:56:09,280] going to do now, but later when we use AI for the thing we will actually need to use it for, it will simply not work.
[01:56:17,360] So if you really need a free tier, you can try and use Grock rather than Gemini.
[01:56:23,599] The absolute best choice and the choice that I will be using is Open AI, specifically this model. As I said,
[01:56:30,800] there is a chance we might hit the rate limit here, but the reset is around 2
[01:56:35,840] seconds, which is completely fair and it will happen rarely, only when we are doing some very very large uh tasks.
[01:56:44,159] With Enthropic we get the amazing results. It completely understands Nex.js ecosystem. It understands what
[01:56:50,719] chats and UI is. But once you hit a red rate limit and you will hit it very
[01:56:55,760] soon. It is almost impossible to get rid of. You will almost be stuck in a rate limit. So in my opinion, choose Open AI.
[01:57:05,840] It is the simple best solution for this project. If that is possible for you,
[01:57:11,360] you will have the best uh experience using Open AI. And now I'm going to show
[01:57:16,639] you uh how you can find if any changes have been made regarding this uh if
[01:57:23,199] you're watching this tutorial in the future. So you can use the link in the screen uh again or link in the
[01:57:29,040] description to visit ingest and in here go to the documentation and then go
[01:57:36,080] ahead and find agent kit and in here go ahead and click on this support for
[01:57:42,880] openai anthropic and gemini or click on the models here. So in here you will see
[01:57:50,560] all supported models as you can see open AAI anthropic Gemini and Grock as I said
[01:57:58,000] even though Gemini is supported here I just wasn't able to get it to work if
[01:58:03,280] you want to you can try but I wasn't able to get it to work. Anthropic worked
[01:58:09,360] amazingly, especially the 3.5ET versions, but the rate limits were very
[01:58:15,360] easily hit. The Open AI, I initially tried with 4.0 and I really was not
[01:58:21,440] satisfied with the results. It's not that good. But even though it's not on this list, you can try 4.1. So, that is
[01:58:28,800] confirmed. I tested it myself and it works no problem and it's amazing. Not
[01:58:34,320] as good as Enthropic 3.5, but very very good and very reasonable rate limits. So
[01:58:41,520] what we have to do next is we have to create our account in one of these providers. I'm going to show you what I
[01:58:48,080] do with OpenAI and then you can do whatever you want to choose here. In my
[01:58:54,000] case, I'm going to go ahead to platform.openai.com. You can use the link you can see on the
[01:58:59,040] screen or link in the description. Once you've created your account, you're going to go ahead into settings.
[01:59:06,719] Once you are in the settings, you're going to go into billing. In here, it is very important that you have a credit
[01:59:13,040] balance. So, maximum of $10, even less, will be enough for you to complete this
[01:59:19,520] tutorial many times, which will of course depend on how often you create uh
[01:59:25,199] new uh websites and uh apps with this project. but I barely spent that amount
[01:59:31,679] and I tested pretty heavily. Once you have uh filled your account, you can go
[01:59:37,119] ahead and obtain an AI key. If you're using Grock or Gemini, you have a free tier, but as I said, Gemini just doesn't
[01:59:44,320] work. Uh and Grock, I'm not sure. You can try. So, let's go ahead and let's create a new secret key. I'm going to
[01:59:51,199] call this Vibe development. I will use the default project and I will select all permissions and I will create the
[01:59:58,320] secret key. I will then copy this key and then what we have to do is we have to add that to our IDE I mean to our
[02:00:05,760] project. As always ensure that you're on your main branch and you can synchronize the changes just to make sure you're up
[02:00:12,880] to date. As you can see my last chapter was background jobs. So now what I'm going to go is I'm going to go inside of
[02:00:19,440] environment here and I'm going to create open AI here
[02:00:24,800] open AI API key and I will paste it inside like this. If you're using
[02:00:30,560] something else let me show you how to add that. So I'm going to go inside of the inest uh agent kit documentation
[02:00:37,679] here and here you have it environment variable used for each model provider. If you're using OpenAI, it is OpenAI API
[02:00:46,400] key. If you're using Anthropic, it's Enthropic API key. If you're using Gemini, it is Gemini API key. Or if
[02:00:53,520] you're using Grock, it is XAI API key. So, make sure that you've added one of
[02:00:59,119] those here. Perfect. Now that you have done that, let's go ahead and do the
[02:01:04,320] following. Uh, go inside of the agent kit by ingest and go inside of
[02:01:09,840] installation. and let's go ahead and install inest agent kit. So, I'm going
[02:01:15,679] to go ahead and install this and I'm going to show you the version.
[02:01:21,599] Once this has been installed, I'm just going to go inside of the package JSON and show you the version 0.8.3.
[02:01:29,040] That's the version I'm working with. Now, let's go ahead and let's use the
[02:01:34,560] agent kit. In order to do that, I just want to do the following. Let's go ahead and do npm rundev. And let's go inside
[02:01:41,599] of source app folder page.tsx. And in here, what I'm going to do is the
[02:01:48,400] following. I'm going to add a simple input from components UI input. And
[02:01:54,080] above this tpc methods, I will add value set value and a simple use state from
[02:02:00,480] react. Make sure you import that. I'm then going to give the input a value and
[02:02:05,840] on change a simple event calling set value and setting it to event target
[02:02:14,400] value. You've probably done this 100 times. And this will simply be uh it can
[02:02:21,599] stay invoke background job. It doesn't really matter. Great. So now let's go
[02:02:26,639] ahead and run npx inest cli latest dev.
[02:02:32,000] Simply so we have both our app and the dev server running. And now let's go ahead and do the following. Let's go
[02:02:39,599] inside of our inest functions here. And let's just remove this one. Leave this
[02:02:46,320] one for 5 seconds like this. And change this to
[02:02:53,520] um let's just say input. Let's call it that. And then I'm going to change this
[02:03:00,000] to be input as well. Actually I'm going to change it to be value. So we control
[02:03:06,000] it from this input here. I'm going to go instead of the invoke tRPC method. So it is inside of routers here. I will change
[02:03:13,040] this to be input. I will change the input to be input.
[02:03:18,560] Well, I just call that in a dumb way, didn't I? Why don't we just call it value? That would be better. Sorry. So
[02:03:26,719] let's go inside of invoke change this to value input dov valueue and call this value and then make sure to save this
[02:03:33,760] file go back inside of the functions and change this to hello event data value.
[02:03:40,239] So let me show you the changes again inside of the page we added use state and the input with value and set value.
[02:03:47,360] We then added a control to this input with those fields and we modified slightly the invoke.mmutate to pass in
[02:03:54,480] the value to be the value from the state. We then modified our TRPC router
[02:04:00,480] to accept value in the Z object and we've accepted we changed uh the ingests
[02:04:06,159] send to pass in value in the data object and of course we modify the function to
[02:04:12,400] read dot value and we removed an extra waiting step.
[02:04:18,800] So now that you've done this let's go ahead and let's run our app on localhost 3000 and let's open our uh development
[02:04:26,400] server here. So now I'm going to call this uh test value and I will click
[02:04:31,679] invoke background job and then in here in the running uh text I should see
[02:04:37,520] value test value here and in finalization hello test value. So exactly what we pass here. Perfect.
[02:04:44,320] That's a very good setup. Now that we have agent kit installed let's go ahead and do the following. in the inest
[02:04:51,360] documentation which is outside of the engine agent kit you can find a very very simple example by going inside uh
[02:04:59,280] let me just find inest functions step and workflows AI interference here and
[02:05:06,560] in here where they show you agent kit for the first time uh they show you this
[02:05:12,000] very very simple uh way of doing it so this is what we're going to do I'm going
[02:05:17,440] to add the following import. So let's now go inside of inest functions here
[02:05:25,599] and I'm going to add this agent agentic open AI as open AI and
[02:05:33,599] create agent from inest agent kit and then I'm going to go ahead and open
[02:05:41,199] this function. It's already opened, right? So basically I'm going to now write inside of here. You can leave this
[02:05:46,560] hello world. This can be unchanged. Let's create a new agent like this.
[02:05:53,040] So let me just show you this. And you can remove this.
[02:05:58,159] It is directly open AI, right? And you can remove the step here as
[02:06:05,040] well. So instead of writer, let's call this summarizer.
[02:06:11,920] The name will be summarizer. You are an expert summarizer.
[02:06:18,719] You summarize in two words. So something very obvious,
[02:06:26,320] right? A very easy task. You can give it a model GPT40 if you're using Open AI.
[02:06:32,400] And let me just remove the things I don't need for now. Let me remove the step from here since I don't need it. So
[02:06:39,119] in here we open a summarizer agent like this. And since I'm using open AI, these
[02:06:46,159] are the models that I can use. One of them is CH GPT40. If you import
[02:06:52,320] anthropic from here, you can see that then you're going to
[02:06:58,079] have to choose one of these models. So just pick the one you like. And same is true for XAI or Gemini, whatever you
[02:07:04,480] ended up using. So now we have to find a way to invoke this summarizer with event
[02:07:10,639] data value. And since you saw when I copied this
[02:07:17,199] import, I had to fix the invalid OpenAI import because I've copied it from here,
[02:07:24,000] right? So it would be best if you follow the instructions for agent kit on the
[02:07:29,760] actual agent kit documentation. Again, you can find it right here under agent
[02:07:36,320] kit. I simply used this one because I thought it was a very similar example to what we discussed in the previous
[02:07:41,679] chapter with the summarizer, right? But I think it would be better for you to follow the agent kit documentation here
[02:07:48,159] because this is the one that is kept up to date constantly. So please follow this one. So you can again go inside of
[02:07:53,520] the agents here and you can find this exact thing we just did. We created an agent. We called it summarizer and we
[02:08:00,800] gave it uh a system prompt and then we gave it a model. So we did that
[02:08:06,239] correctly. Now what we have to do is we have to run it. So let's go ahead and do
[02:08:11,599] that right here. I'm going to go ahead and add this summarizer
[02:08:17,440] summarizer.run like this. And let's go ahead and learn
[02:08:22,800] what to type here. So I'm going to go ahead and add summarize the following
[02:08:30,719] text and I'm going to open back. So I can insert
[02:08:36,719] event data value like this. And now let's go ahead and add a weight here.
[02:08:45,040] And now we have access to the output here. Uh so let me just see. I'm not sure if I know the API by default, but
[02:08:52,719] let me try output first in the array. Is it uh like that? I'm not exactly
[02:08:59,440] sure. Let's try and let's just say success. Okay, here. And let's rely on the
[02:09:06,320] console log. Or perhaps we can just return out the whole output like this.
[02:09:11,599] Maybe this would be easier to work with. So we just created a very simple summarizer agent which is an expert
[02:09:18,159] summarizer and can summarize in two words. We imported open AAI and create agent from inest agent kit new package
[02:09:25,040] that we have installed. We specified a GPT40 model. Another hint here uh I mean
[02:09:32,639] just I'm basically just repeating what we previously went over. make sure that your environment variables are properly
[02:09:39,920] set because as you can see we did not define the API and variable here. So it
[02:09:45,040] will search for it itself. So the name is very important. But if you want to name it differently for whatever reason
[02:09:52,239] you can do that and I think that inside you can pass the API key and then you can call this you know API key if you
[02:09:59,119] want to or if it's not managing to find your environment variable for whatever
[02:10:04,960] reason. Let's try this out now. So, I'm going to go ahead um and honestly, I don't know
[02:10:13,040] how this will perform. So, I'm going to call this I am Antonio and I am a
[02:10:18,639] developer. Let's go ahead and try and doing that.
[02:10:24,560] So, in here, as you can see, it immediately finished and you can see the step was called summarizer and you can
[02:10:31,599] see the content inside. So the content is you are an expert summarizer. You
[02:10:37,520] summarize in two words. And then we passed in the role user summarize the following text. I am Antonio and I am a
[02:10:44,800] developer. And in here I think we can already see the output. And there we go. The output was Antonio developer. And if
[02:10:52,880] you actually look at the finalization step, I think that is exactly what you will find. So output.content is Antonio
[02:11:00,719] developer. Amazing. So, we officially created our first AI background job.
[02:11:09,440] So, now just for fun, let's try and change it up just a little bit. How
[02:11:15,119] about we change the system prompt here? Actually, let's change the name of the agent to code agent. And let's call this
[02:11:22,719] code agent and call code agent.run. And now we're going to say you are an
[02:11:29,280] expert Nex.js developer. And let's go ahead and just say
[02:11:34,880] something like you write readable maintainable
[02:11:40,880] code. And let's go ahead and also answer you
[02:11:46,719] write simple Nex.js snippets
[02:11:52,960] like button component Nex.js and React
[02:12:00,079] snippets. Okay, let's just do that and then write the following snippet like this.
[02:12:08,960] So, this is still called hello world. That's perfectly fine. We don't have to change anything else. But let's just see
[02:12:15,520] what we've achieved now. For example, I'm going to say uh create a button
[02:12:22,320] component. I'm going to click invoke background job. And you can see this is a bit
[02:12:28,400] longer running task. And let's see what it created. I'm not really sure what the output would be here, but here we have
[02:12:34,719] it. Here's a simple and reusable button component using Nex.js. And you can see
[02:12:39,840] how it actually writes code. import react const button with props on click
[02:12:45,760] children type button class name. And it returns JSX button on click. It has
[02:12:52,079] class names. It uses tailwind. It added a class name prop. It has children in the button. export the default of the
[02:12:59,119] button. So basically a fully working button. So we are you can say halfway
[02:13:06,320] there, right? We just made AI create a React component. So the next step that
[02:13:13,679] we have to learn is how to make it use tools and run this code snippet it just
[02:13:20,079] created inside a sandbox inside of a cloud environment that we can then show
[02:13:27,520] to the user as a result. So that's what our next chapter will be about and I
[02:13:34,000] think that in the this chapter we've done what we aimed to do. So let me just check this. We chose our AI provider and
[02:13:43,280] we've set up in justest agent kit and we even tried a very simple AI step. Right?
[02:13:50,320] So basically that's how you're going to write uh agent kit tools and we are then
[02:13:57,040] only going to extend it by introducing tools. One of the tool can be terminal
[02:14:04,159] usage. Another tool can be create files. A third tool will be read files, right?
[02:14:11,280] That's what we're going to do. And then we're going to explore networks and routers. So we can keep the uh agent in
[02:14:19,199] a execution loop. So it consist so it constantly creates new components until
[02:14:25,520] its task is finished. You saw that in the intro video of this tutorial. I had
[02:14:30,880] a lot of uh coding steps. That's by because it is in a execution loop until
[02:14:37,119] it completes its task. So that's what the tools will be used for. We're then
[02:14:42,960] going to have the state history a bunch of things and then finally we're going
[02:14:48,480] to have the finalization step where it will save to the database and it will uh
[02:14:54,719] save the URL of the sandbox so we can show that to the user. So in order to
[02:15:00,560] advance further and create these tools and things like that, we're going to have to establish our sandbox because
[02:15:07,360] without the sandbox, we can't work right. So that will be our next step for
[02:15:13,599] this chapter. Uh we did a very good job. We created a very simple interface here on the front end and we are now able to
[02:15:20,320] call AI background jobs and we are able to get some AI code right here. So later
[02:15:29,360] on when we actually connect this to a proper network the function will say
[02:15:34,719] coding agent right you're going to see it's very very cool amazing uh so now
[02:15:40,480] what we have to do is we have to uh open a new branch and push to GitHub so let's
[02:15:46,000] go ahead and open 05 AI jobs branch I'm going to go here and as you can see six
[02:15:53,520] files changed one of them was the ingest database upgrade which is Again, I'm
[02:15:58,719] guessing some cache for the ingest developer server. So, in here, I'm going to create a new branch and I'm going to
[02:16:05,520] call it 05 AI jobs. I'm going to stage
[02:16:10,880] all changes here. 05 AI jobs. And I'm going to go ahead and click commit. And
[02:16:17,679] then I'm going to publish the branch. And if you want to, you can press yes.
[02:16:24,159] And then this code rabbit uh free code rabbit extension will analyze all of these files. Or if you prefer, you can
[02:16:32,160] go to uh where we are now going to open our pull request. And in here we're
[02:16:38,080] going to have that very same review. And here we have the code rabbit
[02:16:45,760] summary. So we added an input field allowing users to submit custom prompts for code generation. So you can see how
[02:16:52,800] it connected all of those separate entities of ours from the front- end input to the TRPC invocation of a
[02:17:00,240] background job to the actual content of a background job. And we now generate code snippets dynamically using an AI
[02:17:07,120] agent specialized in Nex.js development. So in here we can see step by step we
[02:17:13,840] can see the sequence diagram as always. You can see how it now features the new agent kit right here.
[02:17:20,960] And in here we have some potential issues. So you can see how it cares about our TRPC value because we are uh
[02:17:29,599] lacking any kind of validation. We're not even requiring a minimum length. So obviously it is telling us that that's
[02:17:36,240] something we should add of course and we will later on. We're going to change our form schema entirely. So you don't have
[02:17:42,479] to worry about that. Right now it's just for demonstration purposes. In here it's recommending using
[02:17:49,120] constants instead of hardcoded strings and that is exactly something we will
[02:17:54,559] do. So later on I have prepared very very large system prompts which I have
[02:18:00,479] tested on which gave me the best results. So I will share them with you
[02:18:05,519] and then you will paste them in your app and you will be able to use them as constants.
[02:18:11,200] And in here it again suggests some sanit sanitization and uh some other limits on
[02:18:19,200] the front end. Uh my apologies in the background job. I thought that this was the submit function. It is not. We will
[02:18:25,760] take care of that as well. Uh and yeah, no need to do anything else
[02:18:31,840] here because this will not look like this. We are going to modify it quite
[02:18:37,519] heavily in the next few chapters when we introduce the actual agent network.
[02:18:43,200] Great. So I'm going to go ahead and merge this pull request. So 05 AI jobs.
[02:18:49,200] I'm not going to delete the branch simply so I have everything here. And then I'm going to go inside of my IDE
[02:18:55,519] here and I'm going to go back inside of my main branch and I'm going to synchronize the changes like this. So
[02:19:02,719] everything is now up to date. I'm going to select no for uh this trigger of the code rabbit extension this time simply
[02:19:09,679] because this is a merge which we just reviewed. Right. I'm going to open the graph here just for a sanity check to
[02:19:15,440] confirm that my last changes were 05 AI jobs and they are great. So that marks
[02:19:22,080] the end of this chapter and in the next chapter we're going to learn how to create uh online sandbox cloud sandboxes
[02:19:31,200] which run Nex.js JS applications which in the following chapters will be something our agents will work on and
[02:19:38,719] create new components and run terminal commands into. Amazing job and see you
[02:19:44,080] in the next chapter. In this chapter we are going to explore
[02:19:46,000] 
[02:19:49,840] E2B sandboxes. This will be the environments where our AI will generate
[02:19:56,080] files and create a working Nex.js application. In this chapter, our
[02:20:02,399] specific goal is to create an E2B account, learn how to use their command
[02:20:07,439] line interface, and create a Docker file template for our Next.js project, and
[02:20:13,760] then push that template to E2B. And then we're going to preview that Nex.js
[02:20:20,399] application inside a sandbox. So, we're not going to make AI create any new
[02:20:27,600] files and run any terminal commands right now. The goal for this chapter is
[02:20:33,359] to learn more about the sandboxes, how they work, and basically to create a
[02:20:38,640] template that we are going to use moving on to uh create working Nex.js
[02:20:45,680] applications. So, we're going to start by creating an E2B account. You can use
[02:20:51,439] the link in the description or the link you can see on the screen to let them know you came from this video. As you
[02:20:57,920] can see, uh in short, E2B allows you to run AI generated code securely in your
[02:21:05,280] application. It's an opensource runtime for executing AI generated code in
[02:21:10,880] secure cloud sandboxes. It is made for Agentic and AI use cases. And some of
[02:21:17,680] the uh uh some of their customers are Perplexity, Hugging Face, Manus, and
[02:21:24,720] even Grock. So these are very very big names in AI here. And my experience with
[02:21:31,920] E2B was nothing short of amazing, right? So they are built for AI use cases. So
[02:21:41,760] for exact thing that we are building here, it is generative UI. This is pretty much the thing that we will be
[02:21:47,600] building here. But they have an even deeper use case which I highly invite
[02:21:53,280] you to explore yourself. So let's go ahead and create an account
[02:21:58,640] and let's go in the dashboard. After you create an account, you will
[02:22:03,760] probably be redirected to your sandboxes which looks like this. And at the moment
[02:22:10,560] you will probably have zero sandboxes running. If you head into templates, you
[02:22:16,560] will probably have less templates than I do. You might have three. I have five
[02:22:21,920] templates because well, I explored E2B while I was developing this project. You
[02:22:27,200] can see that I have this code with Antonio Nex.js thing. You don't have this. So, I have this because I tested
[02:22:34,399] it. Same thing with this no-name template, right? You probably have desktop code interpreter and base. I
[02:22:42,399] assume that's the things you have. You probably don't have these two. So, no worries about that. And I just want to
[02:22:49,200] show you uh inside of your budget, you should see your credits. So, you should have $100,
[02:22:56,479] uh, free for your new account. And as you can see, I tested E2B pretty
[02:23:02,640] thoroughly. So, I I really really tested it all day, every day, and I barely
[02:23:08,479] spent $9. So it is quite well optimized for tutorial making. So ensure that you
[02:23:17,120] have that in your budget. Make sure that you have the credits. Uh and now let's
[02:23:22,160] go ahead inside of the documentation here. And specifically let's go in the
[02:23:28,319] CLI installation. So you can use brew or you can use npm.
[02:23:33,920] I used npm here. And once you do that, you should be able, my apologies for
[02:23:40,800] this, you should be able to run E2B, right? And you should see a bunch of
[02:23:46,800] options on how you can run it and you can shut down your app, right? So basically E2B should become available
[02:23:52,960] after you install uh either via npm or using brew. So what we have to do next
[02:24:00,160] is we have to authenticate, right? So E2B O login uh should
[02:24:07,200] open up. You can see that I am already logged in. So uh in here I get that
[02:24:12,479] message. But you should get a not you probably won't get this message. Instead
[02:24:17,600] you will get redirected to E2B page and from there you're going to have to uh
[02:24:22,960] approve the login and then you'll be good to go. So once you've logged in uh what I would
[02:24:30,000] suggest is try uh listing sandboxes or just try listing something just to
[02:24:37,200] confirm that you are logged in. So I have no running sandboxes. So this is my message. I believe that if I wasn't
[02:24:43,600] logged in I would get some kind of error here. Right? So just make sure that at least you get a message like this which
[02:24:50,080] means okay you're logged in but you have no running u you have no running
[02:24:55,680] sandboxes. Great. So now uh what we have to do is we have to learn how to add a
[02:25:02,960] new template because right now you can see that inside of our E2B here
[02:25:08,880] templates uh you probably have three of them as I said desktop code interpreter
[02:25:14,560] and base. But what you need is a NextJS template. Now they do have their own
[02:25:20,720] Next.js template which you can use but I don't want you to do that. I want you to learn how to create your own template.
[02:25:28,319] So for this we're going to have to go into the second uh step. So we've created CLI and we've connected to our
[02:25:35,120] account. Now we need to create a Docker file template. Now I have provided you
[02:25:41,280] with a GitHub repository with two files that we are going to need for this not
[02:25:46,720] because uh I don't want to write this with you but because we have to be very careful about writing these files right
[02:25:54,240] so this is what I suggest we do now as always ensure that you're on your main branch you can synchronize changes just
[02:26:00,880] in case and then go inside of your source source folder here my apologies
[02:26:06,000] outside of source folder so completely outside create a new folder called
[02:26:11,359] sandbox templates like this and inside create a new folder which we're going to
[02:26:17,120] call nextjs and then in here you are going to create
[02:26:22,560] e2b docker file like this you don't have to
[02:26:28,240] install any extensions at least I didn't use any for this now this docker file
[02:26:33,600] has the content that you can find in the public repository sorry that which you
[02:26:38,960] can access by using the link in the description or the link you can see on the screen and when you're in here you
[02:26:45,280] can access that file. So just go ahead and copy it entirely and paste it here. And now we're going to go ahead and uh
[02:26:52,319] explain what it does. So the first thing we do is we set the environment. In our case that's going to be node. After that
[02:26:59,600] we run a terminal command to install kernel. So we updated the system. We get
[02:27:05,600] the install method for curl and then well whatever else we need to do here.
[02:27:10,880] I'm not too familiar with configuring docker environments but basically in this part we configure curl. After that
[02:27:18,399] what we do here is we copy another important file a bash script compile
[02:27:25,200] page which we currently don't have. So let's create it. compile_page.sh.
[02:27:32,560] Make sure to not misspell this because we need it right here. And you can find
[02:27:38,319] the content in the same uh public repository here. I'm going to explain what this does as well. But for
[02:27:45,439] now, just make it like this. After we copy this compile page and we
[02:27:53,439] put it in the environment, right, in this docker environment, we run this
[02:27:59,520] command on it to make it executable. Then we change our directory to next.js
[02:28:05,439] app. And then inside of that next.js app, we run a command which you've
[02:28:10,960] already seen a couple of times. Create next app. So basically the same way we started this project, we are now
[02:28:18,000] creating a docker which is going to start the project the same way. The versions I'm using are 15.3.3
[02:28:25,200] with chat 2.6.3. The reason I'm using these versions is
[02:28:30,240] because when I started making this tutorial, uh those were the newest versions. You already know that now that
[02:28:36,800] I'm recording this tutorial, there are newer versions than this. So, if you want to, you can upgrade, but I'm going
[02:28:43,600] to stay with these versions for now simply because I know that they work for me. So, later on when we finish the
[02:28:50,960] project, you know, feel free to upgrade this to 7.0 and this to 7.0 zero and
[02:28:56,319] this to whatever is the newest version. But for now, I want to stick with these versions because they worked for me
[02:29:01,520] initially. Now let's explain these flags. So why do I add d- yes after npx
[02:29:07,760] and why do I add d- yes after create next app? The reason I'm doing that is
[02:29:14,080] because you have to remember these commands will be running in a container in a dockerized container which means no
[02:29:20,160] user will be able to interact with them. Remember when we started our Nex.js application, we had a bunch of
[02:29:25,840] questions. Do you want to use tailwind? Do you want to use slint? Do you want to use this that so because of that uh I
[02:29:33,120] have to uh just agree to all of those things so the terminal doesn't hang
[02:29:39,280] right? So it doesn't block it can keep moving forward because if it blocks it
[02:29:45,359] will not work. That's why we have to add both d- yes in front of npx and in front
[02:29:51,760] of our command because npx might ask you to upgrade right so we will also agree
[02:29:58,800] to that right whatever you ask me I agree to and same is true for running chaten in it and for adding all shatzen
[02:30:07,840] components and then what we do is the following we move the content of that new folder
[02:30:14,720] nextjs app where we just added Nex.js and all of its components and we move
[02:30:20,560] that entire content into home user directory and then we remove the old
[02:30:25,600] folder. The reason we do that is simply because it is easier for AI to
[02:30:30,880] understand that the the place where it's located because initially it will be loaded here. We just tell it wherever
[02:30:38,479] you are this is where you have the next.js application. You don't have to go to any other directory. Trust me,
[02:30:44,880] that is much easier for nextj for an AI to understand because otherwise it will
[02:30:50,000] hallucinate things. This way it's just easier to work with. So you might be wondering why did we then even open a
[02:30:56,960] new folder if we're just going to bring all the stuff back here? Because if you
[02:31:02,319] try to initialize this command, the dot basically means in this folder. If you
[02:31:08,560] try to do that inside of home user, it would fail because in order to initialize a next app, it needs to be an
[02:31:14,800] empty folder and home user has some hidden files, right? So it's never
[02:31:20,000] really empty. That's why we needed to do this trick. So that is basically our docker file. Now let's explain the
[02:31:27,280] compile page. So the compile page is a little trick that we are going to use to
[02:31:32,960] ensure that the next.js JS application is running and that the root page is compiled. So basically in here we have a
[02:31:40,080] function called ping server which uses curl which we install right here and we are attempting to ping localhost 3000
[02:31:49,520] and we are doing an iteration of 20 uh I'm not sure not too familiar with the
[02:31:55,280] bash shell language to tell you if this is seconds milliseconds I'm not sure but basically it's more than enough time for
[02:32:02,080] the server to start. So it gives it 20 attempts, right, to try and get a 200
[02:32:08,880] response. And once it does, it simply uh uh marks it as done. And then it runs
[02:32:16,800] that method ping server and it goes inside of home user where we just said
[02:32:22,560] that we create this project and it runs npx nextdev-
[02:32:28,000] turboac. So the turbo pack is uh really cool here because it speeds up the uh the start of
[02:32:35,920] the dev server. So it's actually very useful in this case. Great. So once you have these two
[02:32:42,160] things, the second part is very important and that is that you set up
[02:32:48,800] Docker inside of your project. So here I am on the Docker landing page.
[02:32:56,560] You can use the link you can see on the screen to let them know you came from this video. Uh, and basically the way I
[02:33:02,640] set up Docker in my project is by downloading Docker Desktop. I use a
[02:33:08,080] MacBook, so I download it for Apple Silicon. If you use Windows, you choose your architecture here. Or if you use
[02:33:14,399] Linux, uh, well, you probably know what you're doing then. So, after you've done that, make sure that you have Docker uh,
[02:33:22,560] installed. So, in here, let me just try and open it back here. Uh since if I go inside of uh
[02:33:30,399] let me just try and find the documentation here. Docker desktop. Let's go into overview. And in here
[02:33:38,000] somewhere we should have setup install. And in here, there we go.
[02:33:44,479] So in here we have some deeper documentation here. Uh on on Mac and on Linux it's pretty straightforward,
[02:33:50,560] right? If you install it uh with a DMG, it will add it to the terminal uh as
[02:33:56,399] well. But if you don't, here's how you can add it from terminal as well. Also, if you want to, you can use orb stack.
[02:34:03,600] That's a Docker alternative. All right. But the reason I kind of don't know how
[02:34:09,040] to explain how to install Docker is because I don't know if I'm talking to a person who has a Windows, who has Linux,
[02:34:14,960] or who has Mac OS, right? So that's why I'm kind of don't want to give you too much information and I don't want to
[02:34:20,479] tell you something incorrectly but basically try to research yourself you
[02:34:25,600] know uh what you are using right so try and install that and your goal is
[02:34:33,520] basically to be able to have docker available
[02:34:39,040] right that's kind of the goal you should not get an error in docker
[02:34:45,680] and on windows In here, you can see pretty similar instructions. Uh I'm not
[02:34:51,040] too sure what this means. I don't use Windows. Uh but in here, I think it is
[02:34:56,240] important for you to be able uh to run Docker from the command line as well. Uh
[02:35:04,479] but at minimum, you should be able you you need to install the Docker desktop
[02:35:10,000] package and you should be able to start that application at minimum. That's the minimum thing that I expect, right? So
[02:35:18,000] now I'm going to go ahead and start my Docker application. Actually, the first thing I'm going to do is I'm going to
[02:35:24,240] try without Docker started simply so uh we can test if uh if the command fails.
[02:35:32,479] So I want to show you what happens if the command fails first. So let's go ahead inside of SDK reference CLI
[02:35:40,640] template and let's do template build. So in here we have E2B template build
[02:35:46,160] command. And the way we're going to do this is the following. Go inside of sandbox templates and go inside of
[02:35:52,800] next.js like this. So I'm going to try and run B2B template
[02:36:00,640] build here and I'm going to give this a name and I'm going to call it vibe next.js test. So that will be the first
[02:36:08,319] thing I'm going to try. So in here you can see how uh it found the E2B docker
[02:36:14,000] file and it requested build for the sandbox template ID with this name login
[02:36:20,720] succeeded and then it attempted to run docker build and then it failed. Right?
[02:36:26,319] So this is the error you will see if your docker is not running. So now I'm
[02:36:32,479] going to start docker for me very simply I'm just going to open the application docker and then in here uh I will have
[02:36:40,880] docker desktop available. You can see docker desktop is now running. So uh
[02:36:46,560] let's see if that will be enough for me to run this and try it. So let me see.
[02:36:52,479] E2B template build. Let's see this time. And there we go. So all I had to do was
[02:36:59,200] install Docker Desktop and I need to make sure that I have Docker Desktop
[02:37:04,479] running. That's the important thing for me. So you can actually stop this now
[02:37:09,680] because it will take some time to build but it's not going to work correctly. I just wanted to show you how it looks
[02:37:15,680] like when your Docker is not running. Basically this is the error you will get. So just make sure you have Docker
[02:37:21,120] running. You don't even have to create any image on Docker or nothing. We are doing that now. Right? So just make sure
[02:37:28,240] you have Docker installed on your system and make sure you open whatever application you installed. It can be
[02:37:34,399] Orbstack, it can be Docker Desktop, right? Uh I'm not sure if you need it inside of here, right? As I'm I I keep
[02:37:41,680] saying that because I don't know what machine you're on. I have it inside of my terminal as well. I'm not sure if
[02:37:47,760] that matters, right? Because you can see that in here it does run the Docker
[02:37:53,359] command. So it probably does matter the fact that I have it inside of my
[02:37:59,040] terminal. So uh make sure that you have Docker CLI installed as well. If you
[02:38:04,160] don't, you might even see a different error showing here. Great. But once you
[02:38:09,280] get to this part, once you get to the fact that after Docker build is being fired, you start seeing these kinds of
[02:38:15,840] messages, right? Something resolving, something transferring, it means the Docker is working. And then you can
[02:38:22,240] cancel it using command C or control C. Uh and then we're going to run a proper
[02:38:29,840] command with a proper uh start command. So now in here, here's what we have to
[02:38:36,880] do this. Basically uh we have to add
[02:38:42,800] E2B template build-ame vibe next.js js
[02:38:50,160] test two dash cmd and you have to add
[02:38:55,920] compiled_page.sh. [Music] So now uh let's go ahead and run this
[02:39:04,080] again. So I'm just going to wait to see this succeed. There we go. And now I'm
[02:39:09,520] going to pause until this part completes because it is a little bit long. you
[02:39:14,960] know it needs to upgra it needs to upload the entire Nex.js project there with all the packages and everything and
[02:39:21,840] it needs to you know install curl and all of that. So I will pause until some
[02:39:26,960] interesting things show here so you can compare with your process as well.
[02:39:33,120] So here's an interesting part. Uh it is running npx create next app and you can
[02:39:38,240] see my result typescript types node types react tailwind CSS. So it is
[02:39:43,439] obviously successfully installing this with no questions asked. That's why
[02:39:48,800] these parts were so important because if we didn't include this uh it would be blocked by waiting for the user input,
[02:39:56,080] right? That's why that is important. It was also successful in copying
[02:40:03,760] compile page.sh. So we did this correctly as well.
[02:40:10,560] Now I am running chaten in it. I'm selecting neutral color. I'm forcing
[02:40:16,319] everything to install here. Right? So I'm just making sure that I'm not adding any prompts. And there we go. It's
[02:40:22,319] succeeding. It uh checked the reg registry. It found app globals CSS. And
[02:40:28,080] now it's installing all dependencies. So so far so good.
[02:40:34,479] Now it is adding all components. You can see again very successful. It found
[02:40:40,479] global CSS. It is upgrading it and it is installing all of those radics packages
[02:40:45,600] which we use for our component. So it's we are basically doing the same setup we did for our project but this time inside
[02:40:52,399] of a docker container. Great. And now it has finished that
[02:40:58,399] part. And now it is moving the entire content from Nex.js app into home user
[02:41:03,439] and removing the old folder. Now this is this command actually failed for me a
[02:41:08,800] lot during the initial development of this project and the reason was actually because I was missing this d- yes
[02:41:16,240] commands. So if this part is successful for you as it is to me right now you
[02:41:21,680] have pretty much succeeded in doing this. So if this part fails for you it is almost certainly because uh you
[02:41:29,359] forgot to add d- yes to some of this. Basically, it's hanging on some command
[02:41:35,040] and it didn't create the Nex.js app. Uh, great. So, now what's happening, I think, you know, I'm I'm new to Docker
[02:41:42,479] as well. I've briefly experienced it before, but now what's happening is obviously pushing all of that data to
[02:41:49,120] the Docker container on the E2B app.
[02:41:54,399] And just to confirm, in case you're wondering, this part does take a while.
[02:42:01,840] After that part has completed, it is triggering the build. And here you can
[02:42:07,280] track the progress of the build itself. So this is more specifically a build of
[02:42:12,960] the docker image. We're not building the Nex.js app, right? Those are two different things. Our Nex.js uh app is
[02:42:20,399] just a development instance. We are building the Docker image here.
[02:42:27,439] All right. So mine uh failed. So I will uh it looks like it failed because
[02:42:35,280] it is missing the compiled_page.sh [Music] command not found. And that's definitely
[02:42:43,760] because of this. I should have uh done this differently. I have to find a way
[02:42:48,800] to execute this in a different way. Something like this. I will test it out
[02:42:54,479] so I know for sure and then I will tell you the correct command.
[02:43:00,800] So I think that the start command should be this forward slashcompilepage.sh.
[02:43:08,479] And let me just show you something. Uh regardless if this part fails or not. I
[02:43:13,600] mean depending on how I edit this video, perhaps I told you not to even run this command in advance, right? But you can
[02:43:20,240] see that I have something called e2b.tl generated in here. You can see my start
[02:43:26,000] command is compiled_page.sh. sh. So I have two ways of changing this now. I can either change it here or I
[02:43:33,920] can change it here. But you can see how it remembered all of these things. But for now basically this should be the
[02:43:41,200] working command. So I'm going to pause and try it again.
[02:43:47,760] And this time it worked. You can see that right here it is waiting for the template to be ready and then it is
[02:43:54,800] waiting for server to start a couple of times and then finally we can see next.js 15.3
[02:44:01,600] and that signals that it is done template is ready pausing sandbox
[02:44:06,800] template. So be very very careful here. During my initial development of this
[02:44:12,160] project, I was able to get to template is ready and pausing sandbox template
[02:44:17,439] and uploading template. But I actually never saw this part. Let me just go up
[02:44:22,720] here. It is very important that you can see this part in your terminal because this means that it's actually working.
[02:44:29,760] If you can't see this everywhere, even with this saying it's ready, it will
[02:44:36,399] actually not be working. So just make sure you did this correctly. And also on the second run, this runs much much
[02:44:42,560] faster because half of the I mean the entire project is already uploaded, right? So you won't have to wait that
[02:44:49,120] long. But basically, this was the final command E2B template build. And the cool
[02:44:54,479] thing now is that you actually get instructions on how to use this. You can see that you can use the name or you can
[02:45:01,439] use the ID. So I don't know what this actually tells us. Is the name unique or not? I think it might be unique per
[02:45:07,920] team. uh which then again you know uh depends if you're going to publish this
[02:45:14,080] or not. Uh what does publishing mean? Well, I'm going to explain in a second. But basically now you can go find your
[02:45:20,240] E2B.l file and in here you can see all the information team ID start command
[02:45:26,160] docker file template name template ID and from now on if you ever want to do
[02:45:31,520] any changes to here you can just do template build. That's it. And you can just modify whatever you want from here.
[02:45:38,240] want to change the name just change the name here and run template build. So right that the in the tommo file that's
[02:45:44,800] basically where the configuration is now. Uh great. So before we move on now
[02:45:49,840] let's go ahead inside of E2B inside of your project go inside of templates and refresh. And now if you have done this
[02:45:57,040] correctly you should see vibe next.js test dash2 right here. And you can see
[02:46:04,560] that this says private. So just to make things easier for now, I want you to do
[02:46:09,840] the following. I want you to copy the ID of vibe next.js test 2 and I want you to
[02:46:16,160] go and go to E2B template publish here.
[02:46:21,200] And let's go ahead and do the following. So actually we need the team ID. My apologies. So just go ahead and find I
[02:46:29,279] think it's inside of your team here. Find the team ID and copy it. And inside
[02:46:34,720] of here. So you are inside of this uh Nex.js template. So you can just do E2B
[02:46:39,920] template publish D and then paste the ID of the team and this will make the
[02:46:45,840] template public to everyone outside of your team. The reason you're doing this is simply because uh it will be easier
[02:46:51,600] to connect to it. At least that was my experience. Later on we can easily unpublish it or you can delete it. The
[02:46:58,560] reason this is kind of uh you know you should be wary of this. You should not share your uh template ID with anyone
[02:47:05,680] because I can use it and I can uh use your credits, right? I can spend your
[02:47:11,040] budget here. So, be careful. Make sure that only you know about this and later
[02:47:16,160] I will make sure to find a way to unpublish this so that only you and your team can use this. Great. So now what
[02:47:24,240] should happen is inside of your templates when you hit refresh and find that vibe nextjs test 2 it should say
[02:47:32,560] public under visibility and that basically means you did it. This is now working. So now what we have to do is
[02:47:40,560] the last part of this chapter. We did this we did this and we even did this.
[02:47:45,840] It's time to actually start this sandbox. Right. Let's see if that next.js JS app is actually working or
[02:47:53,279] not. And lucky for us, this is quite easy to do. So, what we're going to do
[02:47:58,479] now is we're going to go inside of source, inside of ingest, and inside of
[02:48:03,920] functions here. Uh, and I think I completely forgot, but yeah, we have to
[02:48:09,200] uh we have to install uh E2B. I think I forgot that entirely.
[02:48:15,680] So let's add E2B code interpreter to our project. And make sure you go in the
[02:48:21,600] root of your app like this. And I'm going to show you the version of this package now.
[02:48:27,920] So let's go inside of package.json quickly. So it is 1.5.1.
[02:48:34,000] That's my version. Now let's go inside of our functions here and let's import
[02:48:41,439] sandbox from E2B code interpreter package which we just installed. And then what we're going to do is the
[02:48:48,880] following. Let's go ahead and before we create an agent, let's do const sandbox
[02:48:54,080] ID await step.r run. And we can extract the step from here. We removed it in the
[02:49:00,240] previous chapter I believe. So step.run run get sandbox ID. That will be the
[02:49:05,279] first step we're going to run. And in here, we're going to attempt to
[02:49:10,399] get the sandbox by doing await sandbox.create.
[02:49:16,000] And inside of here, you will simply pass the template ID. So in your case, this will be vibe next.js test 2. Now, you
[02:49:25,120] will probably have a different name for this because I think if they allow public templates, there probably has to
[02:49:31,760] be some kind of originality here, I guess. So, once you've created that, go
[02:49:37,040] ahead and simply do await sandbox set timeout. Uh, actually, you don't have to
[02:49:42,640] change the timeout. I'm going to explain what the timeout is in a second, but for now, let's just do sandbox.box ID. So
[02:49:50,080] this will be the step which we are actually going to preserve here and keep throughout uh this entire project
[02:49:55,760] because we will always need the sandbox ID. And now that we have the sandbox ID,
[02:50:01,520] uh what we have to do is we have to create a sandbox URL. So after the agent
[02:50:07,680] finishes, let's pretend that this agent now actually connected to this sandbox and then added a bunch of files. Then
[02:50:14,640] what we would do is we would generate the sandbox URL using await step.r run
[02:50:20,240] get sandbox URL. In here we would get the sandbox again
[02:50:26,160] using await. And then in here uh we need to create a util called get sandbox. So
[02:50:33,600] let me just go ahead inside of the ingest and create utils. DS and export
[02:50:38,960] asynchronous function get sandbox which accepts sandbox ID which is a type
[02:50:44,880] of string. Let's get the sandbox using await
[02:50:50,319] sandbox from E2B code interpreter.connect sandbox id like this and then in here
[02:51:00,160] just return sandbox. So basically I'm writing a function to make this uh
[02:51:06,479] reusable. You're going to see why later. And also let's import this like so. So the structure now that you have get
[02:51:13,760] sandbox you can do await get sandbox here and pass in uh the sandbox id and
[02:51:20,240] then return sandbox.get host
[02:51:25,520] 3000. So, uh, basically what this is, it
[02:51:31,120] creates the host under the port 3000. Why 3000? Well, we know why. Because of
[02:51:37,520] our uh, sandbox template, right inside of here, we know it's running on port
[02:51:43,600] 3000. That's the only port it can run on. It's a Nex.js app. And this is
[02:51:48,800] actually only the host. So, let's do con host to be that. and then return open back
[02:51:57,200] https and then post like this and then in here
[02:52:05,840] sandbox URL like this. Are you ready to try this out now? Make sure you have
[02:52:12,240] imported the get sandbox right. So let's go ahead and do it. npm rundev in one
[02:52:18,160] npx ingest cli dev in the other. It is
[02:52:23,200] running perfect. Let's go to localhost 3000. Make sure you have your ines development server here. And I'm just
[02:52:29,920] going to do uh create a button component again. Why not?
[02:52:36,000] And let's go ahead and see what's going on here. Oh, so there we go. It is
[02:52:41,520] failing. So something uh you can see the error. Invalid API key. So we can cancel
[02:52:46,960] this run because I forgot to add the API key. Uh I'm constantly not reading this
[02:52:53,359] the way I should. So let me just go ahead uh and add click on API key here.
[02:53:00,800] Uh and we can find it at the dashboard. So let's go back inside of our dashboard here. Uh you can see I already have
[02:53:07,840] some. So I'm going to click create new key here. And you can find it here under API keys. So create new key vibe dev.
[02:53:15,840] And I'm going to click create key here. I'm going to copy that key. And let's go inside of environment here. E2B and
[02:53:24,640] let's add it. So it's going to be E2B
[02:53:30,240] API key like that. And if you add it like this,
[02:53:36,880] I don't think you have to explicitly add it anywhere because this is what it will be looking for. So, uh I'm not sure if I
[02:53:45,359] can find the documentation for this specifically, but I think that now it will be working.
[02:53:50,800] Let's try again. Invoke another background job. And let's see, do we get any errors or do we successfully get a
[02:54:00,080] running template? We're going to see get sandbox ID has succeeded. And now it's doing the coding agent thing. It's
[02:54:06,319] generating some code and now it's grabbing the sandbox URL. And in the finalization here, you should see the
[02:54:12,880] output of an AI who created a component and you should see an actual URL. Let's
[02:54:19,040] try and visit this URL. Fingers crossed. And we should now see a Nex.js
[02:54:25,359] application. And we are a completely empty Nex.js application hosted in E2B
[02:54:32,240] started from our background job. You are halfway there. you can already uh kind
[02:54:39,359] of tell what the next steps are. We are going to dive deeper into E2B sandbox
[02:54:46,000] API now and we're going to learn how to run terminal commands, how to create files, how to read files, basically how
[02:54:54,000] to translate what it's now doing here very simply as an output into actually
[02:55:00,160] modifying the code in this sandbox. Amazing, amazing job. I know this
[02:55:05,600] chapter wasn't too easy. a lot of new things, Docker, Docker files, all of those things. But if you've come this
[02:55:11,840] far, you did it. Amazing, amazing job. So, let's go ahead and mark this as
[02:55:17,600] complete. And yes, this uh will stop working after some time and that's
[02:55:23,279] completely normal. So, after about 5 minutes, I think by default, uh this link will show an error, right? So,
[02:55:30,000] that's normal. Don't worry, we can change the timeout later. So now let's go ahead uh and let's merge
[02:55:37,840] this. So I'm going to go ahead and I'm going to open my source control
[02:55:43,760] here. I'm going to go ahead and create a new branch 06 E2B sandbox. Let me just confirm
[02:55:51,600] that's my chapter name. So sandboxes. I'm going to go ahead and stage all of
[02:55:57,040] my changes including the Docker files of course. And I'm going to do 06 E2B
[02:56:05,600] sandboxes here. And I'm going to commit. And I'm going to publish my branch. Again, there is a free code rabbit
[02:56:12,800] extension you can use if you want to review your changes and learn about all the things you can do differently in
[02:56:19,040] your code. So if you want to, you can click review all changes. Or if you're like me and you like to see uh the
[02:56:27,040] summary and all other things, you can use their pull request function. So now I'm opening my new pull request here
[02:56:33,040] which I will merge. So let's go ahead and review it.
[02:56:38,399] And here we have the code summary. So what I'm very impressed with is how well
[02:56:43,760] Code Rabbit understands what we just did. So we introduced a sandbox environment for Nex.js allowing users to
[02:56:51,120] create and access isolated Nex.js instances. We added functionality to
[02:56:56,479] generate and return a unique URL for accessing sandbox next.js app. So quite
[02:57:02,960] impressive that it understood the entire context of this pull request with nothing more than files. Very very very
[02:57:10,479] nice. So in here we even have an entire sequence diagram demonstrating how that
[02:57:15,840] happens. So once the user triggers a hello world background job, we go ahead and create a new sandbox with our
[02:57:22,399] template name. After that, we return the sandbox ID and we have it for that session of that background job. We then
[02:57:29,439] use our new package E2B code interpreter to return a sandbox instance and from it
[02:57:34,479] we extract the sandbox URL. Amazing. And you can see how it even has some related
[02:57:41,600] pull requests. It detected where we initially added hello world. So if you were working in a team, if this was some
[02:57:48,080] big operation, you can now link pull requests automatically with this extension. Amazing. So in here, it has
[02:57:55,680] some potential issues regarding our TOML file, but that doesn't matter because this file is not generated by us in the
[02:58:02,560] first place. So it is okay for it to be like this. In here, it is suggesting improving the compile page shell script,
[02:58:10,399] which could be completely valid. I'm don't know bash. I'm I'm also mixing bash and shell. I'm not even sure what
[02:58:17,439] is the correct name. So for all I know, this could be completely correct.
[02:58:24,080] But since I want to be very careful about this part, you know, I'm not going
[02:58:29,760] to change it because I know it works, right? So good enough for me at the moment. Uh great. Uh so in here it
[02:58:38,240] recommends adding some try catch all of the things which we will add later but
[02:58:43,359] in a different syntax because we will implement the agent network and the agent retrying and it's going to work in
[02:58:48,960] a different way. It's going to be using tools. So overall pretty good summary pretty good review. Let's go ahead and
[02:58:54,880] merge this now. As always I'm not going to delete my branch simply so I have access to all of my progress here.
[02:59:02,640] Amazing amazing job. So, as always, go back to your IDE here and change to main
[02:59:08,160] branch and then click on synchronize changes. And as a final sanity check,
[02:59:13,840] you can go ahead inside of source control inside of graph and you will see 06 E2B sandboxes have just been merged.
[02:59:22,399] Amazing, amazing job. I believe that marks the end of this chapter and see you in the next chapter where we are
[02:59:28,880] going to learn how to make our AI use tools such as terminal to install some things and actually modify these
[02:59:36,319] sandboxes. Amazing amazing job.
[02:59:41,000] 
[02:59:41,600] In this chapter, we're going to add tools to our AI.
[02:59:46,960] The tools we are going to add are going to be the terminal tool which will allow the agent to run commands, create or
[02:59:54,720] update files tool, which as its name says will allow the agent to create or
[03:00:00,000] update any files within its environment. And finally, we're going to have read
[03:00:05,600] files, which will be able to read files. We are then going to add a completely
[03:00:10,960] new prompt for our agent. And we are then going to implement the agent network and the routers. So we are going
[03:00:19,520] to heavily rely on agent kit by ingest. You can use the link you can see on the
[03:00:24,960] screen or the link in the description to let them know you came from this video. So in here what we are going to do is we
[03:00:32,000] are going to uh add some tools. Tools are used to extend the functionality of
[03:00:37,439] agents for structured output or for performing tasks. So for example, they
[03:00:44,560] are used to call code enabling models to interact with systems like your own database or external APIs like B2B. So
[03:00:54,319] let's go ahead and let's create a very simple tool which will be allow our
[03:00:59,359] agent to interact with the terminal. So the first thing we're going to do is
[03:01:05,200] ensure we're on the main branch and we are going to synchronize our changes and just confirm your last merge was E2B
[03:01:11,920] sandboxes. After that let's go inside of source inest functions.
[03:01:19,040] Now in here we're going to do the following. After you create the coding
[03:01:24,160] agent uh go ahead and do the following. Right after your model, add tools.
[03:01:32,399] Open this array and let's create tool which you can import from ages uh a
[03:01:39,200] inest agent kit. In here, let's go ahead and give this tool a name. It will be called terminal.
[03:01:48,399] Add a description. Use the terminal to run commands
[03:01:54,960] and add the parameters which the AI will pass to this tool. It will be a very
[03:02:01,439] simple command which is a type of string. And after you have added the
[03:02:06,720] parameters and the handler method, extract the command from the first
[03:02:13,200] argument and extract the step from the second argument.
[03:02:19,439] In here you are going to return the step execution
[03:02:24,960] await step question markr run. The reason we need to use question mark is
[03:02:31,920] because step can be undefined. So let's go ahead and run a step called terminal.
[03:02:38,240] It's going to be an asynchronous method inside of this step. And the first thing we're going to do is we are going to
[03:02:44,560] create an object called buffers. Inside of here, we are going to set std
[03:02:51,439] out to be an empty string and std error to be an empty string as well. Now,
[03:02:58,560] let's open a try and catch method. Instead of the try, let's grab our uh
[03:03:04,479] let's get our sandbox here using await get sandbox
[03:03:10,160] and pass in the sandbox ID. Then let's grab the result of await
[03:03:16,800] sandboxcomands. And pass in the command. So we are
[03:03:23,279] reusing our get sandbox method from utils. I also imported zod. So make sure
[03:03:28,319] you add this as well. Uh and we are basically doing the same thing we're doing right here. We are
[03:03:35,279] establishing the connection with our sandbox using this simple util here. So we don't have to repeat this every time.
[03:03:42,319] And now what we are doing is we are running a command. So you can learn more about this uh by going inside of the E2B
[03:03:49,200] documentation and simply learning about the command. Let me see if I can find
[03:03:55,920] that here. Here we have the commands. So this is how you basically run commands in your environment. Perfect. So now
[03:04:03,920] let's go ahead uh and define some more settings here. So after we run the
[03:04:10,240] command, let's define on std out grab the data which is a type of string
[03:04:17,520] and for buffers std out simply
[03:04:22,640] add that data and the same thing on std error. So data is a type of string
[03:04:30,479] and in here simply add buffers std error
[03:04:36,000] plus equals data. So we are handling all of the results of running the terminal
[03:04:41,279] commands in this object. So we're going to know if the terminal command succeeds or if it fails. That's why it's
[03:04:47,359] important to keep track of the result. And then let's go ahead and let's return
[03:04:53,359] result std out. And then in the catch method, let's extract the error here.
[03:05:00,800] First, let's do console. Simply so we see this in the terminal. Open back. And
[03:05:06,800] you're going to say command failed render the error. And then you can use
[03:05:12,560] forward slashn to break into new line so it's more readable. std out will be
[03:05:18,640] buffers std out. And then go ahead and break line again.
[03:05:26,479] std error will be buffers std error. So that's going to be the console
[03:05:34,000] log. And then you're going to return the exact same thing.
[03:05:39,040] This will basically tell the agent what went wrong with additional information about std out and std error. So yes,
[03:05:47,840] just make sure that you don't accidentally type this incorrectly as it is important for AI to understand what's
[03:05:55,279] going on. And that is our first tool. Our agent now has the ability to use the
[03:06:02,240] terminal. It uses sandbox API for this and it will keep the results of this uh
[03:06:11,520] terminal execution. So either a success message or an error with detailed information about what happened because
[03:06:18,240] commands can fail and thanks to ingest they will automatically retry but now
[03:06:24,160] with the context of what happened. So if you're building nex.js with me for some
[03:06:29,600] time you know that sometimes when we install a package which doesn't support next uh react 19 it fails because we
[03:06:37,359] need to add d-leacy pure depths. So if that happens here it will first fail and
[03:06:44,000] then the AI will read the message and say oh okay I need to add d- legacy peer
[03:06:50,479] demps and ingest will automatically retry the terminal step with that new
[03:06:56,240] information and then it will succeed. So that's how powerful injest background jobs are and now they're amazing inest
[03:07:04,640] uh agent kit. So now that we have finished uh the
[03:07:11,359] terminal tool, let's go ahead and create a new tool.
[03:07:18,160] This one will be called create or update files.
[03:07:24,640] The description will be and let me just see. I think I'm doing something. Yes, I'm doing something incorrect here.
[03:07:33,120] I think it needs to be here and add a comma here. There we go. So yes, so just make sure you're doing it at the end of
[03:07:40,800] this create tool bracket right here. The description will be create or update
[03:07:47,439] files in the sandbox. Let's go ahead and let's add the parameters. It's going to be an object
[03:07:54,720] of items and it will accept the files. files are going to be an array of
[03:08:01,120] objects and inside we're going to have path which is a type of string and content
[03:08:09,840] which is a type of string as well and it's going to be the only thing we
[03:08:16,160] will accept. So now we can build our handler method inside of this handler method. Let's go
[03:08:22,479] ahead and let's extract a few things. The first things will be the files
[03:08:28,080] and the second thing will be step and network.
[03:08:34,000] And now in here let's go ahead and let's get the new files by doing await step
[03:08:39,840] question mark run create or update files.
[03:08:45,359] Open the asynchronous method here. And let's go ahead and open a try and catch
[03:08:50,880] block. Let me just add catch here. There we go.
[03:08:56,399] Instead of try, let's create updated files by first looking at network.state.data.files
[03:09:05,920] or an empty array. Then let's get the sandbox here. Await
[03:09:11,760] get sandbox and pass in the sandbox ID. And now for const file of files
[03:09:21,279] await sandbox files write file.path
[03:09:27,359] file.content updated files file.path is now
[03:09:33,760] file.content. So basically when the agent gets access
[03:09:40,000] to create or update files tool, it will give us a structured input of files it
[03:09:46,720] just created. So imagine this first part which we already have. We've already
[03:09:52,080] seen it create a a few files I think. There we go. So here's a simple button component and then it just returns jsx.
[03:10:00,319] So now it will do exactly that but it will recognize the input this accepts uh
[03:10:06,720] accepts. So what it's going to do is it's going to return back an object.
[03:10:12,319] Let me try like this. It's going to return an object like this and it will have app psx
[03:10:20,240] and then in here it will be you know paragraph app page. This is how it's
[03:10:26,080] going to look like. And then the same thing for any new components. Right?
[03:10:31,520] This is what it's doing now. And then we're going to iterate over each of that and we're going to write that to the
[03:10:38,240] sandbox file explorer using files.right which is the similar API like sandbox
[03:10:44,640] commands. So that's how we know which file to write where. And then we just keep a
[03:10:51,279] track of updated files internally in our network state simply so we can later
[03:10:56,800] tell the user which files were changed because technically we could just ask it
[03:11:02,000] in the prompt hey you know when you finish also tell me which file you changed but you can't really rely on
[03:11:08,800] that because AI has a token limit it can only talk for so much but for this part
[03:11:14,960] you can rely on this right so each file it actually writes in the sandbox box in the file explorer. We are going to save
[03:11:22,240] it. We are going to keep track of it. And the reason we are choosing the format of an object rather than an array
[03:11:27,760] is because this way it is very easy to to overwrite any files if they change by invoking this step again because this
[03:11:34,800] step can be called 50 times for all we know. That's why we are choosing an object rather than an array. So we can
[03:11:42,479] just simply overwrite any path if it changes. And then let's go ahead and do return
[03:11:48,640] updated files. And then in the error here, let's return error and simply render the
[03:11:58,399] error. Perfect. And then uh outside of
[03:12:04,080] this if type of new files is equal to object
[03:12:11,279] network state data files will be new files.
[03:12:16,479] So why are we waiting for this to be an object? So the new files are basically the return of this step. This step can
[03:12:23,439] either be an object or it can be a string. So we are basically waiting for
[03:12:28,479] it to be an object and only then do we store it into our internal network state. Perfect. So that's another tool
[03:12:35,439] finished. Now let's go ahead and let's create another tool with a name read
[03:12:41,359] files. Now in here let's add a description read files from the sandbox.
[03:12:50,800] parameters Z dot object files Z dot array and Z dot string inside.
[03:12:58,560] Now let's go ahead and let's add a handler method again an asynchronous method
[03:13:04,080] and in here we are going to return await step and we just need to extract the
[03:13:11,680] step from here. So let's do that. First extract the files from here and then extract the step from the second step.
[03:13:18,640] Be mindful if you forget to do this. You won't get an error simply because we have a step defined elsewhere.
[03:13:26,160] We have it here. So be careful. You always have to extract the step from
[03:13:32,720] the tool because it holds different context. So step.run
[03:13:40,720] read files asynchronous. And in here open a try and catch block.
[03:13:48,560] In the try block, connect to the sandbox. Await get sandbox sandbox ID.
[03:13:57,920] In here, open the contents array. And for const file of files,
[03:14:05,200] push to that contents array. So const individual content is await sandbox
[03:14:11,600] files read file. So we read the file and then we simply push the path to be file
[03:14:21,120] and the content next to it. So in here it doesn't really matter how we store
[03:14:27,120] this data because this is not for us. This is for the AI if they if it needs
[03:14:33,760] to read data. So yeah let's just fix this path. So if we in our prompt
[03:14:40,239] instruct the the the AI agent to read before they do something, they're going
[03:14:46,239] to use this. Why would they need to read something? Well, so they don't hallucinate, right? So we tell it if you
[03:14:53,439] attempt to use a chat component, make sure to read inside of the components
[03:14:58,560] folder. So then it's going to use this tool to attempt to read a file. And if it doesn't exist, it's going to say,
[03:15:04,880] "Oh, okay. then I need to create it or I need to use something else. It's basically not going to hallucinate or
[03:15:10,319] assume a tool exists. That's why this step is quite useful and also why we
[03:15:15,680] don't really care about the format too much because AI can read from various formats here. And if this fails, we
[03:15:22,399] return an error like this.
[03:15:28,000] And that is the last tool that we need. What we have to do next is we have to update our prompt and tell it that it
[03:15:35,920] can use these tools. I have prepared a prompt for you in my
[03:15:43,200] public GitHub of assets. You can use the link you can see on the screen or the link in the description to access it.
[03:15:49,120] Now be mindful of something. I am not a prompt engineer. I have no idea if this
[03:15:55,040] is a good prompt or a bad prompt. I have generated it using AI itself. So I
[03:16:01,680] assume it's okay. I have found it to work quite well for my use case. But you
[03:16:08,319] are free to modify it however you want it. I I started out very simple like it was almost just like one or two lines.
[03:16:15,520] And then I had to addit more and more and more instructions until it understood things very well. And I found
[03:16:22,640] this to be kind of a very very good uh at least starting point if nothing more.
[03:16:28,960] Right? But the cool thing about this project is your app can get twice as
[03:16:35,680] good just by adding a new model. So if OpenAI or Enthropic release a new model,
[03:16:43,279] all you have to do is use that new model and your app is suddenly twice as good.
[03:16:48,319] So that's the cool part about working with AI, right? So copy this prompt from
[03:16:53,439] my assets. Let's go inside of source and let's create prompt.ts and let's paste it here. So I'm going to slightly go
[03:17:00,239] over it just so you understand what I'm doing here. So you're a senior engineer working in a sandboxed Nex.js 15.3
[03:17:08,720] environment. Why that environment? Well, because that's what we define here.
[03:17:14,640] So I'm telling it exactly where it is running. And then I tell it some tools. You can write files with create or
[03:17:22,160] update files. You can execute commands via terminal. I also tell it to use d-
[03:17:27,680] yes simply because uh it's not a human. So it uh basically we we must not get it
[03:17:35,359] in a position where the terminal waits for human input. Then I tell it you can read files with read files. So those are
[03:17:42,160] the first three instructions that I give it. I then tell it you know some general rules. Don't install package JSON or log
[03:17:48,479] files directly. You can install packages but don't modify the these directly. I
[03:17:53,680] tell it the main file is in the app folder page.tsx. I tell it that all chats components are pre-installed and
[03:18:00,960] imported here. And then I tell it some general rules like you must never add use client to layout. This must always
[03:18:08,000] remain a server component. Uh I tell it to never create any CSS or SCSS files.
[03:18:14,000] styling must be done strictly with Tailwind and basically some rules like that. So you can of course tweak this if
[03:18:22,399] you think you you can modify it a little bit. Of course maybe I will modify it during this tutorial but basically it's
[03:18:29,600] just a bunch of rules that I have added after I experienced it fail. So after I saw that it does something incorrectly I
[03:18:36,239] added a new rule for that. And this is important the final output. So after it's fully completed, I instruct it to
[03:18:44,319] return this type of format task summary and inside uh a description of what it
[03:18:50,880] just did. So it needs to return with this and you're going to see why in a
[03:18:56,640] second. This is super important and this is why I'm very strict about it because this is the only way to terminate the
[03:19:03,279] task. If it omits or alters this section, the task will be considered incomplete and it will continue
[03:19:09,840] unnecessarily. So now that we have our new prompt, let's go inside of inest functions.ts
[03:19:17,439] and let's go ahead and change our code agent here and let's extract the open AI
[03:19:23,120] here a little bit. And now what we are going to do is we're going to change
[03:19:29,200] this model to be GPT4.1. Default parameters here will be
[03:19:34,399] temperature 0.1. Now if you're using uh something that is not open AI, this
[03:19:40,399] might not exist and that's completely okay. You don't have to modify this. What temperature means is randomness. So
[03:19:47,920] the larger the number here, the more random is something going to be. And when it comes to generative UI, I kind
[03:19:54,880] of want it to be deterministic and reliable rather than completely random. But I give it a little little little
[03:20:01,040] chance of randomness. So if you're using grock or anthropic, you don't have this
[03:20:06,640] probably. So that's that's that's completely okay, right? You can even do without this in open AI. And the reason
[03:20:13,680] I changed the model is because 4.1 is much much much better at generating UI
[03:20:19,439] than 40. And for Antropic, the better model is 3.5 set.
[03:20:26,239] For Grock or Gemini, I simply don't know. And as I said with Gemini, I have problems running these tools. You can
[03:20:32,960] try, but for me, I just got errors. So now, let's go ahead and modify the system here to use our prompt
[03:20:40,960] constant from at prompt, which we just added. So just make sure it's this one.
[03:20:46,560] Perfect. Now, let's go ahead and let's add a slight description here. An expert
[03:20:52,880] coding agent. There we go. So, I'm just going to bring
[03:21:00,160] back this temperature 0.1. If you're using Open AI, you can add this. So,
[03:21:06,239] both you and I will get similar results. I hope. Great. Now that we have these
[03:21:11,840] tools, we are still not ready to try them out just yet because what we have to do now is we have to add life cycle
[03:21:19,680] here. So after the array of tools ends, so make sure that you find where the
[03:21:26,000] tools end, right? Go to the bottom here.
[03:21:31,439] We're going to add life cycle. And in here, we're going to get on response.
[03:21:39,279] And from here, we're going to get the result and network. And now what we're going to do here is
[03:21:47,279] we are going to check if the last message that is in this cycle because
[03:21:52,319] this is a cycle right this is not going to be linear. It's not going to go uh
[03:21:58,479] using the terminal then create or update files and then read the files and we're
[03:22:03,680] done. No, it has access to all three tools equally and it will create its own
[03:22:10,000] plan. It might use them 50 times in a row. That's why in the prompt we tell it
[03:22:15,680] when you are finished when you know that you're done go ahead and return the task
[03:22:21,120] summary. So now in the life cycle we are going to uh extract the last message
[03:22:27,200] from the assistant and we are going to check if that message includes the task
[03:22:32,399] summary. If it does, we will break the cycle and then we can go ahead and do
[03:22:39,200] these steps where it actually shows to the user what it generated.
[03:22:44,720] So in order to implement that part, we have to go inside of utils here in the inest where we have get sandbox. Let's
[03:22:51,840] export function here last assistant text message content.
[03:22:59,359] It will accept a result which is a type of agent result from inest agent kit.
[03:23:06,399] Let's go ahead and do const last assistant text message index which will be
[03:23:13,680] resultput find the last index. Extract the message and we are going to
[03:23:20,720] find the index of a message whose role is assistant. So we know okay this is
[03:23:27,120] what assistant said last. Then let's extract the actual message content from
[03:23:32,560] that index. So result dot output last message index
[03:23:39,439] as a type of either text message again from ing inest agent
[03:23:46,800] kit or unde so it can even not exist. Right? And
[03:23:54,560] then let's return message question mark.content. And we're going to add a turnary below
[03:24:00,960] it. If type of message.content is string, we're going to simply render
[03:24:08,160] message.content. Otherwise, we will do message.content
[03:24:14,800] domap. Get the individual inner content and simply return that inner contents
[03:24:22,000] text. And then we're going to join it all in a single string. And then finish
[03:24:27,840] the outer turnary by adding or undefined here. Like that.
[03:24:34,000] Perfect. I'm going to pause the screen just so you can double check your code.
[03:24:39,359] Now let's go ahead here and let's use that inside of here. So I'm going to do
[03:24:45,600] const last assistant text. just this last assistant. Uh let's
[03:24:54,160] do message text and in here we're going to call our last
[03:25:00,319] assistant text message content which we can import from the utils and
[03:25:06,960] pass in the result like this. And let me just see if I did something
[03:25:13,120] incorrectly here. So uh life cycle on response
[03:25:18,560] uh I have to end this here. There we go. Perfect. And then we're going to check
[03:25:24,720] if last assistant message text and if we have network
[03:25:31,439] if last assistant message text doinccludes
[03:25:37,279] task summary
[03:25:43,520] add to the network state in the summary key last assistant message text like
[03:25:51,920] this and then outside of this outer if clause return result
[03:25:59,040] and let me just see what I did incorrectly here. So I think I have to end this
[03:26:05,520] maybe like that. Let me just try and fix this quickly.
[03:26:11,680] So let's see. I think I don't need this part. Do I need this? Okay, so that was the extra. Perfect.
[03:26:21,279] So basically what we're doing here is we're extracting last assistant message text using our util last assistant text
[03:26:28,319] message content which simply finds the index of the last message whose role was assistant and then if it is type of text
[03:26:35,520] message and if it's string it just returns that content. But there is obviously a special type of message
[03:26:41,279] where it can be an array of strings. So in that case we simply join that into a single string using a very simple
[03:26:47,359] method. And then once we parse that message, if we have network available
[03:26:54,880] and if we have last assistant message text and if that message includes task
[03:27:00,000] summary, which is our rule here, right, to return that if it's done, we store
[03:27:06,399] the network state data summary last assistant message text and we return the
[03:27:13,279] result. And what we will be able to do now is the following. Go below this entire coding agent and create a
[03:27:20,319] network. The network will be create network
[03:27:26,800] from inest agent kit like this. And in here
[03:27:33,760] go ahead and add the following. The name coding agent network
[03:27:40,720] agents will be our coding agent or whatever we called it. it we called it
[03:27:46,800] code agent. So let's just add it here. Code agent max iteration
[03:27:54,319] will be 15. Now this will basically
[03:28:00,800] this is a number that will uh limit how many loops the agent can do. So what is
[03:28:07,680] a loop? As I explained previously, the agent can pretty much do things
[03:28:13,040] indefinitely if it wants to, right? We need to find a way to tell it to stop.
[03:28:18,880] So, we are doing that currently using the task summary, right? But there has to be some kind of limit. We cannot
[03:28:25,600] really let it go forever. So, I'm going to say if you reach 15 iterations,
[03:28:31,600] you're doing something wrong. you should have already been done and this is too much and I have to stop you because you
[03:28:37,600] will use all of my open AI credits. That's what max iterations is.
[03:28:44,160] Now let's add a router here which is an asynchronous method and it can extract
[03:28:50,239] network. Let's add the summary here to be network
[03:28:58,000] data summary. And if we have the summary, we are going to break this
[03:29:03,840] network. Otherwise, we are going to return uh the agent and the agent will
[03:29:11,439] be code agent like this. There we go. So this is how we break the loop. If we
[03:29:19,200] detect this summary in the network state, we break the network. Otherwise,
[03:29:24,640] we return code agent, right? So the code agent will call itself many times until
[03:29:31,040] finally we detect there's a summary. If we detect a summary, we say great, you
[03:29:36,960] are done. Perfect. So now I have a bunch of these errors that I have to fix. So
[03:29:42,080] I'm going to go ahead and just see did I maybe remove an important bracket or
[03:29:47,200] something? Uh because something seems to be wrong here. I'm going to start by trying to reload my window just to see
[03:29:54,080] if that maybe fixes it. Looks like it did not fix it. So, I'm going to go ahead and see uh exactly what I did
[03:30:01,520] wrong. Okay, I think I found it. It's all the
[03:30:07,439] way uh up here. Uh somehow this happened. I'm not sure how. So, create
[03:30:14,239] network. There we go.
[03:30:20,319] Perfect. And now the only error in our app is this unused network variable. Everything else seems to be working. No
[03:30:27,600] errors seem to be flying around. Perfect. So once I have this network, what I can now do is I can run this
[03:30:34,720] network instead of running the actual code agent. So I will remove this now
[03:30:40,319] and I will do con result that comes from the entire network.
[03:30:46,800] And I will simply pass in event data and I believe it was value that we pass. So
[03:30:52,239] let's go ahead and do that. And then in here what we are able to do is this part
[03:30:57,920] can stay the same. And in the result part uh we can actually do the following. We can show each file that
[03:31:05,920] was changed. So next to sandbox URL
[03:31:11,840] let's do it like this. So URL is sandbox URL.
[03:31:18,800] The title will be for now just a fragment. files will be result state
[03:31:25,680] data files and summary will be result state data
[03:31:32,399] summary. So right now these are a type of any depending on the version you use
[03:31:37,600] maybe they will even become errors. Don't worry we will add the types later.
[03:31:42,720] So if we've done this correctly, we should have working code now. Especially
[03:31:49,760] after you change this and if you add this prompt, I believe this should be working. Now keep in mind uh it is hard
[03:31:57,279] to be reliable and deterministic with AI agents. I might get one result and you
[03:32:02,640] might get a completely different result and that will actually quadruple if
[03:32:07,840] you're using a different AI model than me. So again, the my biggest advice is use
[03:32:16,399] the same model I'm using, use the same open AI, you even put the same
[03:32:21,439] temperature. This will make it much more easier for you uh to have the same
[03:32:26,640] result as me. Let's try it out now. So, uh, I have my app running here and I'm
[03:32:35,040] going to go inside of here and I will create, um, create a calculator
[03:32:42,239] app. Let's try this and let's invoke a background job. Let's see. Maybe it
[03:32:47,279] fails immediately. Maybe it works. We're going to see. Uh, let me refresh the runs. Are they working? Are they not
[03:32:54,880] working? Not sure. Okay, it seems
[03:33:00,880] it seems like there is some kind of error happening here. So, let me just try and debug this.
[03:33:09,439] All right. So, what I did is I've shut down the npx inest cli. I have shut down
[03:33:15,600] npm rundev and I restarted both of them. So, do that. Shut them down and restart
[03:33:20,720] them and let's see what's going on. So, I managed to get the sandbox ID. That's
[03:33:26,319] a good start. It means we successfully started the sandbox. And now we are running the code agent. And you can see
[03:33:32,080] here we are running it with all the tools available. The tools to use the terminal, the tools to create or update
[03:33:39,040] files, the tool to read files. And now it will
[03:33:44,160] use those tools. So there we go. It used create or update files. Let's see what
[03:33:49,520] it created. It created calculator.tsx tsx and then it imported that calculator
[03:33:55,920] from that file. At least that's what it says it did. And it returned back the
[03:34:00,960] code sandbox URL. Let's check it out. I'm going to click here. And if it
[03:34:06,080] worked, we should now be seeing a simple calculator app. Fingers crossed. And
[03:34:12,160] looks like something went wrong. So what happened here? What happened is that it
[03:34:18,640] forgot to use use state. But here's the cool part for you. Maybe this doesn't
[03:34:24,880] didn't even happen. I don't know, right? Uh it can behave randomly. So, how do we
[03:34:32,080] fix this thing? Well, we can fix it in two ways. We can fix it by uh making the
[03:34:37,920] prompt even more strict, right? We can find the places where I add, for
[03:34:43,600] example, in here I added you must never add use client to layout tsx line 13.
[03:34:50,800] Maybe it's confused because of this. It reads this part and then it gets confused.
[03:34:56,720] Let's remove that part. Let's search for use client again. File
[03:35:02,479] safety rules again. Never add use client to app layout tsx. Maybe it gets
[03:35:08,640] confused by this. So I'm going to remove this where it says never add use client
[03:35:13,840] because it seems like u it is avoiding to add use client in that case.
[03:35:20,560] I have another instance of use client here where it says if building a form or or interactive element include proper
[03:35:26,640] state handling and add use client to the top. Perfect. That's a good example. Only add use client at the top of files
[03:35:33,040] that was react hooks or browser APIs. Never add it to layout tsx. So I will
[03:35:38,960] remove this part as well simply because I feel like it is leading it away from
[03:35:44,239] using use client properly. So let's see if our next iteration will
[03:35:50,800] be better. So I will add it again. Create a calculator app. Uh and if it
[03:35:56,640] doesn't work then we can instruct it in this prompt further. Right? And as I said for you maybe it worked first try.
[03:36:03,439] I don't know. That's kind of the part about building this type of apps. Um you
[03:36:08,560] have to simply rely on luck sometimes right? Sometimes the agent will perform very well, sometimes it will perform
[03:36:15,920] very bad. And the better this models get, the better your results will
[03:36:21,359] actually be. And as I said, uh your prompts will also get better with time.
[03:36:27,040] Right? So let's go ahead and see if this was any better. Let's see if it added
[03:36:34,960] use client this time. And there we go. I have a working calculator app generated
[03:36:42,960] by AI. Can you believe that AI has generated this? Now, as I said, I have
[03:36:50,399] no idea what kind of result you are going to get, right? I don't think you will get the same result as me. Your
[03:36:57,359] might have some colors. Your might not work again. If it doesn't work again,
[03:37:02,560] you know, you can try and go inside of here and then explicitly tell it, you know, uh, be mindful of use client where
[03:37:11,600] it needs to be added, right? You can tell it that and then it definitely won't make that mistake
[03:37:18,560] or, you know, uh, read through my prompt and see if there's something you don't
[03:37:23,760] like here. Or maybe paste my entire prompt inside of chat GPT and tell it to
[03:37:28,880] improve it somehow. So for me, I removed those couple of lines for use client.
[03:37:37,359] Perfect. Uh let's try build a landing page.
[03:37:43,520] So you can now pretty much you know you're pretty much let's say finished when it comes to backend side. You can
[03:37:50,720] now only improve these tools and improve the prompts. So what we're going to do next is we're going to implement saving
[03:37:57,600] this to the database and we're going to implement creating a summary of what it just created. So we can save that to the
[03:38:04,080] database and kind of return a message back to the user. And if you want to uh
[03:38:09,840] you can instruct it to use some package like use drag and drop use framer and
[03:38:15,920] then you will see it use the terminal tool. So let's see if it managed to create a landing page. There we go. And
[03:38:22,560] may I say a pretty good landing page, right? Very impressive. Perhaps you
[03:38:28,960] should try with the landing page example because it doesn't use any use client or things like that. I'm very very
[03:38:36,319] impressed by this is better than I expected. So let's try telling it to use framework this time. Build a landing
[03:38:42,399] page. Use motion package. Let's try this.
[03:38:49,279] So in here we can see that now it is using terminal and we can see the result
[03:38:54,720] added three packages right. So let's see if it actually used uh that or something
[03:39:00,399] else. I think you can also click on the code agent right before it uses the terminal and click on the output and in
[03:39:06,880] here you can see npm install framer motion. So that's what it run. I'm not sure if that's the newest version of
[03:39:13,359] framer. Maybe this won't even work. I don't know but let's click on get sandbox URL. Let's click here
[03:39:21,120] and let's see maybe it will be broken. Yeah, looks like this doesn't work. It should use motion package not framer
[03:39:28,319] motion. So, as I said, uh it's not perfect, right? You can break it every now and then, but you can also improve
[03:39:35,120] it just as easily, right? As I said, Claude Sonnet 3.5 is by far the most
[03:39:40,880] reliable coding agent because it just it is up to date with everything. It just knows everything, right? But you will
[03:39:48,560] hit limits very very soon. So, your best option for now is to create this kind of
[03:39:56,239] app, right? using open AI and simply improve the prompt as much as you can.
[03:40:02,160] So I did this myself and I am not a prompt engineer. So you can definitely create this better than me. Your
[03:40:08,319] starting point uh should be this. You're a senior software engineer and the most
[03:40:14,080] the other important part is this. Give it a very important ending. So this
[03:40:19,200] should be your ending. Everything in between after before final output you
[03:40:24,800] can change. So I wrote all of this with the help of AI and I basically added more things as I saw uh they as I saw
[03:40:31,920] some things fail. So for example, sometimes it attempted to run dev itself or build. So I told it you must never do
[03:40:40,000] that, right? It's always working. Uh so yeah, you can learn how to prompt a
[03:40:45,279] little bit better and you will get better results or you can simply use a newer model. So, how about we try build
[03:40:52,399] a conbon board use react beautiful
[03:41:01,040] drag and drop. Let's try that. Maybe we will have some uh better results with this package.
[03:41:08,960] So, this is the result of the query to build a conbon board. As you can see,
[03:41:14,000] the first terminal command actually failed and we can actually see the error
[03:41:20,239] here. So, let's go ahead and scroll down here. Error error unable to resolve the
[03:41:25,680] dependency and it probably told it that it needs to use uh legacy peer depths.
[03:41:33,279] You can see this retry this command with d-force or legacy peer depths. And then
[03:41:39,359] what happened is it simply retried that and you can see then it worked. So
[03:41:44,880] that's the power of ingest and that's the power of returning the result of the
[03:41:50,800] terminal tool. Right? So we tell it the command failed and we tell it why it
[03:41:56,640] failed. So that way it knows how to retry. And my get sandbox URL uh was
[03:42:03,279] this what seems to be a working conbon board.
[03:42:08,720] test. Amazing. It seems to have some issues. It's missing a prop set here, but
[03:42:16,880] honestly, other than that, pretty damn good. Look at this.
[03:42:22,160] Amazing, right? It even highlights where it's going to land. Very, very cool. Uh,
[03:42:29,439] great. So, I think that marks the end of this chapter. uh till we finish this project, we will add some methods to
[03:42:36,239] improve the failing builds, right? We will allow the user to tell the AI like,
[03:42:42,479] hey, you forgot to add use client so it understands what happened previously and then it can just easily fix the issue.
[03:42:49,520] That's at least what we are going to attempt to do. So even if something fails, uh we will allow the user to
[03:42:55,840] instruct the AI and tell it, hey, it failed. Can you please fix it? Because you know, I saw lovable fail. I saw
[03:43:02,399] replet fail. I saw v 0ero fail. All of these apps fail, right? They are just AI. It's a it's a language model after
[03:43:09,760] all, right? So, it can definitely fail. But I think it is super impressive given
[03:43:15,520] the fact that we built it so soon and so fast. Amazing, amazing job. Let me mark
[03:43:21,279] all of these things as complete here. And now, let's go ahead and branch out.
[03:43:26,560] So, 07 agent tools. I'm going to go ahead and create a new branch
[03:43:35,439] 07 agent tools. I'm going to stage all of my changes.
[03:43:42,239] 07 agent tools. I will commit and I will publish my branch. As always, you have a
[03:43:50,640] completely free code rabbit extension you can install inside of Visual Studio Code if you wanted to review your files.
[03:43:58,000] And now let's go ahead and let's open a pull request so we can merge our changes
[03:44:03,359] and so we can review them here with a summary.
[03:44:09,439] And here we have the code rabbit summary. So we have enhanced agent capabilities with multi-tool multi-agent
[03:44:16,160] network for sandbox interactions including terminal commands, file operations and summary extraction. We
[03:44:22,800] also introduced a comprehensive system prompt outlining coding standards and environment constraints for improved
[03:44:29,120] code generation and consistency. Perfect. So that's exactly what we did. And in here we even have a sequence
[03:44:35,840] diagram of how it happens. So once the background job is triggered, we can see
[03:44:41,279] that now the coding agent can use the terminal, create or update files or read files as needed and then the tools
[03:44:48,720] return results using std out using files contents or anything else. And depending
[03:44:55,040] on that the code agent is either calling another tool or finally it returns with
[03:45:02,160] the last message which includes the task summary tag signaling that it is over
[03:45:09,120] and then we can return the sandbox URL. So in here it actually uh recommends not
[03:45:16,160] doing a double turnary instead ending early here. So that's quite a good suggestion.
[03:45:22,399] We could possibly do that. Then below here, it fixed a typo to agent. That is
[03:45:29,279] definitely a mistake. Great. Uh, and in here is something quite interesting. So,
[03:45:35,680] what I do here is if I fail, I simply
[03:45:40,800] return an error. So, I practically never store anything if it fails. But in here
[03:45:49,439] it recommends actually doing partial saving right. So if there is at least
[03:45:56,080] some files which were successfully created save them but still throw an error. So quite a good suggestion but in
[03:46:04,560] my experience if it fails on one file it will fail entirely because uh this
[03:46:11,199] doesn't mean that it wrote incorrect code. If it throws an error here, it means it lost access to the file system.
[03:46:18,880] That's why I'm not exactly worried about this. I will pretty much always expect it to be able to write all files it
[03:46:25,600] needs. But very good suggestion here to handle partial success. I will look into
[03:46:32,080] that. Let's go ahead and let's merge this pull request here. I'm not going to
[03:46:37,199] delete the branch as always. So I have access to it right here. And now that we
[03:46:42,960] are here, let's go ahead and go back inside of our main and let's go ahead
[03:46:48,640] and synchronize our changes. And that should officially mark the end of this
[03:46:53,760] chapter. Just a sanity check here. There we go. We just merged 07. Amazing,
[03:47:00,239] amazing job. We are now ready to start building our UI. See you in the next
[03:47:06,479] chapter. In this chapter, we're going to implement the messages entity. This will
[03:47:09,000] 
[03:47:13,840] include creating the actual message Prisma schema, the fragment Prisma schema, and then we're going to modify
[03:47:20,319] our current TRPC procedures and our background jobs to use those new schemas
[03:47:25,680] and save user prompts and AI responses in their appropriate models. So, let's
[03:47:32,239] start by creating a simple message schema. In order to do that, we have to go ahead and visit our schema file.
[03:47:39,520] Before you do that, as always, confirm that you're on your main branch. And if you are unsure if you have any
[03:47:44,720] unsynchronized changes, you can always click this and confirm. And just make sure that chapter 7 is your last merged
[03:47:52,080] change here. Great. Now, let's go ahead inside of Prisma and schema.prisma.
[03:47:58,080] If you have a folder with migrations here, you can delete it because we're going to remove pretty much everything
[03:48:04,479] inside of here. Right? So, we're going to create a whole new schema now. So,
[03:48:09,760] let's go ahead and create a model message inside create an ID which will
[03:48:15,439] have a type of which will be a type of string is going to be an ID with the
[03:48:20,960] default value of uyu ID. After that, let's go ahead and create a content
[03:48:26,880] which will be a type of string. Let's go ahead and add a role which will be a
[03:48:32,160] type of enum. So, let's create an enum message type.
[03:48:37,680] And let's give it uh my apologies not message type message role
[03:48:45,040] which can be a type of user or assistant and then you can go ahead and use that
[03:48:50,800] right here. So simply assign the role to be message ro just like that. And now
[03:48:57,040] we're going to do what I started to do which is the message type.
[03:49:02,399] So the message type will either be a type of result or a type of error.
[03:49:09,279] And let's go ahead and give this a type of message type. So in case the AI response fails, we are going to treat it
[03:49:16,560] as an error. meaning that the AI will simply return uh I wasn't able to do
[03:49:23,279] this generation for whatever reason please retry and now let's add the usual created ad
[03:49:30,319] field which is a type of date time and the default value of now and let's add
[03:49:36,560] updated ad which is a date time as well and it has a special decorator updated ad which is a very cool decorator
[03:49:43,359] because what it does is it will automatically update this build when we update the message model. And now let's
[03:49:51,120] go ahead and let's create a fragment model. So the fragment model
[03:49:58,080] will also have an ID of string and the default value of UU ID and it will have
[03:50:03,600] a relation to the message. So let's add a message ID to be a type of string and it needs to be unique.
[03:50:10,560] Now let's add a message here to be a type of message. Give it a relation decorator targeting the fields message
[03:50:18,319] ID which we defined above referencing the ID field in the message
[03:50:24,160] model. And let's add on delete here to be cascade. So if this message gets
[03:50:29,439] deleted, the fragment gets deleted as well. And now we just have to fix this
[03:50:34,640] error by adding a proper relation here in the message. So the message does not
[03:50:40,080] have to have a fragment. If the user is sending a message, there will be no fragment. Only for the AI response will
[03:50:47,520] there be a fragment. That's why we're going to create a fragment field and we're going to make it a type of
[03:50:53,840] fragment, but it's going to be optional like this. And then let's go back inside
[03:50:59,120] of the fragment model and let's create a sandbox URL to be a type of string, the
[03:51:04,720] title to be a type of string, and files to be a type of JSON. So this is quite
[03:51:11,600] cool. Uh it's very nice that possess allows this and it's perfect for our use case because files is not exactly
[03:51:19,840] something that in my opinion makes sense to create a whole new model for because it's just a simple mapping of the file
[03:51:26,880] path and the content and it can be pretty much infinite in size. Well, obviously not infinite but you know what
[03:51:33,680] I mean. So I think this is a very good use case of using JSON in posgress and
[03:51:39,040] then we can just copy the created ad and the updated ad from the model above just
[03:51:44,160] like that. Now in here you should have no errors and again make sure that you're using the Prisma
[03:51:50,880] extension simply so you have the syntax highlighting and it will tell you in advance if you've done anything
[03:51:56,080] incorrectly here. So what we have to do now is we have to push this. So let's go ahead and shut down our app. Make sure
[03:52:03,279] you have shut down your ingest server as well. And I will now run npx prisma
[03:52:08,399] migrate dev. And let's just wait a second for this to connect to our
[03:52:13,439] database. So I have gotten an error. In your case,
[03:52:18,479] you might not get an error. But I think this is because yes, it detected some
[03:52:23,920] drift. Your database schema is not in sync with your migration history. That's because I told you to manually delete
[03:52:29,760] the migration folder. This is not a problem. We are working with development data here. So let's use npx prisma
[03:52:36,000] migrate reset first and let's just reset the entire thing. So let me just confirm
[03:52:41,279] this. Um and even if this doesn't work, you can always just create a new
[03:52:46,319] postgress database and then just go instead of environment and just use a new database URL. Right? That's like the
[03:52:52,720] ultimate brute force you can do. So after I've done my migrate reset, I will
[03:52:57,920] try migrate dev again. And this time with no problems, I'm
[03:53:03,520] going to call this message-fragment. And there we go. Just like that, we have
[03:53:09,760] created new schema here. And now you can go ahead and run the npx Prisma studio.
[03:53:15,199] And in here, you should see the fragment and the message as the models, meaning it successfully created that. Perfect.
[03:53:21,920] So now let's go ahead and let's actually use these things. So what I want to do now is I want to go inside of source and
[03:53:29,760] I want to create a new folder called modules. So I like to have a module-based
[03:53:36,080] structure in my application. So instead of having my procedures written here
[03:53:41,680] randomly, I will have them in their own module. So I like to separate modules
[03:53:47,680] either by large chunks of my application like homepage, landing page, pricing or
[03:53:55,199] by entity models that I have in my database. So for example, let's go ahead and let's create messages in here. So
[03:54:03,040] inside of here, I will keep everything message related. So for example, one of those things would be all the things
[03:54:09,520] that go on the server uh regarding messages, specifically all our
[03:54:14,640] procedures. So now that we are inside of here, we're going to import uh initc router or
[03:54:22,160] create tRPC router from trpc init. And let's export const messages router here
[03:54:28,080] to be create trpc router. And then inside of here, let me just quickly
[03:54:33,920] check inside of my TRPC routers app. I seem to have this existing one called invoke. So now what we're going to do is
[03:54:40,880] we're going to create a create procedure. So this will be accessed through as message.create.
[03:54:49,279] This is how you will call this. That's why it's called create and not create message because it would be redundant.
[03:54:55,439] Message dot message create or create message, right? Makes no sense. So let's
[03:55:00,640] add a base procedure which will of course be a protected procedure later on in the tutorial. For now it's perfectly
[03:55:06,399] fine to be a base procedure. Let's go ahead and define an input here. And I'm
[03:55:11,680] going to set this to be uh the value. It can be the value. It can be the prompt.
[03:55:17,680] I think value is good enough. And let me just import Z from zod. Let's go ahead and set it to be a
[03:55:24,479] string. And let's give it a message is
[03:55:29,920] required error. Great. And then let's go ahead and let's
[03:55:34,960] chain mutation here is going to be asynchronous.
[03:55:40,239] Let's dstructure the input from here like this. And then inside of here, what
[03:55:46,399] we're going to do is we're going to create a new message by using await
[03:55:53,439] Prisma from lib database and then go ahead dot message dotcreate
[03:56:00,560] and pass in the data inside. And let's add the content to be input value here
[03:56:06,720] like this. And let me just see what else do I have to add inside because I already forgot how my schema looks like.
[03:56:13,439] So I have to add a role and I have to add a type. So my role here will be user
[03:56:19,920] and my type here will be result. Right? There's no loading. This is an instant message created by the user.
[03:56:26,720] Perfect. So I think I actually don't even need to uh put that in any type of
[03:56:33,040] constant. I think this works just fine. And what I'm doing after this is I'm actually invoking my background job. So
[03:56:40,640] let me go inside of the routers here and let me just copy this part
[03:56:45,920] inside of procedures and let's go right here. So let me import inest from the inest client. Let me show you my imports
[03:56:52,880] a bit simply so you're on the same page. There we go.
[03:56:58,080] And obviously we're going to have to change this as well. It makes no sense to be called test. Uh and uh this is
[03:57:05,439] what we should actually do. We should keep this as created message or new message and then simply return created
[03:57:13,840] message simply. So our API response has some kind of well response for the user
[03:57:19,760] back. Perfect. Now that we have the basic message router created with some
[03:57:25,520] basic validation here, let's go ahead inside of TRPC routers and let's remove
[03:57:32,000] everything inside of here. And then in here add messages
[03:57:37,199] messages router. You can import the ingest. You can you can remove zone. You can remove inest and you can remove the
[03:57:43,279] base procedure just like this. And this is how we're going to add all
[03:57:49,680] other uh module related things inside. So later when we add fragments it will
[03:57:55,760] be fragments router and we will control all procedures inside of its own module.
[03:58:03,520] Right, like this. Great. So now obviously we need to fix some things in
[03:58:10,239] our page I believe. So let's go inside of source app page.
[03:58:15,920] And in here this is now create message. This will be TRPC dot messages.create.
[03:58:23,600] And the on success is the same. In here we can just say on success message
[03:58:29,279] created. And then let's go ahead and let's use create message is pending and create
[03:58:35,279] message.mmutate just like that. So right now uh this
[03:58:40,640] should still work exactly the same right let's go ahead and just quickly try it
[03:58:45,680] out uh just to make sure we didn't accidentally break something. So npm rundev in one npx inest cli latest dev
[03:58:53,520] in the other one. Let's go and we can install the new one. If it appears it's okay. And let's go ahead and open local
[03:59:00,399] host 3000 here. And I'm going to do create a landing page simply because this is the simplest thing that most
[03:59:07,359] likely won't go wrong. There we go. Looks like it is created. So I'm going
[03:59:12,720] to click invoke a background job here. And looks like message was created. I'm
[03:59:19,040] going to go inside of my inest developer server here. And I'm going to wait for this to complete.
[03:59:26,160] And here we have it. It is complete. and quite a nice result. I'm always
[03:59:32,000] impressed by its landing pages. It seems to have uh gotten that it seems to have
[03:59:37,199] gotten very good at creating landing pages. Uh great. So, looks like everything is still working. And now
[03:59:44,160] what we have to do is while we are storing the messages from the user, we
[03:59:49,840] are not storing the messages from the AI. So in order to keep track of that, how about we extract the messages here
[03:59:58,800] by using use query from tanstack query. So just make sure you add this import
[04:00:03,840] here. Pass in tRPC do messages. And I just remembered we didn't create any. So
[04:00:08,960] let's simply go inside of the messages router which is inside of your modules here. And simply create uh let's call
[04:00:15,840] this get many base procedure. The input doesn't really matter for now.
[04:00:23,279] Let's just do a query here. Again, it's going to be an asynchronous method.
[04:00:30,560] And in here, what we're going to do is get the messages to be await Prisma
[04:00:35,680] message find many. And how about we do order by and let me just see I have to
[04:00:43,359] use updated at or created at let's use ascending and return the messages.
[04:00:50,720] like this and just like that we have our get many procedure. So now we can go back here and add it. There we go. Get
[04:00:57,520] many. This will be query options here. And then inside of here, let's go ahead
[04:01:03,840] and do it below the button. JSON.stringify messages null 2. So now you can see that
[04:01:11,520] I just created this create a landing page with the ro user. So if I go ahead
[04:01:17,760] and do create a red landing page and invoke this background job and refresh
[04:01:24,080] this page, you can see that now I have create a landing page and after that I have a create a red landing page. So let
[04:01:31,040] me go inside of my procedures and change the updated ad to be descending and refresh and then the newer message
[04:01:38,000] appears at the top. And if you want you can wait for the result but uh you know it's it's not that important right now
[04:01:45,520] but it definitely created a red landing page. Great. So now again I'm expecting
[04:01:52,239] that besides having these steps to get sandbox ID create our update and then
[04:01:58,239] finalize. I also needed to save this entire thing to the database so that we can access it from the UI and not from
[04:02:05,760] the inest developer server. So let's go ahead back inside
[04:02:10,960] of ingest functions here and then we're going to create a whole new step here at
[04:02:17,279] the bottom. So after we get our sandbox URL, we have to go ahead and actually
[04:02:23,920] save this to the database. So let's do await step.r run save result
[04:02:32,880] asynchronous method like this. And in here, let's return await Prisma dossage.
[04:02:40,160] Whoops. We have to import Prisma from lib database. So just make sure you add this import.
[04:02:46,319] And we're basically going to save the content. So prisma dossage.create.
[04:02:52,160] The data will be the following. Content is going to be result state data summary
[04:03:01,359] and role will be assistant. and type here will be result like this. And let's
[04:03:09,439] also extend it a bit further by also creating the fragment relation. Let's
[04:03:15,439] pass in the sandbox URL here. Uh sandbox URL doesn't exist. Did I do something
[04:03:22,239] incorrectly in my schema or is it just the syntax that I didn't finish? It definitely does exist here. So perhaps I
[04:03:30,239] just have to do result actually sandbox URL like this.
[04:03:36,080] Oh my apologies. This is not how you do it. Create and then sandbox URL. Sandbox
[04:03:43,359] URL. And let's go ahead and add the the title of the fragment to be just fragment
[04:03:49,279] and files can be result state data files.
[04:03:55,120] There we go. So now let's go ahead and try and do
[04:04:00,640] this again. So use a simple prompt again. Build a blue landing page. So
[04:04:06,960] basically something simple and then wait for this to finish. And after it finishes, you should now see another
[04:04:14,479] step happening here which is to save the result in Prisma. It should create a
[04:04:21,199] assistant message and it should also create a fragment with the sandbox URL
[04:04:26,399] and all the files that it created. There we go. So we have the save result
[04:04:33,840] step. And now if I go back here, there we go. You can see I have a new message
[04:04:39,760] here at the top. The content includes the task summary, created a fully responsive production quality blue
[04:04:46,640] themed landing page in app page tsx. The layout includes a navbar, hero section,
[04:04:51,680] favorites, pricing, contact form, and footer. Uh, and we don't really have access to the sandbox URL here. That's
[04:04:58,960] because what we have to do if we want to see that is go inside of the message router and we have to add include
[04:05:05,520] fragment true. And after you do that, you will see the entire fragment
[04:05:10,800] content. So you will see the entire source code actually. And you will see the sandbox URL. So if you try adding
[04:05:18,399] that here, we now have the blue landing page. And that is basically what we now
[04:05:24,560] have to do. So uh let's remove the fragment for now. We can easily add it
[04:05:30,319] later because I'm not sure if we need it and it's taking up a lot of space. Uh perfect. So this is what I actually
[04:05:36,640] wanted to do for this chapter. I wanted us to add the messages router and I think that we can do one more thing
[04:05:44,000] while we are here and that is the following. We can go inside of ingest
[04:05:49,279] here instead of functions and let's just change this right. Let's stop calling it hello world. Let's go ahead and call
[04:05:56,239] this uh code agent. The ID will be code agent. And let's also change the event
[04:06:05,359] to be code agent run
[04:06:10,960] like this. And now just make sure that you go back inside of your modules messages server procedures here and when
[04:06:18,319] you invoke it make sure to change this like that or any other place where you
[04:06:25,120] do this make sure to change it. For me it's only one place code agent run. Uh
[04:06:31,120] okay. And now we have to also go inside of app API ingest route and we have to
[04:06:37,520] replace this with code agent. There we go. Go ahead and refresh.
[04:06:44,640] Uh if it's still stuck, you can always shut this down. And I would recommend
[04:06:49,760] shutting both of them down. And let's go ahead and refresh again.
[04:06:56,960] Build a green landing page. message created. And I recommend waiting
[04:07:04,640] it out just to confirm it works since we just changed this to be a code agent function.
[04:07:12,560] There we go. Seems to work quite well. And I think that is it for this chapter.
[04:07:18,479] Oh, this one's nice. uh we've basically created the message model, the fragment model which
[04:07:24,640] basically puts it puts us in a position where we can start creating proper UI
[04:07:29,760] around this because uh by having the fragment and by having the message we
[04:07:35,439] can create the file explorer we can create the I frame where we render the
[04:07:40,640] URL and we can create the message containers on this side and while we are here it is important to do uh one more
[04:07:48,399] thing go inside of your functions.TTS in the ingest here and after you do uh the
[04:07:56,000] result from the network run define an is error constant and it will be an error
[04:08:01,840] if we don't have result data summary result data.state state my apologies
[04:08:11,279] state data summary or if object do keys result
[04:08:18,160] state data files or an alternative empty array.length
[04:08:24,720] is equal to zero. So if any of those two are missing it means something went
[04:08:31,279] wrong. So inside of here when we save the result what we're going to do is we're going to check if is error we're
[04:08:39,840] going to return content. Whoops my apologies. We're going to uh
[04:08:46,800] return await Prisma message create data content
[04:08:54,720] something went wrong. Please try again.
[04:09:02,000] like this. Let's give it a role of assistant and let's give it a type of
[04:09:08,000] error like this. There we go. So, we do an early return if we detect it is an
[04:09:14,160] error. So, we don't create the fragment if we don't have the information to
[04:09:19,359] create it. And the one thing I completely forgot about is the types here. So, right now files is a type of
[04:09:26,479] any, summary is a type of any, right? And while this seems to not create any problems for us, I want to show you that
[04:09:33,120] there is a way so that you can properly type your entire network state because I think that is important and it will make
[04:09:39,680] your project more maintainable. So let's go ahead above the uh code agent here
[04:09:45,920] and let's create an interface agent state and let's go ahead and do the following. Let's make a summary a string
[04:09:54,479] and let's create files which can be mapped as a record string string. But I
[04:09:59,600] don't like this simply because there is a way to make it uh closer to what we expect and it's basically opening an
[04:10:05,359] object and then defining path as the key and simply the content as a string. I
[04:10:11,680] think this more closely resembles what we expect rather than record string string.
[04:10:18,000] Now that we have the agent state, uh we just have to find all the places to use it. So starting with uh oh yes, I really
[04:10:26,080] don't like this. We should not name our function and our agent the same. So how
[04:10:31,920] about we rename one of them? Let's call this uh code agent function
[04:10:40,160] like this. and then go back inside of your uh source app API inest route code
[04:10:46,800] agent function code agent function like this way safer like that okay now let's
[04:10:55,920] go ahead and use the agent state instead of the code agent here we can open uh
[04:11:01,040] pointy brackets and pass it inside so that's step one then the next place we
[04:11:06,319] can use it is in the tool create or update files so In here we have step and
[04:11:12,000] network and you can see that files here are undefined even though we added it to the agent state. That's because what we
[04:11:17,840] have to do here is we have to define this step as a type of tool from inest agent kit. So just make sure that you
[04:11:25,040] import the type tool from inest agent kit. I think you can specify type like
[04:11:30,880] this. Let's go back here. So it's going to be a type of tool dot options and pass in
[04:11:38,399] agent state inside. And then when you hover over files you will see that it
[04:11:43,680] has the correct state. So that's the second place and the third place is in
[04:11:49,120] the network here. So open this up agent state
[04:11:54,319] like this and then data dos summary is a type of string now and you will see that
[04:11:59,359] you now have autocomplete. And if you type something else,
[04:12:04,479] you should get an error now. Right? So when you clearly define your state, it is much stricter and you will not be
[04:12:10,720] making any mistakes now. Uh perfect. So I think that this is it for this chapter
[04:12:17,680] then. Uh and let me just check uh how does this look like? Summary. So this
[04:12:23,760] looks like it doesn't need anything because life cycle seems to infer properly from create agent agent state
[04:12:30,319] here. Right? So if I change this, I'm getting an error. Perfect. Great. So I think that this could be it
[04:12:39,279] for this chapter. So I'm going to stop here. Let me just fix this fix this description coding agent
[04:12:45,760] like this. And of course, yeah, if you want to, you can change the name of this. I told you you can always go
[04:12:51,920] inside of your let me find the folder sandbox templates
[04:12:58,640] toml file and you can change the name here and then simply run inside of this
[04:13:03,680] folder E2B template build. Great. So now that we have this let's go
[04:13:10,080] ahead and open a pull request. If you want to, you can also, you know, try another one just to confirm it works
[04:13:16,479] because we changed again the name of our function. But at this point, I think you know how to fix it. But let's just try
[04:13:23,520] build a yellow landing page just for sanity check so I don't end the
[04:13:29,680] chapter and things are broken and seems to work just fine. Let's go
[04:13:36,319] ahead and see the yellow landing page. Perfect. So let's go ahead and open a
[04:13:42,399] pull request. So this chapter is 08 messages. Uh we just created the message
[04:13:48,560] schema fragment schema. We're saving the user prompt and we are saving the user response. Perfect. So I'm going to go
[04:13:55,840] ahead and I'm going to create a new branch 08 messages.
[04:14:01,680] I'm going to stage all of my changes. I'm going to add a commit message and
[04:14:06,960] I'm going to commit and publish the branch. If you want to, there is a free Code
[04:14:12,000] Rabbit extension which can help you review all of your files here. Now,
[04:14:17,279] let's go ahead and go inside of our GitHub and let's go ahead and open a
[04:14:22,720] pull request and let's review with the summary and the diagram here.
[04:14:29,359] And here we have a summary. So, let's quickly go over it. So, we end this chapter. We introduced a new messages
[04:14:36,560] system allowing users to create and view messages with associated metadata and
[04:14:41,680] fragments. Messages now display additional details including message type and role. And we did some refactors
[04:14:49,920] such as we streamlined the backend procedures and routing for the message management and we removed the legacy
[04:14:56,479] user and post data structures. Perfect. So in here we have the diagram but
[04:15:02,640] nothing much has been changed from last time except this time we have additional step before we invoke the code agent run
[04:15:10,159] which is that we save the user message in the database and we have one more step in the background job where we save
[04:15:17,680] the uh message to the database to the Prisma here. Great. And in here we have
[04:15:23,680] uh some comments but all of these things will be changed. The on error will be
[04:15:28,880] added here later. This will basically not be in this component at all. So that's the only reason why I keep you
[04:15:34,960] know not fixing this comments. Uh not because they're wrong. They're completely right. But it's not the
[04:15:40,960] component they are going to be in anyway. This is just for demonstration. Right? We are now going to start and
[04:15:46,000] build the proper UI in here. Uh I'm pretty sure this is not needed simply because uh inest events have their own
[04:15:53,040] try catch methods. So let's go ahead now uh and go through the rest of these. So
[04:15:58,720] in here it recommends pagionation. That's something we can look into later.
[04:16:03,920] But yes, it's very easy to add pagionation with Prisma. As you can see, they have take, they have skip, and
[04:16:09,680] that's pretty much all you need here. Uh in here, it recommends limiting the length of the message, and that is
[04:16:16,000] definitely a good thing. Yeah, we don't want any user to be able to spam our app with a huge number of tokens. So we will
[04:16:22,880] have to limit this to some reasonable number. This is a very good suggestion here. Let's go ahead and merge our pull
[04:16:29,120] request. As always, I'm not going to delete my branch. Instead, what I'm going to do is now I'm going to go back
[04:16:35,680] to my main branch here and I'm going to click on synchronize changes. And once that is finished,
[04:16:43,120] I can go inside of my source graph and confirm messages are the last merged
[04:16:48,319] chapter. Amazing. Amazing job. and see you in the next chapter.
[04:16:56,000] 
[04:16:57,040] In this chapter, we're going to add the projects entity to our application. So,
[04:17:02,560] this chapter will be quite similar to the previous one where we introduced the message model. So, in this chapter,
[04:17:09,279] we're going to add the project schema. We're going to add message relations to
[04:17:14,479] that project. And then we're going to create a new project on user prompt. And
[04:17:20,319] the last thing we have to do is preserve project ID in background jobs so we know
[04:17:26,640] where to store that AI result. Basically, each message needs to belong to a project so we can keep track of all
[04:17:34,319] of our uh AI generations. So let's go ahead and start by adding a new Prisma
[04:17:41,040] schema. As always, confirm you are on your main branch. And if you haven't, synchronize your changes. You should
[04:17:47,439] have 08 messages as your last merge. So I'm going to go inside of Prisma. I have
[04:17:52,960] some migrations here because we added them last time. And now let's go above the message here. And actually let's go
[04:18:00,159] above message type and above message ro. And let's add a model project. The ID
[04:18:06,239] will be the same as the message. So you can add it here. The name will be a
[04:18:12,159] string. And then we're just going to have created at and updated at. So we
[04:18:18,159] can add this and then down here add messages which will be a type of message
[04:18:24,319] like this. And now we have to create an equal relation in the message model. So
[04:18:29,439] let's go inside of the message model here and let's go ahead and add project
[04:18:36,080] ID to be a type of string and below that project to be a type of project. Give it
[04:18:43,920] a relation decorator with fields project ID references ID and on delete cascade.
[04:18:54,000] So exactly the same as the message relation in the fragment right we are aiming for project ID field referencing
[04:19:01,120] the ID field in the project and if the project gets deleted the message gets
[04:19:06,640] deleted as well and then the fragment gets deleted as well. Perfect. So now that we have this we have to push that
[04:19:13,279] to our database. So I recommend shutting down both of your uh servers here. And
[04:19:20,080] let's first do npx prisma migrate reset simply so we remove everything from our
[04:19:26,159] database because we have invalid data at the moment. And once this is deleted,
[04:19:32,399] let's go ahead and do npx prisma migrate dev. And once it connects to the database, let's go ahead and call this
[04:19:39,359] migration project. There we go. So I'm going to call this
[04:19:44,720] projects like this. And that should apply the migration. Perfect. Now let's
[04:19:50,159] go ahead and start this server. And let's start the ingest server here.
[04:19:56,000] There we go. So now what we're going to do is the following. We're going to go
[04:20:01,199] inside of source inside of modules and let's copy the messages and paste it
[04:20:07,199] here. And let's rename it to projects. Let's go inside of server procedures.
[04:20:13,760] Make sure you are inside of projects here. We're going to change this from messages router to projects router like
[04:20:20,720] this. And then we're going to modify uh how this works as well. So for the get
[04:20:28,000] many change this to be projects and then in here await prisma.pro
[04:20:35,600] find many. So that's the get many procedure for the project's router. for the create here uh the value will
[04:20:44,000] also be uh the message right and actually I'm not even yeah so we are
[04:20:50,239] going to create a project by entering a prompt right so we are not going to
[04:20:56,640] create a new project and then give the project a name instead we're going to have a big landing page like this and we
[04:21:03,120] will simply say hey enter something like create a Netflix clone and then we're going to click create and this will
[04:21:10,239] create both the message and the project at the same time. So in the create we
[04:21:16,800] actually only have the value right the prompt. So that's going to be this. So we're going to do the following const
[04:21:24,880] created project await prisma project create
[04:21:31,439] and then for the data uh we have to give a project a name. So for this we're
[04:21:36,640] going to add a generator package to our project.
[04:21:41,760] So let's go ahead and let's quickly do npm install random words slugs. Random
[04:21:49,199] word slugs. You can of course use a billion other uh generators, but this is
[04:21:55,439] the one I found that looks the most like uh all the other apps I can find. So
[04:22:00,560] this is the version 0.1.7 in case you're interested. And let's go ahead and use
[04:22:06,000] it now. So let me just add it here. Generate slug from random words slug.
[04:22:11,760] And then in here uh in here the name will be generate slug and pass in two
[04:22:19,600] words. And let's go ahead and open the settings and pass in the format to be ke
[04:22:24,960] like this. So that will be it for the name. And now we have to immediately
[04:22:31,600] create the message. So we can do that either uh separately like this or we can
[04:22:36,720] just pass in the message messages here and then open the create inside and you
[04:22:42,800] can just copy this exactly like this and then you can remove this
[04:22:48,960] and then we start the ingest here and besides sending the value we will also
[04:22:54,560] send the project ID to be created project ID and then in here you will
[04:23:01,359] have created project as the return and that's it. That is our create method for
[04:23:07,199] the project's router. So in here it would be a good idea uh to limit the
[04:23:12,560] length as our code rabbit suggested previously. So let me add maximum here and let's add
[04:23:20,080] I don't know 10,000 maybe that could be the good upper limit.
[04:23:26,960] Message is too long. This is not actually the message.
[04:23:32,479] This is prompt, right? Or value since
[04:23:38,159] this is called value. So yeah, it's either going to be required or if it's longer than 10,000 characters, we're
[04:23:44,720] going to say, okay, that's too long. Uh you can of course modify this later to
[04:23:49,840] however you like. Perfect. So you can of courseh also play around uh with this,
[04:23:55,600] right? It even has some more options which you can do but I found this to be sufficient and also in our Prisma schema
[04:24:03,760] the project name is not unique so it doesn't matter if there are conflicts
[04:24:09,520] with this right great so now that we have this we also
[04:24:14,800] have to modify our messages procedures here because
[04:24:20,479] right now uh they are not exactly working. So let's go inside of the
[04:24:26,960] create base procedure here. And for the value, well, we can just copy this just
[04:24:33,920] so we're on the same page here. So either min or max. And then let's also
[04:24:40,960] add project ID here, which will be a type of string with a minimum value of
[04:24:47,199] one and a message project ID is required
[04:24:52,800] like this. And then in here when we create a new message we will also assign project ID to be input project ID. So
[04:25:00,800] each message will be stored in an individual uh agent in an individual
[04:25:06,960] project. Right? And now what we have to do is also modify the ingest send to
[04:25:12,479] also accept project ID from input project ID
[04:25:17,520] like this. There we go. And now what we have to do is we have to modify our ingest functions to accept
[04:25:27,520] the project ID. So let's go all the way down here to
[04:25:32,560] when we actually save the result. And you can see we have an error here. That's because this
[04:25:39,120] message is missing the project ID. So project ID will be input. My apologies.
[04:25:46,239] It is event. Let me just find it. Uh how do I do this? Just a second.
[04:25:54,880] Event data value. So this will be event data project ID like this and do the same
[04:26:03,279] thing here. So basically you have to make sure that anytime a message is created you add
[04:26:10,560] project ID. So you can highlight this part and use command shift F to search
[04:26:15,600] it through your entire project. And basically every place that you find this, it should include project ID. So
[04:26:22,239] just be extra careful in the functions of the ingest here so you don't forget
[04:26:28,080] to uh so you don't accidentally misspell this, right? Because there are no strict
[04:26:33,600] typings here. We can improve this later on, but for now just make sure you didn't misspell project ID when you
[04:26:40,000] extract it from event data. Perfect. And now let's also do inest dot
[04:26:47,439] send simply so we see that we are sending project ID in all places that we need. Great. So in here we are
[04:26:54,239] extracting it from the created project but in here it is from input project ID.
[04:26:59,439] Perfect. So now what we have to do is we have to go inside of source app folder
[04:27:04,960] page.tsx and we have to modify this. So this will no longer be creating messages and we no
[04:27:11,439] longer have to query messages. We only did that before because we were interested in seeing them. So we can
[04:27:16,640] remove this and instead we can do create project and this will be TRPC
[04:27:23,120] uh projects which doesn't exist. The reason it doesn't exist is because we forgot to add it. So inside of TRPC
[04:27:29,279] folder routers app add projects projects router and you can import it from
[04:27:35,760] modules projects server procedures. Basically this thing we just created.
[04:27:41,680] And now that we have that we have a proper working projects create we can remove uh on success and instead we can
[04:27:49,199] add on error here and you can do toast error error dot
[04:27:55,920] message like that. And now that we have the create project
[04:28:02,479] let's go ahead uh and let's do create project is pending and create project domutate. And
[04:28:10,080] this will be submit like this. And let's go ahead and just
[04:28:16,560] modify this slightly by adding height screen with screen flex item center and
[04:28:23,600] justify center. And inside of here, let's do
[04:28:28,880] this. Let's give this a class name. Maximum
[04:28:33,920] width 7 XL MX auto flex item center.
[04:28:40,080] Let's do flex call and gap Y for an
[04:28:46,319] items and justify center.
[04:28:51,600] And now when I refresh this, there we go. It looks like a centered little prompt. We can maybe expand this. Let's
[04:28:59,760] see. maximum width. Okay. Uh screen
[04:29:08,080] let's just keep it at 7 XL like this. And when you write test now and click
[04:29:13,520] submit uh it should say well nothing nothing for the success message. But now
[04:29:19,359] what should happen is the following. It should create well I have no idea what it's going to create now because I just
[04:29:26,000] typed test. So let's actually see. Okay, so the it returns the error. Something
[04:29:32,640] went wrong. Please try again. Right? Even though it generated something in the sandbox, I have no idea what that
[04:29:37,680] is. I think not a single file was modified yet. So it's just an empty Nex.js page. But if you look at your
[04:29:43,520] Prisma Studio now, and if you actually start it, so let's do npx Prisma Studio.
[04:29:50,239] You should now have a project. And inside of that project, you should have
[04:29:56,640] There we go. I have a name uninterested plastic. So a new project was generated and I have two messages inside. The
[04:30:03,359] first is the message from the user who asked test and then a response from the
[04:30:08,880] assistant which is a type of error because something went wrong because this is clearly not something the AI can
[04:30:14,239] generate. Right? So let's try build a landing page and let's click submit. And
[04:30:20,640] what should happen now in the Prisma Studio here uh this one is that we should have a new
[04:30:27,279] project now modern London with one message. As you can see let's just
[04:30:33,120] refresh. There we go. So build a landing page by user. We are running this and
[04:30:39,359] now we should have a successful example and all the messages for this project
[04:30:44,560] will be stored in that project. So you can see how our submit data was a project ID and the value build a landing
[04:30:51,760] page. So there we go. Now when I refresh this again,
[04:30:57,439] I should get another message from the assistant with the task summary. And this message also has a
[04:31:04,880] proper fragment. And inside of here we should be able to see let's open in new
[04:31:11,199] tab this fragment. And in here I have the sandbox URL. And I should now see
[04:31:17,439] the landing page. There we go. Perfect. So now that we have this uh let's go
[04:31:23,040] ahead and just do one more thing so we can start building the UI for these messages. So let's go inside of source
[04:31:30,000] app folder. Let's create a new folder called projects and in here open project
[04:31:36,239] ID. So this is basically a dynamic URL part. Uh it's important how you write
[04:31:42,319] this. So curly brackets uh square brackets are extremely important. And then how you type inside is exactly how
[04:31:49,840] you're going to extract this value. So be mindful of casing. Right
[04:31:55,199] now add page.tsx here and export uh do a page export like this
[04:32:03,840] and a div like this. And this will be project ID. And then to extract the
[04:32:09,120] project ID, you simply create an interface props with params which are a
[04:32:14,560] type of promise. And inside project ID which is a type of
[04:32:19,600] string. And then in here you can extract the props. You can extract the params.
[04:32:26,319] And since this is a server component, you can make this an asynchronous component and extract the project ID
[04:32:32,800] from await params. And then you can set the project ID to
[04:32:38,560] be project ID. As simple as this. So how do I know that it is project ID? How do
[04:32:43,600] I know it's not project ID 1 2 3? Because of how we named the folder. So
[04:32:49,520] if you name this with a lowercase letter I, then you need to change this to
[04:32:54,880] lowerase letter I. So be mindful of how you name this dynamic folder. And once
[04:33:00,880] you've done that, go back to your page here and go ahead and add router from
[04:33:06,400] use router from next navigation like this. And then add the on success
[04:33:13,119] here which I'm going to transform into an arrow function simply because I prefer
[04:33:19,600] them. No other reason. We only need the data here. And let's do router.push
[04:33:25,840] forward slash projects and then data id. So how come that we have the data ID
[04:33:31,920] available for us? Because in the create procedure, we return the created project. So this
[04:33:39,760] new project that was just created, we have its ID right here. So now if I do
[04:33:46,240] build a blue landing page and click submit right here, there we go. I'm
[04:33:51,600] redirected to project ID and that new project. And now in here I will load
[04:33:57,039] only the messages for that project. So in the next chapter we will go inside of
[04:34:02,959] our modules messages procedures and we will modify the get many to accept a
[04:34:09,279] specific project ID and then query by project ID instead of loading all of them. But that is for the next chapter.
[04:34:17,359] Amazing amazing job. So you just added project schema. uh in our uh entire
[04:34:23,680] application we will have one more model in the database but this is pretty much it. Amazing. So we added the project
[04:34:31,359] schema message relations new project on user prompt and we preserve the project ID in background jobs. Now let's go
[04:34:38,959] ahead and commit this. So I'm going to open a new branch
[04:34:44,719] 09 projects. I'm going to stage all of my changes. 09
[04:34:51,039] projects. And I'm going to click commit. And let's go ahead and publish the
[04:34:57,439] branch. And then let's go ahead and open a pull request.
[04:35:03,680] Just like that. And let's see the summary of this chapter.
[04:35:10,000] And here we have the code rabbit summary. We introduced support for projects allowing users to create and
[04:35:16,240] view projects each with an associated initial message. We also added a dedicated project page displaying the
[04:35:22,719] project ID for now. This will later be the actual interface where you will chat
[04:35:27,760] with an AI and see the preview of your work. And in here we have a couple of uh
[04:35:33,920] recommended changes. So in here it recommends throwing an error in the background job if it cannot find the
[04:35:40,561] project ID. And this is definitely the a good idea. But I would rather we don't even invoke a background job if we don't
[04:35:48,320] have a project ID because where do we even save this message then right so we
[04:35:53,760] have to think of a different way to improve this but a good suggestion nevertheless
[04:35:59,359] and another suggestion regarding the migration since this is just you know development migration I really don't uh
[04:36:06,561] care about this one since it's not really dangerous for our use case. So, I'm going to merge this pull request.
[04:36:13,119] And that marks the end of this chapter. As always, make sure you go back to your main branch and make sure you click on
[04:36:19,760] synchronize changes. So, you pull that new merge. And once that is done, you can go inside of your source control
[04:36:26,080] button here, go inside of graph, and you should see that we just merged projects.
[04:36:31,760] Amazing. See you in the next chapter.
[04:36:36,000] 
[04:36:36,799] In this chapter, we're going to develop the messages UI. This will include
[04:36:42,000] creating the project view, the messages container, message card, and the message form components. And for the API
[04:36:49,359] changes, we're going to have to slightly modify the get many procedures of our messages. So before we do that, let's go
[04:36:57,119] ahead and ensure that we are on the main branch. And you can click synchronize changes just to make sure everything is
[04:37:02,561] up to date. And in your source control, your last merge should be 09 projects.
[04:37:08,959] So I'm going to go ahead and go inside of source inside of modules messages
[04:37:15,039] procedures. And in the get menu, let's add the ability to add a project ID. So I'm just
[04:37:22,160] going to copy the input from the below create procedure. And I'm going to add it here. And I'm going to delete the
[04:37:28,480] value because it's not required here. only project ID is required. And once we
[04:37:34,400] have the project ID, we can extend this to add a where. And let's go ahead and
[04:37:39,600] add project ID to be input project ID. Now let's go ahead and actually
[04:37:46,240] dstructure the input from here so we can use it properly. Just like this.
[04:37:51,439] Perfect. So now we can load messages for an individual project. Let's go ahead
[04:37:56,799] and let's do that. So now I'm going to go inside of source app
[04:38:02,959] projects project ID page.tsx and since this is a server component
[04:38:09,680] what we are going to do is we're going to leverage prefetching. So I'm going to go ahead and do const query client
[04:38:18,561] and I will do await get query client from the RPC server and this is not a
[04:38:26,959] promise. So we don't need a weight here. You can usually see that if you type an
[04:38:32,799] await on something that does not need a weight, you will see little three dots
[04:38:38,000] here which will tell you that it has no effect on this. But you can also see that when hovering on something, you
[04:38:43,920] will see that there is no promise wrapping this. For example, when I hover over params, you can see that there's a
[04:38:50,480] promise of wrapping this. So a weight makes sense, right? in here. Nothing would happen if I used await, but we
[04:38:57,840] don't have to use await. And let's now add a void TRPC, which you can import
[04:39:03,439] from the TRPC server. Same same as get query client. And let's go ahead and
[04:39:08,561] actually do void query client. Prefetch query tRPC
[04:39:14,240] dot messages get many query options and pass in the project ID which we
[04:39:22,000] structure from right here. Perfect. So now what I want to do is I
[04:39:27,199] also want to add inside of my modules projects server procedures
[04:39:33,279] I want to add a get one
[04:39:38,718] like this and I want to add an input here and I want to call this ID ZR
[04:39:47,120] with a minimum value of one and a message ID is required.
[04:39:53,360] So should you call this ID or should you call this uh project ID? Well, since
[04:40:00,240] this is regarding fetching a single project, in my opinion, it is kind of redundant to call the property project
[04:40:07,680] ID here. Uh and let me just see what I did incorrectly here. So this is not how
[04:40:12,958] you open this. You should add Z.Object and then wrap this in parenthesis like
[04:40:18,878] this. This is the input. And then in here you can go ahead and import uh
[04:40:24,560] extract this input and you would find existing project here to be await prisma
[04:40:30,798] project find unique like this and you would just do where
[04:40:40,798] ID is equal to input ID and then go ahead and return the
[04:40:46,560] existing project and you can add if there is no existing project throw new TRPC error which you can import from
[04:40:54,240] TRPC server and the cool thing about this is that you have strictly typed
[04:41:00,320] codes. So in this case this would be not found and then we can specify our
[04:41:05,440] message which can be project not found. Great. So now we have a procedure to
[04:41:12,878] fetch an individual project by its unique ID. So we can leverage the find
[04:41:17,920] unique which uses the index ID. Now let's go back inside of the page
[04:41:23,280] here and let's also prefetch for that. So TRPC projects get one and instead of
[04:41:31,920] ID uh instead of project ID we are using the ID field because just think of it
[04:41:37,760] when we are fetching messages it makes sense that the prop is project ID because it's referring to an entirely
[04:41:44,160] new entity. But when we are fetching projects, we already know that ID is referring to the project ID. That's why
[04:41:51,520] in my case, it makes no sense to call this project ID. We already know it's a
[04:41:57,120] project. At least that's kind of my idea of naming a convention here. In here, basically, we are doing this just in
[04:42:03,760] case you were confused. But yeah, you can do a shorthand operator if the key and the value are named the same. So now
[04:42:11,120] we are prefetching these two which means that we can now create our project view component. So I'm going to do that by
[04:42:18,560] going inside of modules projects and I will create a new folder called UI.
[04:42:25,280] And inside of here I will create views.
[04:42:30,718] And then inside of here I will create project- view.tsx.
[04:42:36,638] And I will mark this as use client. And I will export const project view.
[04:42:42,798] And in here I will create an interface props project ID. And I will call this a
[04:42:49,840] string. In here you could also technically use ID since we know what
[04:42:55,600] it's referring to but I originally built the project using this. So I just don't want to alter the source code.
[04:43:03,200] And now in here we are going to rely on getting the data from use suspense query
[04:43:09,600] and from using const tpc usepc
[04:43:15,120] like this trpc dot projects
[04:43:20,400] and here I have it get one query options and
[04:43:25,840] pass in the ID to be project ID and let's go ahead and remap this to project. Then let's copy this and let's
[04:43:33,120] change this to messages get many and this will use the project id key and we
[04:43:40,160] are going to remap this to messages and now in here we can return a div
[04:43:46,878] project JSON stringify project and then below JSON stringify messages null too
[04:43:57,760] just like that just make sure you've marked this as use client And now inside of the page here what you
[04:44:03,680] can do is you can change this to be hydration boundary which you can import from tanstack react query. You can pass
[04:44:10,560] the state here to be dehydrate again from tanstack react query and simply
[04:44:16,240] pass in the query client. Then inside of here render the project
[04:44:21,280] view component and pass in the project ID to be project ID. Just like that. And
[04:44:28,560] there actually is another reason why I don't want to use ID here. Simply because ID is reserved for u HTML
[04:44:36,320] elements, right? You often see things like form ID and then something. So
[04:44:42,160] because of that, I want to explicitly use project ID here. And let's go ahead and wrap this inside of suspense, which
[04:44:49,760] you can import from React. And let's give it a fall back
[04:44:55,840] of loading like this. There we go.
[04:45:01,680] Perfect. So now if you have your app running and
[04:45:06,958] if you go to localhost 3000 and if you create a new project here,
[04:45:12,560] build a yellow landing page and click submit.
[04:45:18,400] The project ID was just loading for a second. And as you can see the first thing we have is for me it's freezing
[04:45:25,280] tent that's the random name that we generated and then immediately below that I mean after that we can see an
[04:45:31,600] array of messages. The first one is build a yellow landing page by the user and in a couple of seconds we will get
[04:45:38,400] another message which will basically be the response. And here we have it the task summary. It created a landing page
[04:45:44,878] blah blah blah. Perfect. So this works just fine and it leverages pre-fetching in the server components. Just be
[04:45:51,040] careful that your query options are exactly the same in the prefetch as they are in the use suspense query. So they
[04:45:57,040] need to be identical. So make sure you didn't accidentally mess them up.
[04:46:03,040] Now I'm going to add some resizable panels inside of this project view. You already have this installed when we
[04:46:09,680] added all Shatsen components. So you can import all of these from components UI
[04:46:16,320] resizable. So you can control-click to confirm that you have it. It is inside of source components UI resizable. And
[04:46:24,000] now let's go ahead and actually build uh our resizable panels. So I'm going to
[04:46:29,280] give this div here a class name of height screen. I'm then going to add a
[04:46:34,798] resizable not handle panel group. And I'm going to wrap these two elements
[04:46:41,440] inside. I will give this a direction of
[04:46:46,560] horizontal and I will then add a resizable panel.
[04:46:53,360] And let's go ahead and wrap the project in one resizable panel and then another
[04:46:59,200] one for the messages like this. Let's go ahead and give this one a default. Let's
[04:47:05,360] actually collapse this. Default size will be 35. Minimum size will be 20. And
[04:47:12,000] let's give it a class name of flex flex column and the minimum height of zero.
[04:47:18,080] And now let's go ahead uh and let's do the following. In between these two
[04:47:23,920] resizable panels add a resizable handle and add width handle
[04:47:30,798] like this. And for this resizable panel, give it a default size of 65 and a
[04:47:39,680] minimum size of 50 like this. So now you
[04:47:45,120] should have this type of resizable panel and you can already see how this is going to look. In here we're going to have our messages and in here we will
[04:47:52,320] have the project preview. Right now it is the opposite but you know it's I just wanted to use it as an example. So
[04:47:58,560] that's how we're going to do that. And by default, you can see it has what I think is a kind of fair ratio. This size
[04:48:05,040] for messages, this side for the preview. You can of course change the default size to whatever you like. Uh but you
[04:48:13,040] know just make uh the the the total number of these two panels needs to add up to 100. So you know just make sure
[04:48:19,360] you are using the proper calculations. Great. So now that we have this, let's go ahead and let's develop this side of
[04:48:27,600] the resizable panel. So I'm just going to change this to be to-do preview.
[04:48:33,920] And this here will be our messages container.
[04:48:40,638] So right now we have an error because messages container does not exist yet. So now let's go ahead and do the
[04:48:46,400] following. I'm going to still stay inside of projects, inside of UI, and I
[04:48:52,080] will create components. Now, you're probably wondering why am I creating a
[04:48:57,200] message container, messages container.tsx inside of the projects module when I
[04:49:03,920] clearly have the messages module right here. Well, it's not the name that
[04:49:10,000] decides where you put something in module-based architecture. It is its purpose. And this specific messages
[04:49:17,120] container purpose will only be used inside of the project ID page. Right? So
[04:49:24,080] this project's project ID page is obviously the project module. So just
[04:49:29,600] because we are rendering a component called messages here messages container doesn't mean that it belongs in the
[04:49:36,400] message uh module, right? but something that's re reusable like the message API
[04:49:43,040] that belongs in the message uh module but messages container is just a
[04:49:48,638] container to render messages in the project so that's why this is the place
[04:49:54,718] I'm putting it in the name doesn't matter I can call this project message
[04:49:59,920] container maybe that would be uh a bit more visually attractive but just to
[04:50:05,680] explain why I'm putting that here now let's go ahead and let's build the messages container. So we are actually
[04:50:12,240] going to do the following messages container and then I'm going to copy a couple of
[04:50:19,360] things specifically this because this is where I will load the messages. If you
[04:50:25,200] can, it will it will always be better to load the messages to use it to use use
[04:50:30,798] suspense query in a deeper component because the deeper component you use it
[04:50:35,840] in uh the the faster the page will load and I'm going to show you why in a
[04:50:42,638] second. So let's call this use TRPC from TRPC client like this. And in here we
[04:50:49,520] need an interface which I can just copy from the project view here.
[04:50:54,878] And let's go ahead and destructure the props and get the project ID like this.
[04:51:00,638] And now we have the messages here. So let's just return a div with JSON.stringify
[04:51:07,760] messages. There we go. And now we can import the messages container here from components
[04:51:16,320] messages container. And we can remove the suspense query for messages like
[04:51:21,440] this. and pass in the project ID here to be project ID. And now what's important
[04:51:28,958] is that you wrap this inside of suspense as well and give this a fallback of
[04:51:36,560] loading messages like this. So now the cool thing that's
[04:51:43,760] happening I don't know if you will now see this and yes uh yeah so let me try
[04:51:49,360] and demonstrate. Yeah, it's kind of hard uh to do right
[04:51:54,480] now perhaps because I don't need this. What if I comment this out? Yes, you can
[04:51:59,600] see that when you comment this out in the project view, the page loads much quicker. That is because if we are using
[04:52:07,600] a use suspense query inside of the project view, then it means that this suspense will fire and that blocks the
[04:52:15,840] entire page. You can see that while that big loading is active, let me just write loading project.
[04:52:22,718] So while this loading project text is visible, the entire page is blocked. But
[04:52:28,400] if you move the suspense in an deeper cont uh component like the message container like we just did with loading
[04:52:35,520] the messages here and wrap that inside of suspense. So let me now simulate by commenting this out. You can see that we
[04:52:43,280] are not blocking the entire view only the messages view. So that's why I told
[04:52:49,040] you that it will be faster. It's not really faster. It is just visually faster. So we are going to do the same
[04:52:55,680] thing for loading the project. So yes, for now we can actually remove this because we will not be loading the
[04:53:01,520] project uh inside of the project view. Let me just move the suspense right
[04:53:07,520] here. Perfect. So now let's go inside of the message container and let's develop it.
[04:53:14,000] I'm going to start by giving the most outer div a class name of flex flex
[04:53:19,440] column flex one and a minimum height of zero. I'm then going to add another div
[04:53:26,160] with a class name flex one minimum height of zero and overflow y auto. And
[04:53:32,958] then inside of here another div with a class name padding top padding top two
[04:53:39,440] and padding right of one. And then finally inside of here I will go over my messages. I will get the individual
[04:53:46,480] message here and I will render a new component. So in here we're going to
[04:53:52,480] render message card component and you can remove the JSON stringify here. Now
[04:53:57,600] let's give this a key of message do ID. Let's give it content of message.content
[04:54:04,160] roll of message roll fragment of message
[04:54:09,760] fragment. And now we have a problem. Fragment is not loaded here. So let's go ahead and fix that by going inside of
[04:54:16,480] messages get many procedure. It's inside of uh modules messages server procedures. And simply do what we did in
[04:54:23,840] the previous chapter. Add include. Make sure you're doing this instead of get many. add include fragment true like
[04:54:32,320] this. And now let's go back inside of the messages container here. And as you can
[04:54:38,958] see now we no longer have that problem. Right? So now message fragment exists.
[04:54:44,320] Let's add created at here to be message.created at
[04:54:49,760] just is active fragment for now to be hardcoded to false. on fragment click
[04:54:57,440] will be an empty arrow function and the type will be message.ype.
[04:55:03,280] Now let's go ahead inside of the components and create the message card. Again we are doing this inside of the
[04:55:10,638] projects module because even though these components are called message they relate more to the product to the
[04:55:17,040] project entity than they do to the message entity. And inside of the message card component, we are now uh
[04:55:23,680] going to do this the uh the following. First, let's create the props content
[04:55:29,200] which is a string roll which is a type of message roll. You can import from at
[04:55:34,638] generated Prisma. So this is the generated folder of Prisma which you can find in your source folder. And you can
[04:55:41,680] see that you don't really touch this folder, right? You don't modify this folder because it is automatically
[04:55:48,080] generated every time you do npx prisma generate or npx prisma migrate dev which
[04:55:55,440] in background runs npx prisma generate right you can always do npx prisma
[04:56:01,680] generate yourself this will simply update the entire prisma right so in
[04:56:06,958] case yours didn't exist now it will exist so message ro was directly
[04:56:12,160] generated from our schema message role. So if yours is called something else,
[04:56:18,080] you're going to have to import something else. Same thing for fragment from message here. And same thing for message
[04:56:24,638] type. So basically content ro fragment which can be null created at is active
[04:56:31,040] fragment which is a boolean on fragment click which accepts the fragment as the value and type which is a message type.
[04:56:37,680] Now, let's go ahead and let's export the message card here and let's assign all
[04:56:43,040] of those props from above and let's dstructure them all here.
[04:56:49,200] Perfect. Now, inside of this, let's go ahead and do the following. If roll is
[04:56:54,320] equal to assistant, we're going to return a paragraph assistant.
[04:57:01,360] Otherwise, we are going to return a paragraph user. And let me just fix my
[04:57:08,320] uh typo here. So we have this uh I don't think I need this. There we go.
[04:57:15,520] Like this. And it's okay that all of these things are unused. Now let's go back to the messages container and import message card from dot / message
[04:57:23,360] card. Let me just separate my imports here. No need for use client in this component simply because the uh project
[04:57:31,520] view where it's rendered is already use client. So its children will be as well.
[04:57:37,040] And as you can see I have two messages. The first one is from the assistant and the other one is from the user. And I
[04:57:44,320] think that in this case we would actually need the opposite to happen. So let's go inside of the messages
[04:57:50,400] container. Go inside of messages get many and change the order by to be ascending. So the first one should be
[04:57:57,440] from the user and the second one should be from the assistant. All right. Now, let's go inside of the message card and
[04:58:04,320] let's actually develop this. So, let's do the user one first because I believe it is a little bit easier. So, we're
[04:58:10,638] going to do user message here and it will have one prop which is content. So,
[04:58:17,360] let's pass in content here. And we're going to develop this uh just above this
[04:58:24,718] con user message. And let's create an interface uses me
[04:58:30,160] user message props like this. And then just extract the props here. It's just
[04:58:36,080] content. And in here return a div with a class name flex justify and padding
[04:58:43,200] bottom of four PR of 2 PL of 10. And in here add a card from components UI card.
[04:58:52,320] You already have this as well. It comes with chat UI. You can find it in source
[04:58:57,600] components UI card. Now inside of the card render the content and give the
[04:59:04,560] card a class name of rounded large background muted padding three shadow
[04:59:11,360] none border none maximum width of 80% and break words
[04:59:19,120] like this. So the user message will be rendered every time the user sends a
[04:59:26,480] message and we should be able to see that now. Build a yellow landing page. That was my first message and you can
[04:59:32,878] see how my message is moved into this corner. We are now going to render the assistant output. So in order to do that
[04:59:40,240] we will render the assistant message like this.
[04:59:48,560] assistant message and the assistant will have uh some different props. So we're
[04:59:56,400] going to pass the content to be content fragment to be fragment.
[05:00:01,920] It will have created at it will have is active fragment
[05:00:09,360] and it will have on fragment click and it will have a type. Basically all
[05:00:16,798] the other props are related to the assistant message. So now let's go uh
[05:00:22,560] below the user message. Let's create an interface assistant message. And in here
[05:00:28,000] we can just add all of those props. Content fragment which can be a type of fragment or null created at which is
[05:00:34,560] date is active fragment which is boolean on fragment click and type. I'm not sure
[05:00:40,080] but maybe these are identical to message card props. Uh it doesn't have roll. So yeah, one
[05:00:46,400] less prop. I'm not sure if this is the best way to do this, but you know, I think it's fine. Now, let's go ahead and
[05:00:52,798] actually do const assistant message like this. Let's destructure assistant
[05:01:00,480] message props. Oops. Yeah, I should call this props. Yes, like this. And then inside, let's
[05:01:07,040] just add all of those things. Content fragment created at is active on
[05:01:13,200] fragment. Click enter and type. And inside of here, we are going to do
[05:01:18,718] the following. Let's add a div with a dynamic class name, which means open curly brackets and import CN from lib
[05:01:26,480] utils. If you don't remember this, but we got this when we installed shot cnui.
[05:01:31,520] And I told you we are going to use this when we need some dynamic classes and this is the first time we need that. So
[05:01:38,160] the way you use this library is very simple. You open it up as a function. It can accept an infinite number of
[05:01:44,638] parameters. So the first parameter, the second parameter, the third, infinite
[05:01:49,680] number. What I like to do is I like to reserve the first one for my static class names.
[05:01:56,638] So flex flex column group ex 2 and padding bottom of four. And then in the
[05:02:03,040] second argument, I like to do dynamic ones. If type is equal to error, I'm
[05:02:09,920] going to render it differently. I'm going to render text red 700 and on dark
[05:02:16,080] mode text red 500 like this. And then inside of here I'm going to add a div
[05:02:23,120] with a class name of flex item center gap 2 pl 2
[05:02:30,638] and margin bottom of two. Now I'm going to add to-do add logo because we don't
[05:02:36,320] have it yet. And I'm going to add an image component here. Uh actually we can
[05:02:41,360] do that only when we have the logo. So let's add a span for now and our app name. In my case this will be vibe text
[05:02:49,280] small and font medium like this. Then copy this span and in
[05:02:56,878] here you're going to need to install npm install date fns. This will be used to
[05:03:03,360] parse dates. And let me show you my package json date fns 4.1.0. zero.
[05:03:10,160] And I'm going to import something from date FNS. So import format
[05:03:18,560] from date FNS like this. And inside of here, I'm going to format
[05:03:26,718] created at like this. And I will format in this format
[05:03:37,600] like this. And then I'm going to slightly modify this to be text extra small and text
[05:03:45,440] muted foreground. And then then I'm going to give it an opacity of zero. And
[05:03:51,280] I'm going to give it transition opacity. And since I have given this outer parent
[05:03:58,718] div a group class name, I can leverage that by doing the following. I can do
[05:04:04,560] group colon my apologies group dash hover. So when the group is hovered,
[05:04:10,798] change the opacity to 100 like this. And that's how I'm going to make this appear
[05:04:17,440] when we hover on the parent element. Perfect. And then outside of this div,
[05:04:24,000] let's go ahead and let's actually render the content. So div class name pl 8.5
[05:04:31,040] flex plex column and gap y of four. And inside of here, a span with content
[05:04:38,638] inside. And let's go ahead and make sure we are using the assistant message. We are perfect. And there we go. You can
[05:04:45,200] see build a yellow landing page. And then vibe answers at this time which only appears when I hover
[05:04:52,878] with a task summary like this. Perfect. So now let's go ahead and continue uh
[05:05:00,320] developing this uh and let me just see.
[05:05:05,920] So in here we have flex item center gap 2 PL2 margin bottom of two. Okay. I
[05:05:13,360] think I think this is okay. I am just this this spacing seems a little bit odd. I'm
[05:05:21,120] not sure this is how it's supposed to be. But yeah, go ahead and try and collapse your page a bit. It should work
[05:05:26,400] fine. It should normally break words. It shouldn't add any scroll bars except the
[05:05:32,718] the the one from up down, right? That one should appear, but no one on the x-axis should not happen. Uh great. So
[05:05:40,080] now let's go ahead and let's obtain our app logo. So head to the assets page. You can see
[05:05:47,280] the link on the screen or you can use the link in the description. And in here you can find logo.svg.
[05:05:54,560] I found this logo from logo Ipsum. So these are amazing placeholder logos you
[05:06:00,878] can use for your projects. Uh and I use them in pretty much every project. They are amazing. So I slightly modify them
[05:06:08,480] to match the color scheme of the project. You can download them or you can copy the SVG since the code is in
[05:06:14,878] SVG and you can then go inside of your project and what I like to do is go inside of public create a new logo. SVG
[05:06:22,638] here and then I click this open file using VS Code standard text binary and I
[05:06:29,120] paste it inside and save it and that creates the logo or you can just download it as a file normally without
[05:06:35,120] all that trouble. So now let's go ahead and let's add our logo to our message
[05:06:41,120] card. Specifically in the assistant message, I added a to-do here. Now let's add an image here from next image. So
[05:06:49,120] make sure you have added this import here. And then we're going to add the
[05:06:54,958] following. Source will be forward/lo.svg. Alt will be vibe. Width will be 18.
[05:07:04,000] Height will be 18. and class name will be shrink
[05:07:09,040] zero. And let's go ahead and try again. And there we go. So now this space makes
[05:07:14,080] more sense because the logo perfectly pushes the text to be aligned with the
[05:07:20,320] content right here. Amazing. And don't worry about this task summary tag. We
[05:07:25,440] will get rid of that later uh using something else. But this is basically how our chat will look like. And if
[05:07:32,798] you're wondering, the colors don't look exactly as your demo, don't worry. We're going to change the entire theme of the
[05:07:38,718] project later. But this is what I wanted to achieve. So now what I want to do is
[05:07:44,320] I also want to add a little uh message on the bottom here. I mean a little form
[05:07:51,440] on the bottom. Uh but just before I do that, I also want to create a fragment
[05:07:57,360] component. So after we render the span content, let's check if we have the
[05:08:02,400] fragment and if type is equal to result only then are we going to render the
[05:08:09,440] fragment card. The fragment card will accept three props. The fragment itself
[05:08:16,798] is active fragment and on fragment click. And we can create the fragment
[05:08:23,440] just above here. So first the props fragment card props fragment is active
[05:08:31,360] fragment and on fragment click and then the fragment card component. So let's
[05:08:37,680] just use the props and extract them here. And then inside of here we're going to
[05:08:43,520] return a button but a normal HTML button like this. We're going to give it a
[05:08:50,400] dynamic class name using the CN library. In the first argument I will add flex
[05:08:57,440] items start text start gap two border
[05:09:04,480] rounded large background muted width fit
[05:09:10,798] padding three hover bg secondary and
[05:09:16,000] transition colors and then I'm going to check if is active
[05:09:21,760] fragment And I will do the following background primary text primary
[05:09:29,520] foreground border primary and hover bg
[05:09:34,560] primary like this. And on click here I will call on fragment click and pass the
[05:09:41,680] fragment as the prop. Inside of the button itself I will add
[05:09:46,878] code to icon. So from lucid react, let me just fix
[05:09:54,080] this uh invalid fragment end here. I don't need this. There we go. The code
[05:10:00,160] to icon will have a class name of size four and margin top of.5.
[05:10:08,240] I will then open a div with a class name flex, flex column and flex one. And
[05:10:15,760] inside of here I will have a span which will render the fragment title. and the class name text small font
[05:10:23,760] medium and line clamp one. Below this another span with a class name of text
[05:10:31,600] small and the text preview. I think we should already start to see
[05:10:38,000] this because this message from the AI assistant has the fragment and it is not
[05:10:43,440] an error. So we can see it right here. Make sure that you are doing this on a
[05:10:48,480] successful response. So you have the fragment generated in your database. If you are unsure, if you still can't see
[05:10:54,798] it, npx Prisma studio to show you what I'm talking about. So your message,
[05:11:00,400] whatever one you're doing should have a fragment. You can see how
[05:11:05,440] some of my messages don't have fragments because they are by user or they are errors. But the ones that are successful
[05:11:12,000] have a fragment, right? So that's what you need to do. You basically need to create uh a background job with a
[05:11:18,638] successful generation, something that has a fragment. So now after the preview
[05:11:24,958] here, outside of this div, I'm going to add another div with a chevron write
[05:11:30,320] icon from lucid react with a class name of size 4. So the same import place as
[05:11:37,040] code to icon. And let's go ahead and give this a class name. flex items
[05:11:43,280] center justify center and margin top of 0.5.
[05:11:49,040] And I think that marks the end of the message card component. I think we have everything we need. Now the only thing I
[05:11:56,320] don't like is that this doesn't have the pointer cursor. It doesn't look
[05:12:01,760] clickable. But you don't have to fix that by adding the pointer to uh this
[05:12:07,840] because this is already a button. So what we're going to do is we are going to change the global CSS so that it
[05:12:13,760] shows the pointer when this is hovered like this. I mean not this one but you
[05:12:18,878] you get the idea right. Perfect. So now what we can do is we can create the form
[05:12:24,160] here at the bottom and that will uh complete the message container.
[05:12:29,760] So let's go ahead and go inside of the components and let's create the message
[05:12:35,760] dash form.tsx. So this will be rendered at the bottom
[05:12:42,560] of the message container. Let's go ahead and just copy the props from the
[05:12:48,400] previous components and let's export message form
[05:12:55,040] inside of here. Go ahead and assign the props and destructure the project ID and
[05:13:01,360] return a div message form. And now let's go inside of the messages container. And
[05:13:08,560] now we have to render this. So I'm going to render it uh after the last div here.
[05:13:14,798] I'm going to open a new one with a class name relative padding 3 pt1.
[05:13:21,920] And then I'm going to add message form and I'm going to pass in the project ID.
[05:13:28,160] Project ID like this. So make sure you have added this import. And now at the bottom you
[05:13:34,798] will see message form. In order to complete the message form
[05:13:40,560] component, we're going to have to install a new package
[05:13:45,760] react text area autosize. So go ahead and install this. And I'm going to show
[05:13:51,280] you the version. So, package JSON 8.5.9.
[05:13:57,520] That is my version. And now, let's go inside of the message form. And we're going to need a couple of things from
[05:14:04,798] React hook form. So, use form. And then, we're going to need Zod resolver from
[05:14:10,240] hook form resolvers zod. And if you're worried where do these packages come from, we already have them. cook form
[05:14:18,638] and form react cook form. So all of this already exist and they came with chatnui
[05:14:25,600] when we added all components and the new one is this one text area auto size from
[05:14:31,280] react text area auto size and besides this let's just see uh what else
[05:14:40,480] do we need let's also add use state from react like this let's also add zod
[05:14:50,160] and let's add post from sonner and let's also add some icons. So that's going to
[05:14:56,560] be arrow up icon and loader two icon from lucid react and from tanstack query
[05:15:01,920] we need use mutation use query and use query client from tanstack react query
[05:15:07,840] then let's add cn from lib utils use trpc from at tpc client the button
[05:15:15,680] component and form and form field from components UI form this is another shhatsenui
[05:15:22,638] component and when you installed that which you did using the d-all command.
[05:15:28,000] You also got use form and you got the zod resolver and also zod. And that is
[05:15:34,798] it for now. So now let's define form schema here to be z.object. And
[05:15:43,040] what you should actually do is you should visit one of your procedures in messages specifically find the create
[05:15:50,400] procedure and you should copy the value from here. So you have the limit right?
[05:15:57,040] So like this. Now how you're going to call this value
[05:16:03,120] string um I really don't know. So you can do value you can do content whatever you want. And let's go ahead and do the
[05:16:10,958] following now that we have this form schema. Con form use form pass in
[05:16:16,320] Z.infer infer type of form schema like this and add resolver here to be zod
[05:16:24,320] resolver and pass in the form schema object and the default values will set
[05:16:29,600] the value to be an empty string by default. Great. Now that we have the form, let's
[05:16:35,360] build the UI. So the outer div will be the form element from here from
[05:16:42,718] components UI form and we have to pass the entire object that we created here
[05:16:49,760] using use form and then inside we need a native HTML form element like this and
[05:16:57,920] in here we need the following. We need onsubmit to be form handle submit and
[05:17:03,840] then we have to create a custom submit form. So const onsubmit here we'll
[05:17:10,320] accept the values which are basically this. So you can copy this from above
[05:17:16,080] and for now just console log the values. The reason we are doing this infer is
[05:17:22,560] because when you hover over you can see that it is exactly what you define here.
[05:17:27,920] So now use that onsubmit and pass it here. So now this onsubmit will only
[05:17:33,120] trigger this which will actually initialize the network call when the validation passes. So that's why we are
[05:17:40,638] wrapping it inside of here. Perfect. And now let's go ahead and do a class name
[05:17:46,718] here. CN relative border
[05:17:53,440] padding four padding top one rounded extra large background sidebar dark bg
[05:18:01,600] sidebar and transition all like this and then if is focused
[05:18:09,440] which doesn't exist yet we were going to do shadow extra small and for show usage
[05:18:16,400] we are going to do a rounded top none. So now let's go ahead and just quickly
[05:18:21,760] uh fix these things. So for is focused it is an easy fix. All we are going to do is add a new use state here with is
[05:18:29,840] focused and set is focused with the default value of false from use state react. And for the show usage I'm going
[05:18:38,718] to manually set it to false for now. So now you should have no errors here. And
[05:18:45,040] periodically you can check on this just to see how it looks. Great. Now that we have this, let's go ahead and add the
[05:18:52,718] form field component which is a self-closing tag. Just make sure you have imported it. Give this a control of
[05:19:01,200] form. Give it a name of content and give it a
[05:19:06,400] render of field like this. And inside use the text area
[05:19:12,400] auto size self-closing component. In here you can immediately spread everything you have from the field
[05:19:18,958] above. And then go ahead and give it the following and give it an onfocus and on
[05:19:24,798] blur to modify the set is focused state like this. And the name should be value.
[05:19:31,280] My apologies. So already when you hover over this, I'm not sure if you can notice, but that's there's an ever so
[05:19:38,160] slight shadow change to the entire object. Now we have to fix this so it
[05:19:43,760] doesn't look so weird. So let's go ahead and give this a minimum rows of two and
[05:19:49,440] a maximum rows of eight. And then a class name. Adding top four bore. Resize
[05:19:56,798] none. Border none. Width full. Outline
[05:20:02,560] none. Background transparent. And a placeholder of what would you like
[05:20:09,440] to build? And then let's go ahead and do
[05:20:14,798] on key down. get the event and check if event key is
[05:20:20,798] equal to enter and open parenthesis. We are also
[05:20:26,560] holding control key or meta key. So this
[05:20:31,760] will basically be control enter. We prevent the default and we do form
[05:20:37,440] handle submit onsubmit oops onsubmit and pass the event as
[05:20:43,840] well. So the onsubmit is this just like that. So now uh outside of
[05:20:52,958] this which is form field I believe. Yes outside of form field but still inside
[05:20:58,240] of the form let's go ahead and do the following. Let's add a div
[05:21:04,480] with a class name flex gap x2 items end
[05:21:10,240] justify between padding top of two. Then another div with a class name text
[05:21:18,638] 10 pixels text muted foreground and font
[05:21:24,000] mono. And just write test here simply so you see where that is. So it's right
[05:21:29,360] here at the bottom. So this will now be the following. It will be a uh keyboard
[05:21:36,638] sign. I think this is for keyboard. The the short name for keyboard. Uh render a
[05:21:42,638] span inside and render the following sign like this and then enter. And that will
[05:21:51,120] turn uh like this. The command sign and enter.
[05:21:57,040] Now let's style it. The class name will be ML auto pointer events none inline flex height five
[05:22:07,360] select none items center gap one rounded
[05:22:13,840] just rounded border background color muted px 1.5 font mono text 10 pixels
[05:22:24,560] font medium and text muted foreground ground and then let's go ahead outside
[05:22:31,520] of the KBD and let's do NBSP
[05:22:36,878] to submit. So basically command enter to submit. We
[05:22:42,798] are telling the user how to submit. And now outside of this div add a button
[05:22:48,638] element. And this button element will do the following. It will render arrow up icon which we already have imported from
[05:22:56,958] Lucid React. There we go. And now we're going to style it. Give it a class name
[05:23:04,480] of CN size 8 and rounded full like this.
[05:23:12,080] There we go. This is how it's going to look like. And now we need to add some dynamic things here. So let's start by
[05:23:20,160] adding our create message mutation. So we need to add PRPC here. Use PRPC.
[05:23:31,200] And then we need to add create message from use
[05:23:36,240] mutation ERPC messages create mutation options
[05:23:42,480] like this. And then you can extract the following.
[05:23:47,840] You can then extract const is pending to be create message is
[05:23:55,280] pending. Const is disabled to be is pending or if not form form
[05:24:05,680] state is valid. So if form state is not valid like this. And let me actually
[05:24:12,000] move these two to the bottom here simply so I have all of these things in one place.
[05:24:20,320] And now that we have the create message mutation, let's go inside of the onsubmit and let's make it an
[05:24:25,520] asynchronous method. And let's do await create message dot mutate async and pass
[05:24:33,680] in the value to be data. Actually this is values. So values do value and the
[05:24:42,240] project ID like that. Perfect. And now let's use the is pending and let's use
[05:24:49,200] uh the is is disabled. So first things first to the text area auto size
[05:24:56,320] disabled if is pending like that. And then let's go ahead down
[05:25:04,638] to this button. And the button will be a little bit different. So this one will be disabled if is disabled. So be
[05:25:11,680] careful for the text area auto size. We only disabled if it's pending. So only
[05:25:17,680] if the network request is pending. But disabled will be for this. So you can do is button disabled
[05:25:25,360] just to don't so you don't make a mistake. There we go. Uh and let's also do if is button disabled background
[05:25:33,680] muted foreground and border like this. And then inside of here a turnary if is
[05:25:39,360] pending. In that case we are rendering the loader two icon which we already have imported with a class name of size
[05:25:47,360] four and animate spin. Otherwise we render the arrow up icon like this.
[05:25:55,360] There we go. So now make sure that you you know restart your server here.
[05:26:01,520] Actually I will restart the entire project as well. So, npm rundev, npx inestdev.
[05:26:08,480] I will refresh this page here and I'm going to add build a blue landing page
[05:26:15,120] and I will press command enter. And there we go. You can see that that has submitted this for a second. It was
[05:26:21,040] loading. We still have to do the cleanup function. But if I look in my inest developer server, you can see that this
[05:26:28,080] is successfully running. Amazing. And if I refresh here, I should actually see my
[05:26:34,400] new message here. Build a blue landing page. Perfect. So now let's go ahead and just add some onsuccess things to happen
[05:26:41,520] in the mutation options of the create message. Right. So what should happen after we submit? So the first thing that
[05:26:47,680] should happen is on success here once we get the data of this new message. Let's
[05:26:53,600] go ahead and let's first do form.reset like this. So make sure that form is initialized above and then let's do
[05:27:01,120] query client which uh I'm not sure do we have it we don't. So let's let me just
[05:27:06,638] add const query client to be use query client. So you have this imported from tanstack
[05:27:14,160] react query. So in here what you're going to do is queryclient.invalidate
[05:27:20,000] invalidate queries and then pass in TRPC messages get many query options
[05:27:28,320] project ID data project ID or you can
[05:27:33,760] use the project ID from here yeah maybe that's even easier to do and then you can use the shorthand operator
[05:27:41,280] that's the first thing we are going to invalidate then the second thing uh we don't have
[05:27:47,120] yet so I will add a to-do reinvalidate or invalidate uh usage status. We don't have this yet,
[05:27:54,878] but we will have it later. And now add on error here. Get the error
[05:28:01,760] and do toast dot error error dossage.
[05:28:08,080] And I will add a to-do redirect to pricing page
[05:28:15,600] if specific error. There we go. And the only thing I don't
[05:28:22,958] have left here is the use query. And I will remove it for now because we don't really have the entity we need to call.
[05:28:31,200] And I think that for now this is it. I think for now this is everything. uh we
[05:28:38,000] can do here and there we go we have a response now created a fully responsive production quality blue themed landing
[05:28:44,958] page perfect so now what I want to do is just to end this chapter one more thing here I don't like how uh the first thing
[05:28:54,080] is when I load the page you can see I have to scroll all the way down and the
[05:28:59,440] second thing is when I scroll the text visibly clips here you can see how it's cut so let's fix those two things and
[05:29:06,320] let's end the chapter. Both of these things will be in the messages container. So, make sure that you have
[05:29:12,558] some messages and you can zoom in a little so you have the scroll bar like I do.
[05:29:19,120] The first thing will be a very simple self-closing div just above the place where we render the message form inside
[05:29:25,200] of this relative div. and give it a class name of absolute
[05:29:30,718] minus top minus 6, left 0, right zero,
[05:29:37,840] height of six, background gradient to bottom
[05:29:43,040] from transparent to oops to dash background forward
[05:29:49,920] slash70 pointer events none. What this will do
[05:29:55,200] is it will create an ever so slightly white shadow. I'm not sure if you can see it, but it kind of melts the the
[05:30:03,600] overflow so it doesn't look as obvious that the text is clipping here. If you want to, you can improve this and change
[05:30:11,040] this to two background. And then you can see you can't you can't see the clipping at all. It's like it fades into some
[05:30:18,400] kind of fog, right? So just a slight effect to make this look better.
[05:30:23,760] So it doesn't clip. Now let's do the thing that when we load we scroll to the bottom here. So in order to do that we
[05:30:32,240] first have to add a bottom ref. So let's do that here. const bottom ref will be
[05:30:38,240] use ref from react with a default value of null and the type of HTML div element
[05:30:46,480] like this. Let me just move this to the top like that.
[05:30:52,958] And then what we are going to do is we are going to change this to be use
[05:31:01,840] effect
[05:31:07,120] which you can import from react
[05:31:12,160] and let's first do the following const last system or let's do last assistant
[05:31:18,958] message and do data Find last. My apologies. Messages. Find last.
[05:31:27,680] Search through the messages and find the message whose role is assistant. And
[05:31:34,240] that's how we are going to find the last message that the assistant sends. So make sure you're using the find last API
[05:31:40,320] here. And if we are able to find this last assistant message, what we are
[05:31:46,080] going to do first is we are going to set the fragment uh to that assistant
[05:31:52,558] message. Now we don't have this yet. So actually I'm not sure if we can do
[05:31:58,160] that. So let me just do to-do uh and let's do set active fragment. Right? So
[05:32:05,040] we're going to do this uh well maybe in this chapter, maybe in the future. I I will see. But let's add messages for now
[05:32:12,718] like this. And then let's go ahead and add another use effect.
[05:32:22,718] And in here we will do messages.length.
[05:32:28,320] And we're going to check if bottom ref question mark scroll into view like
[05:32:36,798] this. And let me just check. I think um that
[05:32:44,958] for now this is okay. If I do a refresh here,
[05:32:50,160] uh looks like it's not working. So So it should be scrolling me to the bottom,
[05:32:55,200] but it is not probably because I never added that. So, let's go ahead outside
[05:33:01,520] of here, add a self-closing div and give it a ref of bottom
[05:33:09,040] ref. So, now when you refresh, there we go. You can see how you scroll down
[05:33:15,040] immediately. Perfect. Um, so now,
[05:33:20,958] um, yes, I think I'm going to end the chapter here simply because it's already been an hour. So we're going to end here
[05:33:29,040] and in the next chapter we're going to wrap this up by adding is active fragment functionality. We're going to
[05:33:35,200] add some loading states while we wait for the response. And we're also going
[05:33:40,320] to add the header here so that we can click the back button to go back to the landing page and so we can uh access
[05:33:47,040] some settings here and see the project name. Great. So, we've already made some
[05:33:52,558] great progress here. And you can add something uh like this if you want to see the error state.
[05:34:01,280] And now you can see how the error state looks like when you send it something that it cannot generate. It will simply
[05:34:07,440] tell you something went wrong and it highlights the red color. Perfect. So, I'm very very satisfied with this. So,
[05:34:14,320] we've done this. We've done this, this, this, and even more than this. Now,
[05:34:19,840] let's go ahead and open a new branch and merge this. So, 10 messages UI. I'm
[05:34:26,480] going to open this. I'm going to create a new branch.
[05:34:32,240] 10 messages UI. I'm going to stage all of my changes and I will do 10 messages
[05:34:40,798] UI and I will commit and I will publish the branch. A quick reminder that there
[05:34:45,840] is a free code rabbit extension which you can use to improve your code quality. And now I'm going to go and
[05:34:53,360] open this pull request here. And we're going to review the summary of this
[05:34:58,718] chapter and everything we did. And here we have the code rabbit
[05:35:05,040] summary. We introduced a chat interface for project pages, including a message
[05:35:10,320] list, message input form, and support for assistant and user messages with styled cards.
[05:35:17,280] Added support for displaying message fragments and interactive fragment cards. We implemented a horizontally
[05:35:23,600] resizable panel layout with a dedicated area for future preview features. That is exactly what was the point and goal
[05:35:30,718] of this chapter. And may I say we did a pretty good job because no comments,
[05:35:38,240] only some nitpicking comments like we could save some time by doing project ID
[05:35:43,760] instead of project ID equals project ID. So overall amazing amazing job. In here,
[05:35:50,558] of course, we have an in-depth diagram explaining exactly how everything in
[05:35:55,920] this page happens, including pre-fetching, including invalidation, including refetching, everything.
[05:36:03,680] Amazing, amazing job. I'm going to merge this poll request. Once the poll request
[05:36:09,360] is merged, I'm going to go back inside of my IDE and I will go back to the main
[05:36:14,798] branch. After that, I'm going to synchronize my changes and I will check the source control
[05:36:22,558] and the graph so I can see that I successfully merged chapter 10. That
[05:36:28,718] marks the end of this chapter, I believe. Amazing, amazing job and see you in the next chapter.
[05:36:36,000] 
[05:36:37,120] In this chapter, we're going to continue the UI development from the last chapter. We pretty much completed the
[05:36:44,480] messages container at that point, but we do have some things missing like the fragment selection and the loading
[05:36:50,958] state. But after that, we're going to focus on the project header component, which is the component above the
[05:36:57,360] messages container, which will tell us which is the currently active project and the buttons to go back. So, let's go
[05:37:04,878] ahead and first handle the leftovers from the previous chapter. As always,
[05:37:10,160] make sure that you're on your main branch and clicked on synchronize changes just to confirm everything is up
[05:37:16,320] to date. So now what I want to do is I want to go inside of my project view
[05:37:21,760] inside of projects UI views project view. And in here, let's go ahead and
[05:37:27,520] let's introduce an active fragment and set active fragment state
[05:37:35,600] from use state and by default let's set it to null and the type can be a type of
[05:37:42,558] fragment from Prisma or null. So just make sure you added this imports here.
[05:37:50,080] Once you've added that, let's go ahead and let's modify the messages container component to have a few more procs.
[05:37:59,040] Let's add active fragment to be active fragment. And let's add set active
[05:38:05,520] fragment to be set active fragment. Now go inside of the messages container and
[05:38:12,320] let's improve these props. So, I'm going to add the active fragment prop to be
[05:38:18,638] fragment or null. And make sure to import the fragment and add the set
[05:38:24,480] active fragment right here. And then you can extract them in the new props here.
[05:38:31,680] Active fragment and set active fragment. Just like that. And then inside of use
[05:38:38,240] effect here, if we detect the last assistant message, call set active
[05:38:43,920] fragment and set last system message. My
[05:38:49,520] apologies, last assistant message dot fragment inside, but only if we have
[05:38:57,280] last assistant message fragment.
[05:39:02,400] Uh well actually since it's going to be null h
[05:39:08,718] yeah let's go ahead and we can just do this it's okay and call this
[05:39:14,558] there we go. So now one of the fragments will always be selected. What we have to
[05:39:19,760] do now is we have to go to the message card and set the active fragment
[05:39:24,878] question mark ID to be identical to message fragment question mark id and
[05:39:31,760] set active fragment will um on fragment click will call set active fragment and
[05:39:38,878] pass the message fragment inside like this. So now inside of your project here
[05:39:46,080] when you click on a specific fragment it should be highlighted like this.
[05:39:52,958] Perfect. And when you load the page since this is an error right now nothing
[05:39:58,558] is highlighted here. But if you try this again build a landing page for example.
[05:40:04,718] I'm going to wait for a second for this to respond. And you're going to see that then when you refresh it will
[05:40:09,920] automatically select that fragment thanks to this use effect right here which
[05:40:16,958] searches for the last message which role is assistant.
[05:40:23,600] And perhaps we can even improve this by searching for the last assistant message with fragment. And then we can do this
[05:40:32,320] and message.fragment fragment and just turn this into a boolean and then just
[05:40:39,360] do this. So you can see that now when I refresh
[05:40:45,600] this fragment is automatically selected. Perfect. Exactly what we need. So now
[05:40:52,080] that we have that, let's also create a loading state. In order to do that,
[05:40:57,440] let's go outside of the use effect here. Let's create a constant to find the last message. Instead of data, let's use
[05:41:05,040] messages like this. And then we are going to find the last user message. So if if is last
[05:41:13,200] message user. So if last message role is user, it means that we are the one who
[05:41:18,558] sent the message last. So that's going to be the system we are going to rely on for now to display loading. Later we can
[05:41:26,000] improve it more. So let's do this. Let's go just above the bottom riff and let's
[05:41:31,520] do if last message is user add message loading state
[05:41:38,080] like this. Now let's create message loading tsx here and in here this is what we're
[05:41:46,878] going to do. So import image from next image and import use state and use
[05:41:55,600] effect from react. Now in here first define shimmer messages function.
[05:42:04,160] And in here add an array of messages. This can be anything you want. So I'm
[05:42:09,840] going to add thinking, loading, generating, analyzing your request, building your website, crafting components, basically things like that.
[05:42:17,280] And then what I'm going to do is I'm going to create a state for current
[05:42:22,480] message index and set current message index with the initial value of zero.
[05:42:27,920] And then I'm going to create a use effect here like this.
[05:42:34,798] And the use effect will do the following. It will create an interval set interval.
[05:42:42,320] And inside of this interval, every two seconds, I'm going to call set
[05:42:48,080] current message index previous
[05:42:53,120] + one modulus messages.length
[05:42:58,480] like that. And inside of here, I'm going to add messages.length.
[05:43:04,160] And in the return method here call clear interval and pass the interval constant
[05:43:11,360] like this. And then inside of here you are going to return a div and a span.
[05:43:20,638] And inside render the currently active message
[05:43:26,558] like this. Now give this a span a class name of text base text muted foreground
[05:43:34,638] and animate false and give the outer div a class name of flex items center and a
[05:43:42,000] gap of two like this. And now finally let's export
[05:43:47,360] const message loading. Inside of here, we're going to return a
[05:43:53,200] div with a class name flex flex column group px of two and padding bottom of
[05:44:00,480] four. Then a div of class name flex items center gap 2 pl2 and margin bottom
[05:44:10,558] of two. Then we're going to render an image component with a source of logo
[05:44:16,878] SVG out of our project name, width of
[05:44:21,920] 18, height of 18 as well, and a class name of shrink zero. After that, a span
[05:44:30,240] with the name of our project with a class name text small and font medium.
[05:44:36,480] Outside of this div, we're going to open a new one with the class name pl 8.5
[05:44:42,798] flex flex column and get y of four. And inside render the shimmer messages
[05:44:50,718] component and then inside of the messages container here you can import message loading component like this. So
[05:45:00,000] now if you try and do build a yellow landing page
[05:45:05,840] you will see this thinking loading generating analyzing your request. So
[05:45:13,600] something for the user to look at while this generates uh and if you really want
[05:45:18,878] to immediately see the results of this. So right now we have to refresh we have to wait for some kind of refetch. What
[05:45:25,120] you can actually do inside of your messages container is you can add
[05:45:32,080] a refetch interval for example every 5 seconds. So now even without you
[05:45:38,480] refreshing it's going to refetch the messages every 5 seconds. And there we go we get a result. So we can add a
[05:45:45,440] to-do here temporary
[05:45:50,718] live message update like this. But just so you can start showing this to people
[05:45:57,120] so you don't have to refresh your page every time. So yes, now if you take a look at your network request, every 5
[05:46:02,878] seconds there there will be a network for refreshing the messages. But don't
[05:46:08,480] worry, uh since we are using React query, a lot of this will be cached. Great. So now let's go ahead and let's
[05:46:16,160] build a component which will be above this and it will be used to display the
[05:46:21,840] project name and the ability to go back.
[05:46:26,958] So I'm going to go back inside of the project view component and just above
[05:46:33,200] the suspense for loading messages I am going to add project header component.
[05:46:40,000] I'm going to pass project ID to be project ID like this.
[05:46:45,360] And after you've done that, let's go inside of components and let's create project-
[05:46:52,638] header.tsx like this. Now, inside of here, let's go
[05:46:58,400] ahead and add the following imports. Link image used theme from next themes.
[05:47:04,878] So, you already have this inside of your package JSON. This will be used to enable dark mode.
[05:47:12,160] Use suspense query from tanstack react query. Some icons chevron down chevron
[05:47:18,798] left edit sun moon icon. And then let's add use tpc from tRPC client button from
[05:47:27,920] components UI button. And all of these imports from the drop-own menu.
[05:47:34,718] the menu itself, content item, portal, radio group, radio item, separator, sub,
[05:47:41,600] sub subcontent, subt trigger, and menu trigger. All of those things. Now, let's
[05:47:47,280] go ahead and let's create an in interface props here. And let's go ahead and define project header right here.
[05:47:57,280] Now, when we are inside of here, we can add tRPC. use TRPC and we can go ahead
[05:48:03,200] and fetch our project using use suspense query TRPC projects get one query
[05:48:09,840] options ID project ID and now we've done what we did initially right remember we
[05:48:16,000] had the project loading here but now we moved it here so it's time to do the
[05:48:21,040] following first import the project header from docomponents project header and after that wrap it in its own
[05:48:28,160] suspense like this and give it a fallback of loading
[05:48:34,958] project like this. And now that we have this,
[05:48:40,718] let's go ahead and add a header tag right here. Let's give it a class name
[05:48:46,718] of padding 2 flex justify between items center and border bottom.
[05:48:55,200] And let's call it header. And let me just refresh here. Uh, and
[05:49:01,040] looks like it's not showing now. Uh, it is, but it is very small, I believe. So,
[05:49:07,040] let's go ahead. Uh, and let me see.
[05:49:12,080] Let's Oh, my apologies. No, it is not visible. We are not rendering anything. I thought it was just very small, but it
[05:49:18,558] didn't make sense. Make sure to return it. There we go. Now, we can see header in the text.
[05:49:25,360] There we go. Perfect. So now let's go ahead and develop this header even further. So I'm going to add a drop-own
[05:49:32,718] menu here. We have all of these components imported. Now inside of here,
[05:49:38,000] add a drop-own menu trigger and give it an as child property. This will allow it to become
[05:49:45,680] the button which is inside. And then let's give this button a variant of ghost, a size of small, a
[05:49:55,440] class name of focus visible ring zero,
[05:50:00,558] hover bg transparent, hover opacity 75,
[05:50:06,320] transition opacity, and pl2 with an exclamation point at the end. In
[05:50:11,920] Tailwind, this means important. We are basically overriding some classes in
[05:50:17,600] here. You're going to render the image with the source of logo SVG out of the
[05:50:24,480] project name width of 18, height of 18.
[05:50:30,558] Then a span element with the project name, the project name coming from the
[05:50:36,638] query which we just loaded. This will have a class name of text small and font
[05:50:42,798] medium. After that, a chevron down icon.
[05:50:48,400] And there we go. This now becomes a drop-down menu. It doesn't have the uh
[05:50:54,638] proper cursor, but don't worry, we will fix that later. Great. So, now let's go ahead and go
[05:51:04,480] outside of the drop-down menu trigger and let's add drop-down menu content.
[05:51:10,160] And let's give this a side of bottom. Let's give this an align of start.
[05:51:17,680] Let's get the drop-down menu item here.
[05:51:23,280] Let's give it an as child property. Let's make sure we close the drop-own
[05:51:28,558] menu item component. Add a link component here. Give it an href to the root page. Add the chevron
[05:51:38,558] left icon and a span element. Go to dashboard.
[05:51:44,718] And there we go. Now the first item is to go back. Perfect. Now we have a way
[05:51:50,878] to go to the landing page. What I want to do next is I want to
[05:51:56,878] create a drop-own menu separator. So let's do drop-own menu separator here.
[05:52:03,680] There we go. And below that add a drop-own menu sub and then a drop-own
[05:52:09,680] menu subt trigger. Give this a class name of gap 2.
[05:52:16,000] Inside of this trigger, render a sun moon icon. Give this a class name of size 4 and
[05:52:23,920] text muted foreground and then a span with the text
[05:52:30,480] appearance. And now you have a submen here. And now
[05:52:36,718] let's go ahead and go outside of the trigger and add drop-down menu portal.
[05:52:44,320] Inside of the portal, add drop-own menu subcontent.
[05:52:51,040] Inside of subcontent, add drop-down menu radio group.
[05:52:58,240] Give it a value for now uh of light
[05:53:04,160] and on value change of an empty arrow function for now.
[05:53:10,798] Now let's add drop-down menu radio item. Give this a value of light
[05:53:18,798] and render a span light. Now go ahead and copy this two times.
[05:53:26,958] The second one will be dark with the text dark. The third one will be system
[05:53:33,200] with the text system like this.
[05:53:38,240] And now you will have the option to select different themes. In order to
[05:53:45,360] enable this, we first have to go inside of our layout, our main layout in the
[05:53:52,958] app folder next to the root page. Right? So this one with the body and everything
[05:53:58,718] and then in here add to the HTML tag suppress hydration warning and then
[05:54:05,600] inside of body add a theme provider from next themes
[05:54:12,080] and encapsulate the toaster and the children. So just make sure you have
[05:54:17,280] added the import here. Let me just move this up here.
[05:54:22,638] Oops. Looks like I did something incorrectly here.
[05:54:28,480] Let me just do it again. So, I'm going to add theme provider
[05:54:33,920] and encapsulate the children. Now, inside of here, I'm going to give it an attribute class. I'm going to give
[05:54:41,680] it a default theme of system and I'm going to give it the enable system option as well as disable transition on
[05:54:49,440] change. And now let's go inside of project header back. And in here
[05:54:57,680] I'm going to add const set theme and theme from use theme. You have imported
[05:55:06,718] this from next themes. You can remove the edit icon. And now let's go back to
[05:55:12,798] our radio here. Set the value to be theme. Change this to be uh set theme.
[05:55:21,360] And I think that is pretty much it. If you try clicking on dark mode, uh it
[05:55:26,798] should use the dark mode. Try refreshing if it doesn't work. There we go.
[05:55:33,280] Perfect. We now have dark mode. We will of course improve the look of it later,
[05:55:38,638] but pretty impressive so far. Great. So that marks the end of the project header
[05:55:45,600] for now. What we're going to do or start doing in the next chapter will be
[05:55:51,200] previewing the actual fragments and fix any potential issues that we have. This
[05:55:57,360] will also include creating the code editor, right? Amazing job. So, let's go
[05:56:03,120] ahead. I can see that we have some issue here. Every time I select this fragment, very soon the bottom one starts to
[05:56:11,040] select. So, I'm pretty sure that something inside of my messages container uh oh yes, the refetch
[05:56:18,160] interval is probably causing this to uh refetch every time. So, maybe a better
[05:56:25,120] option for now would be to not use it. So, I'm going to comment it out. I will add to-do. This is causing problems.
[05:56:34,320] Yes, it's definitely that refetch interval. So now by default no fragment is selected only you can select it. It's
[05:56:41,840] okay to be like that now. Uh great in the next chapter we are developing this.
[05:56:47,600] So let's go ahead and do what we usually do. Let's mark what we completed
[05:56:53,840] and let's open a new branch project header. So I'm going to open a new branch here.
[05:57:01,760] Create new branch 11 project header. I'm going to stage all of my changes. 11
[05:57:10,080] project header. I'm going to commit and I'm going to publish this branch.
[05:57:16,080] Then I'm going to go ahead and go in my GitHub and I'm going to open a new pull
[05:57:21,680] request so that we can review all the things we did.
[05:57:27,360] And here we have the summary. New features. We added a dynamic project
[05:57:32,638] header with theme switching and navigation options. We also introduced a loading indicator with animated messages
[05:57:39,520] during message processing. We enabled live updates for messages with automatic
[05:57:44,798] refreshing every 5 seconds. We improved message interaction by highlighting and managing active message fragments.
[05:57:52,400] Perfect. That is exactly what we did in this chapter. As always in here, we have
[05:57:57,600] file by file walkthrough. And of course a sequence diagram this time including
[05:58:03,200] the periodically refetching messages which we just added. Amazing. And as for
[05:58:08,958] the comments, we are very good again. No comments except some nitpick comments.
[05:58:15,920] Amazing job. Let's go ahead and let's merge this. And after you have merged it, go back to your project, change to
[05:58:23,120] the main branch, and make sure to synchronize your changes. After you have synchronized your changes, as always,
[05:58:29,120] you can click on the source control graph and confirm that you have just merged chapter 11. And I believe that
[05:58:36,718] marks the end of this chapter. Amazing, amazing job. And see you in the next one.
[05:58:41,000] 
[05:58:43,120] In this chapter, we're going to focus on creating the fragment view component.
[05:58:48,718] And this entire chapter is pretty straightforward. We just have to create an ability to view that E2B sandbox URL.
[05:58:58,638] So, let's go ahead and do that. As always, ensure that you're on your main
[05:59:03,680] branch and synchronize changes to make sure everything is up to date. The last chapter was chapter 11. So, now let's go
[05:59:11,760] ahead inside of source and basically just find project view. There we go.
[05:59:18,480] Inside of this project view, go inside of your second resizable panel and in
[05:59:23,920] here render the fragment web component. We are only going to render this if we
[05:59:30,160] have an active fragment. So if you have an active fragment only, then render the
[05:59:35,200] fragment web and pass in the data to be active fragment. As simple as that. And
[05:59:41,840] you can turn this into a boolean like this. Perfect. Now let's go ahead and
[05:59:48,240] let's go inside of components fragment web.tsx.
[05:59:55,440] Now in here let's create an interface props with fragment from generated
[06:00:01,760] Prisma. Now let's go ahead and let's add a couple of more things. Use state from
[06:00:06,958] react external link icon and refresh CCW icon. And then we're going to use the
[06:00:14,080] button component from components UI button. Now in here let's go ahead and
[06:00:20,878] export function fragment web which accepts data and props. And in
[06:00:28,000] here, let's go ahead and start by doing a div
[06:00:34,160] with a class name flex flex column full
[06:00:39,200] width full height. And then inside of here, we're going to do an I frame.
[06:00:48,558] And we're going to add key. Uh, actually, we can't do this yet. My apologies. So for now just do a class
[06:00:54,320] name height full width full
[06:00:59,520] sandbox allow forms allow scripts and allow same
[06:01:06,558] origin and then loading will be lazy and source will be data sandbox URL like
[06:01:15,440] this and then let's go ahead and
[06:01:20,638] import this from component fragment web
[06:01:26,878] and I think that now when you click here you should be seeing a big error saying
[06:01:31,920] that sandbox was not found but try creating a new prompt so build a landing
[06:01:37,520] page. Let's go ahead and do that. And let's wait for this to generate.
[06:01:44,480] And once you get a response, you can click on the new fragment. And in here, you are now able to preview inside of
[06:01:50,958] the iframe the new landing page which was just created. Amazing. Amazing job.
[06:01:57,520] So you are pretty much halfway there, right? Great. So now let's add some
[06:02:02,718] features to make this seem like a little browser. So inside of this fragment web,
[06:02:07,760] we're now going to add a couple of things above the iframe. Add a div and
[06:02:12,958] give this div a class name padding two border bottom background color sidebar
[06:02:20,480] flex items center and gap x of two. So now just above here you have a little
[06:02:26,638] bar. Then in here add a button component and inside a refresh CCW icon. Give this
[06:02:35,520] a size of small, a side of bottom. Oh,
[06:02:40,798] my apologies. No, these are completely wrong props. Uh, variant of outline. And
[06:02:46,400] on click for now, just an empty function. And now you have a refresh
[06:02:52,480] button here. Perfect. So after that, go ahead and copy this
[06:02:57,520] button. And in here, you're going to have the following. You're going to have a span
[06:03:06,558] inside of here like this
[06:03:11,600] which will render data sandbox URL. It will have a class name of truncate.
[06:03:19,360] And now let's go ahead and do the following. Collapse all of these props
[06:03:25,280] like so. And keep the variant and keep the size. So
[06:03:32,480] let's just add a class name here to be flex one justify start text start and
[06:03:40,638] font normal. So now you have a big uh kind of like an address bar, right?
[06:03:47,280] Showing the current fragment URL. And then let's go ahead and just add
[06:03:52,638] disabled prop to be explicitly false. And then after this button, let's add
[06:03:59,760] another one which will have the external link icon and give this one a size of
[06:04:06,400] small a disabled if there is no sandbox URL variant of outline.
[06:04:13,600] And on click will be an arrow function which checks if there is no data sandbox
[06:04:19,440] URL return otherwise call window open
[06:04:24,558] data sandbox URL blank as the second argument. So it opens in a new tab.
[06:04:32,000] There we go. Now let's go ahead and go inside of frame and let's add uh I keep doing the
[06:04:39,360] key but I keep forgetting to implement the key. Let's finally do that. So go to
[06:04:44,400] the top here and add fragment key and set fragment key and call use state
[06:04:53,520] like this. Then let's add copied and set copied use state false.
[06:05:02,718] Let's add on a refresh method. Set fragment key
[06:05:09,920] previous previous + one con handle copy
[06:05:17,200] navigator clipboard write text data sandbox URL
[06:05:25,360] set copied goes to true and set timeout is fired with set copied set to false
[06:05:33,520] with a 2cond timeout. out. Now that we have these two, let's go
[06:05:38,638] ahead and add on refresh here
[06:05:44,000] like so. And for this one, let's give it an on
[06:05:49,280] click to be handle copy and disabled if there is no data sandbox URL or if we
[06:05:56,400] just copied something. And in here, I think it is good enough.
[06:06:04,240] So now you should have buttons to open this in an external tab like this. You should have buttons to copy this. So
[06:06:10,798] when I paste, there we go. And you should be able to refresh this. But looks like the refresh one uh is not
[06:06:17,680] working. Let me just check. Yes, it's okay if this expires. That's
[06:06:22,958] completely fine. It expires very soon because we don't want to spend our free credits on E2B. So I don't think this
[06:06:30,240] refresh is working and it's not working because we need to add the fragment E
[06:06:35,600] here. So now when you hit refresh you can see how it it blinks which basically
[06:06:40,878] means it is refreshing. Perfect. So let's try build a calculator app.
[06:06:47,520] And let's see that and let's see how that displays in something like this.
[06:06:53,760] And here we have a calculator app. Pretty pretty cool. Amazing. We can now
[06:07:00,558] refresh this. And there we go. You have a whole new refreshed page. Uh, perfect.
[06:07:05,680] You can copy this. Amazing. So now what I want to do is I want to develop one
[06:07:11,520] simple component called hint. And we're going to store that inside of source
[06:07:16,878] components. hint.tsx. So not inside of the UI folder. Let me
[06:07:23,760] just close it here. I mean, it doesn't matter. If you want to, you can put it inside of the UI folder. And in here,
[06:07:30,240] we're going to mark this as use client. And we're going to import everything tool tip related from components UI tool
[06:07:37,040] pip. You already have this in it is inside of the UI folder. So import all of these things and then
[06:07:44,320] create the following interface hint props accepting the children the text
[06:07:49,360] and then optional side and align which accepts top right bottom or left and align start center and end.
[06:07:57,840] And then let's go ahead and export const hint with some predefined props here.
[06:08:05,120] So basically we have the children, the text, the side which by default will be top and align which by default will be
[06:08:12,400] center. And then inside of here what you're going to do is you're going to add the tool tip provider. You're going
[06:08:18,480] to add the tool tip itself. And then you're going to add a tool tip trigger
[06:08:23,920] like that as child property and the render children inside. And then you're
[06:08:30,718] going to add tool tip content. You're going to pass in the side prop. You're going to pass in the align prop.
[06:08:38,558] And inside you're going to render a paragraph with a text.
[06:08:44,320] Just like that. That is our hint component. Now let's go back inside of the fragment web and let's wrap it
[06:08:50,798] around a couple of items. Starting with the external link icon. So simply wrap
[06:08:55,920] your button in your new hint component like this. And then you can add a text here and say
[06:09:03,760] open in a new tab and a side of bottom and then a line of start. Just make sure
[06:09:10,240] you have imported the hint from components hint. And now when you hover
[06:09:15,360] it say it tells you what it does, right? Because just by looking at the icons it might not be clear. And now let's do
[06:09:22,798] that for the rest. So find the copy button and wrap it in a
[06:09:30,000] hint like this. Click the copy with a side of bottom.
[06:09:36,798] So now when you hover over here, you can see that you can click to copy and then
[06:09:42,320] do the same thing for this one
[06:09:49,040] to refresh. There we go. So now we can refresh as well. Amazing,
[06:09:55,040] amazing job. In the next chapter, what we are going to do is we're going to implement tabs here so we can switch
[06:10:02,240] between a code preview and a actual web preview like we are doing now. Great.
[06:10:10,558] So, let's go ahead and mark this as completed. A very simple chapter, but a very powerful and very rewarding
[06:10:17,120] chapter, may I say. So, let's go ahead and open a pull request. So, this is chapter 12.
[06:10:23,360] I'm going to close everything. New branch 12. Fragment preview. Is that the name?
[06:10:31,440] It is fragment view. Let's add and stage all of my changes.
[06:10:39,760] Let me just click here. There we go. Stage the changes. 12 fragment view.
[06:10:45,200] Let's commit. And let's publish the branch. And let's go ahead and open a pull
[06:10:51,840] request here. And let's review what we just did.
[06:10:59,280] And here we have this summary. We introduced a reusable tool tip component for displaying contextual contextual
[06:11:06,400] hints. We added a web fragment preview component with controls to refresh,
[06:11:11,920] copy, and open the preview in a new tab. We enabled a live preview of the project
[06:11:16,958] fragments directly within the project view, including interactive controls and tool tips. Perfect. As always, an an
[06:11:25,760] in-depth walkthrough as well as a sequence diagram here and some actionable comments. So yes,
[06:11:32,718] navigator.Clipboard.ext is technically a promise. So it can you
[06:11:39,200] can do on it and catch on it. So it is possible that the copy feature fails. So
[06:11:46,080] it might be a good idea to add then and catch to uh at least display some kind
[06:11:52,000] of error at least internally for you so you know something is going on. This is not a bad idea. And in here it allows
[06:11:59,840] improving uh it suggests improving accessibility for the iframe by adding the title and area labels. Great. I'm
[06:12:07,680] satisfied with what we have. So, I'm just going to merge this pull request. And once it is merged, I'm going to go
[06:12:14,240] back here, main branch, and refetch. And after it refetches,
[06:12:21,360] there we go. Fragment view is the last merged one. Amazing. That marks the end
[06:12:27,680] of this chapter. So, let's go ahead and mark this as complete and see you in the next one. Amazing. Amazing job.
[06:12:35,000] 
[06:12:36,480] In this chapter, we're going to implement the code view. This will be a slightly longer chapter in comparison to
[06:12:43,360] our last one simply because we have a bit more components to create. But let's
[06:12:49,040] start with adding tabs in our project view component so that we can switch between the fragment web component and
[06:12:56,558] code view component. So as always ensure that you are on your
[06:13:01,680] main branch and you can synchronize changes. The last chapter was 12 fragment view.
[06:13:09,280] Now let's go ahead inside of our project view. And this time we're going to add a
[06:13:15,120] couple of components. So let's go ahead and just in between the fragment and the
[06:13:20,480] components UI resizable add tabs. Tabs content tabs list and tabs trigger. from
[06:13:26,240] components UI tabs you have them installed when you added chats UI and
[06:13:32,480] once you have added them it's time to use them so what I'm going to do is I'm
[06:13:37,840] going to go below the project view and I will add tab state and set tab state I
[06:13:45,040] will add use state here and I will set the options to be preview or code and by
[06:13:52,718] default it's going to be preview now Now that we have the tab state, let's go in
[06:13:58,400] the second resizable panel here and let's encapsulate the active fragment
[06:14:05,360] within tabs. Now in here, let's give the tabs a class
[06:14:10,958] name. Height full gap Y zero. Default
[06:14:16,160] value will be preview. value will be tab state
[06:14:22,958] and on value change we'll get the new value and set tab state to be value as
[06:14:30,400] preview or code like this.
[06:14:36,480] Then inside of this tabs let's add a new div and let's encapsulate this once again.
[06:14:43,280] This div will have a class name of full width items center padding two border
[06:14:50,798] bottom and gap x of two and then open tabs list and again encapsulate the
[06:14:58,558] fragment. Inside of the tabs list give it a class name of height zero padding
[06:15:05,120] zero border and rounded medium. And then finally inside of here we can add tabs
[06:15:12,798] trigger. The first one will be the value preview with the class name rounded medium.
[06:15:22,240] We're going to render the I icon here which you can import from Lucid React.
[06:15:27,360] And while you're here also import icon. Let me just move them to the top. There
[06:15:34,000] we go. So, let me just fix this. Uh, just a
[06:15:41,600] second. So, I think I just have to remove this.
[06:15:46,798] There we go. So, inside of this tabs trigger, add the eye icon like that and a span demo.
[06:15:57,520] And then copy this trigger. This one will be code with the text code and uses
[06:16:04,958] the code icon. And then outside of the tabs list,
[06:16:10,480] go ahead and add a div with class name
[06:16:15,920] ML auto flex items center and gap x of
[06:16:22,080] two. And this button will
[06:16:28,080] uh I'm sorry this div will encapsulate a button from components UI button
[06:16:35,200] which will uh not serve any purpose now but it will later. So give it as child
[06:16:42,160] give it size small variant and for now give it well just default
[06:16:52,638] a link from next link. So, make sure to add this
[06:17:00,400] with an href of pricing and add a crown icon
[06:17:08,798] and upgrade text. Great. And now
[06:17:16,558] outside of that div and outside of this div as well. So move this outside. Add
[06:17:23,760] tabs content. This one will be for value preview. So
[06:17:30,080] you can put this finally inside. And then we're going to have another tabs content
[06:17:36,718] or value code. And this will simply be a paragraph to-do code.
[06:17:43,600] There we go. So make sure tabs content is still inside of tabs. So now when you go inside of your app here, you should
[06:17:50,558] see a button to upgrade which should lead you to 404 page. And you should see
[06:17:56,798] that you can switch between demo and between code. Uh the demo doesn't show
[06:18:01,840] anything until you select a fragment. Right? So you can see how you can switch between the two. So now let's develop
[06:18:09,680] the code part. So in here it will be quite similar.
[06:18:16,480] So let's start by doing the following. MPM install prismjs.
[06:18:22,480] This will be used to uh highlight code syntax. So let's go ahead and develop
[06:18:28,400] this simple component inside of source components. So in here
[06:18:33,680] add code view.tsx. And in here you're going to need uh just
[06:18:40,958] one more thing. So let's actually create a folder code view like this and move
[06:18:47,440] this inside. And you can change this to be index.tsx.
[06:18:56,240] And then go inside of your uh vibe assets. You can use the link in the description or you can see it on the
[06:19:02,160] screen here. And find code theme.css. So it's quite long. That's why we are not typing it. So go ahead and copy this
[06:19:10,400] and create it here. So code theme.css
[06:19:15,600] and just paste the entire thing inside and save it. And now let's go ahead and develop the code view here. So you're
[06:19:23,200] going to import everything from PrismJS. And let me show you Prism.js. Oh, did I
[06:19:28,240] install it or not? MPM install PrismJS.
[06:19:35,680] Let me see. PrismJS. It is installed. But I think I also need to do mpm install-d at types
[06:19:43,440] prismjs. There we go. So, prismjs 1.3 and types
[06:19:49,760] 1.26.5 and now it works. Below that, import use effect and then
[06:19:57,280] import the following things. Risenjs components and then JavaScript, JSX,
[06:20:03,680] Python, TSX or TypeScript. You can remove if you're not going to use Python for example.
[06:20:10,240] And finally, import code theme CSS. So
[06:20:15,360] just make sure this is in the same folder. Right. Then export const code view
[06:20:23,760] and create a simple interface props
[06:20:29,760] which accepts the code which is a string and a language which is a string.
[06:20:36,878] So assign the props. Let's dstructure them. Code and language. And inside of here, return
[06:20:44,798] a pre-tag. Give it a class name padding two, background color transparent, border
[06:20:52,480] none, rounded none, margin zero, and the text extra small.
[06:21:00,160] And inside of here, add a code element, which renders the code.
[06:21:07,120] And let's give this a class name. And let's go ahead and use language
[06:21:14,718] dash lang like this. Usually if this was a TypeScript uh class name, you would
[06:21:21,600] not do this because this type you shouldn't do this kind of half dynamic
[06:21:26,798] class name, right? You should instead do the full one. But this is not a Tailwind
[06:21:32,160] class. This is a class from Prism, right? That's why you don't have to worry
[06:21:38,958] because you can see that it is exactly what it expects. And now let's just use the use effect
[06:21:45,360] here for a very simple thing. So on load simply use prism and highlight all.
[06:21:53,120] That's it. So that's going to be our code view component.
[06:21:58,240] And if you go inside of project view, uh maybe we can already render it. Let's try code view.
[06:22:04,798] And let me try adding language to be JS or let's do ts. And let's do code.
[06:22:11,360] Let me just try const a is equal hello world
[06:22:18,558] something like that. Let's see if we are able to preview that. And we are. There we go. And I think that it will also
[06:22:25,360] affect dark mode. And you can see how the syntax is visible. Very nice.
[06:22:31,440] And now let's actually uh use this in a file explorer because that's what we
[06:22:38,080] have to do next. So we're going to go ahead and create the file explorer
[06:22:44,878] inside. Yes, let me just show you how you can import code view. So you don't have to go to index.
[06:22:51,520] Index can be uh used like this. That's why we named it index. So you can just
[06:22:56,558] target code view. In case this doesn't work for you for any reason, you can just name this
[06:23:02,718] properly, name it code view again and then just import that way. And let me just move it up here. There we go.
[06:23:11,280] So now let's create the file explorer component. I'm going to go inside of source
[06:23:16,798] components file. Whoops.
[06:23:22,480] File explorer.tsx. And let's go ahead and let's prepare the
[06:23:29,600] imports. Copy check icon and copy icon from lucid react. Use state use memo and
[06:23:36,240] use callback as well as fragment from react.
[06:23:41,440] Hint and button from components. Button comes from shatzen meaning it has the UI
[06:23:48,320] prefix and hint is our custom component which we created in the previous chapter. Now let's import our new code
[06:23:55,600] view which we just created. And then let's go ahead uh and add
[06:24:03,360] resizable with resizable handle panel and panel group. And let's also import everything
[06:24:11,440] we need from breadcrumb. So both of this come from shatnui. So you have them
[06:24:18,320] breadcrumb item list page separator and ellipses.
[06:24:23,680] Now let's go ahead and let's define our file collection.
[06:24:28,878] This is our file collection type. It is basically a type of record string
[06:24:34,000] string. But I like to use this type simply because it uses the path as the key and then the content here. I think
[06:24:39,920] this kind of visually makes more sense. I think we did the same thing in our
[06:24:45,200] functions path string. Yes, this is exactly how we defined our files here. So I like to do
[06:24:51,680] this because I think uh it visually looks better. Great. So now let's go
[06:24:57,920] ahead and first create a function which can extract language from file extension. So get language from
[06:25:04,480] extension accepts the file name and returns a string. And what we do here is we simply target the extension part and
[06:25:12,400] we take that part and we turn it to lowercase and we default to text if we
[06:25:17,440] were unable to do that. So basically if we enter something like app.tsx
[06:25:23,840] we return tsx as the language. As simple as that.
[06:25:30,000] Perfect. Now let's go ahead and let's create
[06:25:35,760] uh a component which we are going to need in order to even render uh which file is currently active. So I'm just
[06:25:41,920] trying to think what is the best way to build this so that you can see the results as soon as possible because
[06:25:47,520] there's a lot of components we have to build and I'm just afraid that um we might have to build for a lot of time
[06:25:53,200] without seeing any results. So this is what I will do. We're going to do export
[06:25:59,040] const file explorer like this.
[06:26:04,320] Let's create an interface file explorer. Actually, let's just call this yeah file explorer props because we're going to
[06:26:11,120] have many components in this file. So I want to name this explicitly to be file explorer props. It will accept files
[06:26:18,798] which are a type of file collection like this. Then let's go ahead and let's use this
[06:26:25,600] and we can destructure the files from here. So now what I want to do is I want
[06:26:31,120] to add the return resizable group resizable panel group like this with the
[06:26:38,080] direction horizontal and then resizable panel
[06:26:47,200] with a default size of 30 with a minimum size of 30 and a class
[06:26:54,958] name background sidebar. And inside of here, a paragraph to-do
[06:27:02,240] tree view like this. Then let's go ahead and let's add a
[06:27:08,798] resizable handle here with a class name hover background
[06:27:15,840] primary and transition colors like this.
[06:27:21,600] And then let's go ahead and do another resizable banner
[06:27:27,120] like this with a default size of 70 and a minimum size of 50.
[06:27:34,718] And in here what we are going to do is try and do files
[06:27:42,478] first in the array. I'm just thinking of a way. Okay, I know
[06:27:48,478] what we can do now. Let's create a state called selected files.
[06:27:55,120] So const selected file set selected file
[06:28:00,638] use state. And it can either be a string or null.
[06:28:06,400] And let's go ahead and create a function inside of use state to get the file keys
[06:28:13,680] by using object keys and pass in the files. And then return file keys.length
[06:28:18,718] length is larger than zero, we can select from the file keys the first in
[06:28:24,798] the array otherwise null. So this way we are going to pre-seelelect the first
[06:28:29,920] file we can find. And now that we have this first file, I think it will be a little bit easier for us to build this
[06:28:36,240] UI. So inside of this second resizable panel, check if we have the selected
[06:28:41,760] file and if inside of files we can find this selected file. If we can do that,
[06:28:48,558] go ahead and render a div code view
[06:28:53,920] like this. Otherwise, let's go ahead and render the alternative which is a div
[06:28:59,040] which says select a file to view its content
[06:29:06,240] with a class name flex height full items
[06:29:11,520] center justify center and text muted foreground
[06:29:16,958] and I think it's time to render this. So let's go inside of the project view here and let's go ahead and render it
[06:29:23,920] instead. So remove code view and check if you have active fragment question
[06:29:29,680] mark files. Render the file explorer component and
[06:29:35,680] pass in the files to be active fragment.files files as and in here you
[06:29:42,638] can choose to use let me just copy from here
[06:29:49,520] this type basically because the JSON type will be any right
[06:29:54,798] so we are now marking it as this make sure to import the file explorer and you
[06:30:01,280] can remove the code view now because we're going to use it inside of the file explorer and I think that already just
[06:30:06,958] make sure you have a fragment selected here When you click on code, you should have a to-do tree view and to-do code
[06:30:13,440] view. Perfect. And I've had some trouble uh making this
[06:30:19,760] work. Oh, looks like it's working just fine. Okay, my version had some problems. I think looks like it works
[06:30:27,280] just fine nevertheless. Okay, now let's go ahead and let's actually develop the tree view and the code view. So, I'm
[06:30:34,400] going to go back inside of the file explorer here. And I think it might be easier to develop the code view first
[06:30:40,000] simply because we already have the code view. So I'm going to go inside of this div here and I'm going to add a class
[06:30:46,638] name height full width full flex and flex column. And then I'm going to open
[06:30:53,840] a new div. The class name border bottom bg sidebar px4 py2 flex
[06:31:02,558] justify center. Uh actually it will be justify between items will be center and gap x will be
[06:31:10,080] two. Then let's add to-do breadcrump file
[06:31:16,160] breadcrump like this. And then add a hint component
[06:31:21,840] wrapping our button component and give this a text of copy to clipboard and the
[06:31:27,680] side of bottom. And for this button right here, give it
[06:31:33,280] a variant of outline, a size of icon, a class name of ML auto on click to be an
[06:31:41,680] empty arrow function, and disabled
[06:31:46,958] to be false. And inside of here, render the copy icon.
[06:31:52,638] So now, when you click on code, you should have the copy to clipboard
[06:31:58,080] button. Just make sure you have both button and the hint imported.
[06:32:04,080] Great. And now below this div, we're going to open a new div with a class
[06:32:10,718] name flex one overflow auto and render the code view.
[06:32:18,320] In here, select the code to be files and then selected file. And the language
[06:32:24,958] will be oops the language will use our function get
[06:32:31,520] language from extension selected file. Whoops.
[06:32:38,160] Like this. And by default, you can see that it selected a specific file. Right
[06:32:44,000] now, I'm not able to scroll. We will fix this as well. by uh let's see it has
[06:32:50,320] overflow auto but I think that we are missing uh something obviously because
[06:32:56,958] it's preventing us from doing this uh so let's see
[06:33:03,680] everything here seems fine but yes I'm not able to scroll to the
[06:33:09,040] bottom here so how about I go inside of the project view here
[06:33:14,718] and to the value code add a class name a minimum height of zero.
[06:33:21,440] And I think that now when you select the fragment, there we go. Now I'm able to scroll in all directions, you should be
[06:33:29,120] able to scroll left and right and up and down. So basically inside of your
[06:33:34,320] project view in the tab content for the value code, add a minimum height of zero. And this will allow you to scroll
[06:33:41,840] inside of the code preview. So this is now showcasing the very first file it selected. But now we have to build the
[06:33:49,040] tree view so we actually see the file we selected and so that we can choose between other files. And then we need a
[06:33:56,000] breadcrumb component here to render the current file. So let's go ahead and
[06:34:01,440] let's build the tree view next. So I'm going to prepare that right here in the
[06:34:07,920] file explorer right above where we added a to-do to render the tree view. Let's
[06:34:13,200] add tree view like this. And let's give it some props. Data is going to be an
[06:34:20,798] empty array. Value will be selected file. On select will be an empty
[06:34:27,680] function. And now let's go ahead and let's prepare this things here. So what
[06:34:32,798] I want to do now is the following. Uh I want to go inside of source lib utils
[06:34:39,920] and I will export function convert files to tree items
[06:34:46,080] and I'm going to create a JS doc like this simply so you can see what happens.
[06:34:52,558] So this JS doc is quite useful. I don't like I mean I don't use it usually but
[06:34:57,840] it's useful when I feel like things are not exactly clear. You can see how when you create a comment like this and when
[06:35:04,400] you hover over a function it actually tells you that. So it converts a record of files to a tree structure. So we
[06:35:11,200] accept files which is a record of file paths to content. So this is the input right source button tsx and then some
[06:35:18,958] content and this is the output that it will return. So that's what we are building now. So let's go ahead and add
[06:35:26,558] some props here. files which will be a type of path which is a type of string
[06:35:32,240] and a string and it will return a tree item. So now
[06:35:38,080] we need to create the tree item object. So let me just
[06:35:44,798] uh do this like so I'm trying to think of a perfect place
[06:35:49,840] to add this to. Um how about in source we just create
[06:35:55,520] types ds and let's export type tree item
[06:36:01,520] and that will be a string or an array of string
[06:36:07,840] and tree item itself. So it can reference itself right it can be a
[06:36:14,240] deeply nested array. Now that we have this, we can go back
[06:36:19,680] inside of the utils file here. Uh, and we can set the return method to be the
[06:36:25,120] return type to be tree item from the types. And it's going to be an array of those three items and it's going to be
[06:36:32,080] an error until we actually return that. So I want to do this because this way we are certain that we correctly developed
[06:36:38,638] this. So let's start by creating an interface tree node like this which is
[06:36:46,000] basically a key which is a string and then tree node which is itself inside or
[06:36:51,440] null. Then let's define a tree which is a type of tree node and it's going to be
[06:36:57,920] an empty object at first. Now let's go ahead and create sorted paths. So we are
[06:37:04,080] basically sorting the files alphabetically by their path. And then what we're going
[06:37:09,920] to do is a for loop. So for const file path of sorted paths.
[06:37:17,520] Let's go ahead and this uh split the file path into parts by doing file
[06:37:24,160] path.split by a forward slash. The current one will
[06:37:29,920] be the current tree which is just the empty object for now. And then for
[06:37:36,798] let index being zero, index being less than the parts length
[06:37:43,600] minus one and index increasing by one for each iteration
[06:37:48,878] get the part. So parts and using this index here if we cannot find the path
[06:37:57,600] the part in the current object we need to add it there like this
[06:38:05,600] and then current is equal to current part like this.
[06:38:11,920] And then what we have to do outside of here is add the file or the leaf node.
[06:38:19,920] Right? So const file name is parts parts.length minus one. Current file
[06:38:27,520] name is equal to null. This will basically indicate that it's a
[06:38:33,280] file. This is quite confusing, right? But once you see how the file uh
[06:38:38,958] structure will look, it will make a little bit uh more sense. Uh okay. So I
[06:38:46,160] think that this uh let me just see.
[06:38:52,718] Yeah. So okay, we just finished this for loop, right? And now we have to uh
[06:38:59,760] convert the node. So let's create an inner function to do that. function
[06:39:05,600] convert node. The node it accepts is a tree node.
[06:39:11,680] We have defined a tree node right here.
[06:39:16,798] And the name is an optional string and it returns back a tree item, an array of
[06:39:23,680] tree items or a single tree item like this. So let's get the entries to
[06:39:31,200] be object entries from a specific node.
[06:39:36,240] If entries.length is equal to zero, return the name or an
[06:39:42,558] empty string. Then define the children to be a tree item
[06:39:47,920] like so. And set it to be an empty array for now.
[06:39:54,878] And then let's go ahead and do for const
[06:40:00,320] they structure the key and the value of entries and do the following. If value
[06:40:08,320] is equal to null that means this is a file. So do
[06:40:15,920] children.push key. Else this is a folder. So create a sub
[06:40:24,558] tree using convert node and pass in the value and the key. So we need to go
[06:40:29,600] deeper. We need to recursively call this function again until we find a file. If
[06:40:34,878] array is array subtree
[06:40:40,000] children dopush open an array of key and spread the
[06:40:45,360] subree. else children do push key and subtree
[06:40:54,320] like so. And then let's go ahead outside of this four and return the children
[06:41:03,040] like so. And then let's define the result here to be convert node tree and
[06:41:10,400] return array is array result
[06:41:15,840] otherwise result inside of the array like this.
[06:41:21,600] And if you've done it correctly you should have no errors here.
[06:41:26,878] Now I completely understand that this was a very complex task. And if if you
[06:41:32,080] are worried that you did it incorrectly, don't worry. Uh I have added my entire utilus files to my public assets. So you
[06:41:39,680] can just find it here and you can copy it from here. For example, I can copy this entire file and I can paste it in
[06:41:46,478] here like so. So now I have this convert node and I have the convert files to
[06:41:52,240] three items. Right? So if you want to do a double
[06:41:57,520] check or you just want to copy file uh because it's easier, you can do that. Don't worry. Uh yes, a slight mistake
[06:42:05,120] here. My apologies. Uh so don't worry, I will fix I will fix this file so it
[06:42:10,958] doesn't use this import because our tree item comes from types.
[06:42:16,478] Yes. So import type three item. Uh I will fix that instead. I think I can fix
[06:42:22,320] it right now. There we go. Like so.
[06:42:28,000] So when you copy, you won't have that problem. Uh and I will double check by copying this file again. Pasting it. Uh
[06:42:37,280] oops. Copy it again. I cannot seem to copy it. Let me try one
[06:42:44,320] more time. I think the copy button is still using the old one.
[06:42:49,760] Okay. Finally, no errors in the utilus file. Okay. So, now that you have the
[06:42:55,840] convert files to tree items, we can go back inside of the file explorer.
[06:43:05,520] And in here, uh, we're going to have to create tree data. So, const tree data
[06:43:12,000] will be use memo and return convert files to tree items
[06:43:18,638] and pass files here. And in here add files as a dependency. So just make sure
[06:43:24,240] you imported our newly created function here. Uh you can either write write that
[06:43:30,080] function yourself as we just did or you can copy it from the source code or from the assets folder. Uh great. Now that we
[06:43:37,760] have this and we have the tree data, let's go ahead and let's add the const
[06:43:43,520] handle file select to be use call back.
[06:43:50,400] And inside of the use call back, we're going to
[06:43:55,840] check the file path to be a type of string. And if files file path exists, set
[06:44:05,200] selected file to be the file path. And add files here. There we go.
[06:44:13,680] Perfect. And now inside of the tree view, add the tree data here.
[06:44:21,040] And on select, add handle file select like so. And now it's time to develop
[06:44:28,558] the treeview component. So I'm going to go inside of components tree view.tsx.
[06:44:36,160] Let's go ahead and create the interface tree view props which uses the tree item from our types
[06:44:43,040] like so. And now let's export const tree view.
[06:44:50,240] Let's assign the props. Tree view props. In here we get data value end on select.
[06:44:59,840] And in here let's go ahead and let's return a paragraph tree. Actually maybe
[06:45:05,120] we can do JSON stringify data just so we can see
[06:45:10,958] what we created. And let's import the tree view from dot slash treeview.
[06:45:20,160] And if you go back to your app here, select a fragment and click code. There we go. I have app folder and page.tsx.
[06:45:27,920] So those are for me. But if I go into one of my older ones, well, looks like all of these are pretty simple. So it's
[06:45:34,400] going to keep using just uh a simple example. But if you tell it to build
[06:45:39,600] something complicated, uh you will have more items here. So this represents a
[06:45:45,360] folder and this represents a file. And now I mean this is basically how the file structure should look like. And now
[06:45:52,000] we're going to use that to properly render the tree view. So, uh, let's go ahead and let's import
[06:45:59,520] everything we need from the sidebar component. So, that's going to be the sidebar, the
[06:46:06,798] content group, group content, menu, menu button, menu item, menu sub, provider,
[06:46:13,120] and rail from components UI sidebar. You already have this when you added Shatsen
[06:46:18,240] UI. And now let's go ahead here and let's render that. So starting with the
[06:46:24,478] sidebar provider and let's render sidebar with
[06:46:30,718] collapsible to be none and class name to be width full and then sidebar content
[06:46:39,200] like so. inside of the sidebar content. Sidebar
[06:46:45,200] group sidebar group content sidebar menu
[06:46:54,558] like that. So you shouldn't see anything now simply because we didn't add anything in the
[06:47:01,280] menu. So now what we have to do is we have to develop the tree component. So let's do that below here. Const tree
[06:47:11,120] will have an interface tree props which will accept item which is a type of tree
[06:47:16,958] item. It will accept selected value which will be an optional string or it
[06:47:22,878] will be null on select which will be an optional function which accepts the value
[06:47:28,958] which is a type of string and returns a void and parent path which will be a
[06:47:34,798] string. So let's go ahead and add tree props here and the structure the item selected
[06:47:42,240] value on select and parent path like so.
[06:47:49,040] Inside of here, let's first do a destruction of the name and the rest of
[06:47:54,080] the items from an array. Array is array item. If it is, we can render the item.
[06:48:02,400] Otherwise, put the item in the array. Then let's get the current path. This
[06:48:08,160] will check if we have the parent path and it's going to render dynamically
[06:48:13,520] using backd parent path forward slashname otherwise just the
[06:48:19,920] name of the file. If we don't have any items,
[06:48:26,000] uh this means that this is a file. So let's add it's a file const is selected
[06:48:33,120] here will be selected value equals current path
[06:48:40,160] and in here we're going to return sidebar menu button
[06:48:46,080] with is active to be is selected and class name will be data active true
[06:48:54,400] background transparent and I'll click Here we'll call on select with a
[06:49:00,160] question mark because it can be optional and pass the current path inside of here. Render the file icon
[06:49:09,120] uh file icon from lucid react. Just make
[06:49:14,400] sure you have it like that. And below that a span and the name. And this will
[06:49:20,478] have a class name of truncate like that. and then go outside of this
[06:49:26,478] if clause and this means it's a folder
[06:49:32,240] and in here return sidebar menu item
[06:49:37,920] with collapsible uh we now have to import the things from collapsible as well. My apologies I
[06:49:44,558] forgot about that. So just add collapsible content and trigger from components UI collapsible. you also have
[06:49:51,760] those components. So, let's go ahead uh down here and
[06:49:59,360] instead of the sidebar menu item, open collapsible like that.
[06:50:06,638] Uh let me just fix this collapsible. Give it a class name of
[06:50:12,878] group forward slash collapsible.
[06:50:18,400] and then add the following class name which is a little bit longer and looks
[06:50:23,760] weird. So basically open curly brackets and this entire thing is inside of that
[06:50:30,798] curly brackets and and then if data state is open for this component target
[06:50:37,280] the button target the SVG and target the first child and rotate it by 90
[06:50:44,400] and set the default to open inside of here collapsible trigger with
[06:50:51,360] the prop as child Add a sidebar menu button component with
[06:50:58,080] the chevron right icon from lucid react and give it a class name of transition
[06:51:04,240] transform. So this is the icon that we are going to rotate by 90 once we open
[06:51:09,600] this collapsible and next to it add a folder icon from
[06:51:15,840] Lucid React and then a span with the name of the folder and the class name
[06:51:21,680] truncate and then outside of the collapsible trigger use a collapsible content and
[06:51:30,718] inside of this a sidebar menu sub
[06:51:35,920] and inside of here go over items.mmap get the sub item
[06:51:44,160] and the index and render the tree again. That's right. We are rendering itself
[06:51:51,280] again. And in here set the key to be index item
[06:51:58,478] to be sub item. Selected value to be selected value.
[06:52:04,558] On select to be on select oops parent path to be current path
[06:52:14,000] like that. And that's it for the tree component. What we have to do now is we
[06:52:19,280] have to actually use the tree component. And we're going to do that by going back here inside of the sidebar menu and
[06:52:26,160] simply do data.m map item and index. Render the tree component.
[06:52:33,280] Pass in the key to be index. Item will be item. Selected value will be the
[06:52:39,920] value. On select will be on select and parent path will be an empty string. So
[06:52:47,360] let's see what we didn't use. We didn't use sidebar rail. So, we forgot that.
[06:52:52,958] So, let's go down here after sidebar content and render sidebar rail.
[06:53:02,478] Now, let's go inside of the file explorer. Oh, we already have tree view. So, there we go. Here we have it. And we
[06:53:08,718] can open and close it. Uh, but looks like our select isn't really showing. It
[06:53:14,080] isn't working. So, let's fix that.
[06:53:19,600] Or maybe this is the selected state. I'm not exactly sure. So I'm going to try
[06:53:26,160] and develop something a bit more complicated. So I'm going to try to prompt it to something to create more
[06:53:32,958] files. Okay. So what I did is I asked it to
[06:53:38,320] build a landing page with each part in its own component. And that generated a much better result as you can see. So
[06:53:45,280] what I'm going to do is I'm going to expand this. I'm going to go back to the code and yeah, I still am not able to
[06:53:51,280] select this. So, let's go ahead and look at what we forgot to do. So, okay, these
[06:53:56,638] breadcrumbs are unused. That's okay. Uh, we're going to use them in a moment, but
[06:54:02,400] it seems like this handle file select uh is not working properly. So what I'm
[06:54:10,080] going to do is I'm going to first start by adding a console log
[06:54:16,000] and rendering the file path. So I'm going to open my
[06:54:24,240] inspect element here and okay. Oh, so it looks app name is being sent. Okay, so
[06:54:30,240] that definitely doesn't exist. Let's go inside of a tree view and let's see what I did wrong. So in here we have on
[06:54:38,400] select parent path and then the name. Yes, this this
[06:54:45,920] doesn't look correct. I think I meant this in the current path.
[06:54:53,520] Let me refresh and check. Select the fragment check.
[06:54:59,760] There we go. So I'm I'm not sure if you can see. Well, you can definitely see the code is changing, right? And also
[06:55:06,320] the file is is a little bit bold. So basically the problem was in the tree
[06:55:11,600] view component the current path I hardcoded name when what I should have been doing uh is put it inside of curly
[06:55:19,680] brackets like this. Excellent. So now that we have this uh
[06:55:25,040] the good thing is no more no need for to do anything more in the tree view. Uh
[06:55:30,638] now let's go ahead and let's enable the copy button and let's create the file breadcrumb here. So I want to do the
[06:55:36,718] file uh breadcrumb thing first. So I'm
[06:55:41,760] going to go inside of the file explorer. Um let's go just above it here. So const
[06:55:49,840] file breadcrumb like this. Let's go ahead and create an interface
[06:55:56,638] file breadcrumb props which accepts an individual file path.
[06:56:03,120] Let's extract the file path from here and let's go ahead and get the path
[06:56:10,160] segments by a forward slash and let's limit the maximum number of segments to
[06:56:16,080] be four. So if the path goes deeper than four segments, we're going to be
[06:56:21,360] responsive about it. Now let's do con render breadcrumb items
[06:56:28,638] like this. And in here if path segments
[06:56:34,320] length is lower than or equal than maximum segments add a comment show all
[06:56:41,760] segments if four or less.
[06:56:48,000] So let's return path segments here. Map segment
[06:56:53,120] index const is last will be if the index is equal to path
[06:57:00,718] segments.length minus one and in here return a fragment.
[06:57:07,760] Give it a closing tag. Give the fragment a key of index. The
[06:57:13,680] fragment is imported from React right here. Inside of the fragment, add a
[06:57:19,920] breadcrumb item. Check. Oh, let me just fix bread
[06:57:26,798] breadcrumb inside check is last if it is render
[06:57:33,520] breadcrumb page and inside the segment
[06:57:39,680] and give it a class name of font medium. If it is not last,
[06:57:46,718] we're going to render a span element and segment inside and give the span a class
[06:57:52,718] name text muted foreground. And then outside of the breadcrumb item,
[06:57:59,280] if it is not last, again add a breadcrumb separator
[06:58:05,040] like so. And this was inside of this if. So let's now add else.
[06:58:12,798] We are going to show the first element and then ellipses if we have more than
[06:58:18,798] four of them. So the first segment is what we care about. Path segments first in the array.
[06:58:27,440] Last segment. So path segments.length
[06:58:33,200] minus one. So it's only those two that we care about. And once we get those two, let's simply
[06:58:40,478] return a fragment breadcrumb item
[06:58:46,718] a span first segment with a class name text muted foreground. And then let's go
[06:58:55,520] ahead and add the breadcrumb separator and the breadcrumb ellipses like so. So
[06:59:03,760] render the breadcrumb separator and then a breadcrumb item which renders the breadcrumb ellipses. All of these are
[06:59:10,798] imported from the same thing. Then let's add another breadcrumb item here with a
[06:59:16,320] breadcrumb page and render the last segment inside
[06:59:22,558] and give this a class name of font medium. And finally
[06:59:29,360] outside of this function return breadcrumb
[06:59:36,798] and then breadcrumb list and then render breadcrumb items
[06:59:45,040] like that. So a little bit of effort here to create
[06:59:50,478] nice and responsive file breadcrumbs. And now let's go ahead and let's render them. So that's going to be rendered in
[06:59:58,160] the code view. So there we go. To-do file breadcrumb just above this hint.
[07:00:04,718] Let's render a file breadcrumb. And let's give it a file path to be selected file.
[07:00:12,320] And there we go. App contact tsx features footer hero navbar. And if you
[07:00:18,798] create one that's very deep, it will show a maximum of four folders before it
[07:00:26,000] uses the responsive mode and it will just replace the folders in between with an ellipses which is basically three
[07:00:33,120] dots. Perfect. Now let's implement the copy feature.
[07:00:39,600] So we already did this before. So we can copy it from that place. Handle copy use
[07:00:45,040] call back. If we have the selected file right to the navigator clipboard with files selected file and now we have to
[07:00:52,718] add the set copied state. So let me just add it here above the
[07:00:59,040] selected file. Copied and set copied. Perfect. So now we have handle copy. And
[07:01:04,878] now let's use the handle copy for this button right here. Handle copy. And
[07:01:12,558] let's paste in copied. copied. If it's copied, we will use the copy
[07:01:19,760] check icon. Otherwise, the copy icon
[07:01:26,000] like this. And you should no longer have any errors in your code because we are using everything. So when I click copy,
[07:01:31,680] it turns into a different icon now. And you can see that I just copied that entire thing. Amazing. We just developed
[07:01:39,840] a super amazing file explorer. So now I'm going to try to prompt it to create
[07:01:45,440] a deeper structure. But this is pretty much it for uh this chapter.
[07:01:53,440] All right. So this time I told it build a landing page with each part in its own component. Use deeply nested folders.
[07:02:00,718] And you can see that I definitely got that. So inside of the app folder I have
[07:02:05,840] a landing and then I have features and then I have the file. And you can see our breadcrumb in action now. But for
[07:02:12,478] example, you can see that I can break it, right? I if I open this too much, it breaks. So what you can do is you can
[07:02:18,320] remove the maximum segments here to be three. And it will be reasonable to change the comment here as well. And
[07:02:26,320] this is how it will look like. Then let me just refresh. I think the error was because of the hot reload. And let's
[07:02:31,840] click on the fragment here. So let me select features. Uh okay. So you can see it works. But it
[07:02:39,520] seems like we have some problem here. Uh, okay. List cannot be a descendant of
[07:02:44,798] list. Uh, okay. It's a hydration error. It's not exactly too big of a problem, but I'm
[07:02:53,760] not um I'm not too sure how to fix that at the top of my mind right now. So, I'm
[07:02:59,040] going to leave it like this. I think it's not too big of an issue. It's a small hydration error, but you can see
[07:03:04,558] how it looks, right? And if you click on something simpler like page, you can see that it will display the entire thing.
[07:03:10,958] But for something complicated, it will just show you the first and the last segment. So you can decide if you want
[07:03:17,040] to show that for three segments or for four segments, right? Whatever makes
[07:03:22,718] sense for you. Amazing, amazing job. So I think this was uh a much harder
[07:03:29,600] chapter, but I think it was worthwhile. We have an actual uh file explorer now
[07:03:34,958] that we can copy files from and explore everything that was created. We can scroll. Definitely an impressive result.
[07:03:43,200] So now let's go ahead and mark these things as completed
[07:03:48,798] and let's open a new branch. So 13 code view. Let me collapse this. Open the
[07:03:54,958] source control. Opening a new branch here. 13 code view. Just to double check
[07:04:02,320] that's the chapter's name. Once we are on the new chapter, I'm going to stage all of my changes. 13 code view. I'm
[07:04:09,840] going to commit and I'm going to publish this branch. As always, a reminder,
[07:04:15,520] there's a free code rabbit extension you can use to review your files. And now, let's go ahead and let's see
[07:04:24,000] our pull request. So, I'm going to open this new pull request here. And let's
[07:04:29,440] review our summary. And here we have the code rabbit
[07:04:35,280] summary. We introduced a code viewer with syntax highlighting and GitHub dark theme. We added a file explorer with
[07:04:42,638] three view breadcrumb navigation and a copy to clipboard functionality for code
[07:04:47,840] files. We enhanced the project view with tabbed navigation allowing users to switch between a live demo and the code
[07:04:54,638] view of project fragments. That is exactly what we did in this chapter. As
[07:05:00,000] always, a walkthrough of file by file and of course a sequence diagram. So in
[07:05:05,440] here we have this very complicated component which we build the file explorer which renders the tree view and
[07:05:12,080] then finally the code view. So in here you can see it generated the entire sequence diagram for that component
[07:05:18,958] along with the prisjs code highlighting. So very very good. We have a few
[07:05:25,280] comments here. Um this one is a good comment. It's basically telling us to also add an actual type of check. The
[07:05:33,520] reason it's telling us this because uh it could be anything but then at the
[07:05:40,080] same time we know that it's always going to be an object. It's going to be a type of JSON, right? So, I think this is a
[07:05:47,680] little bit redundant. Adding it would not hurt, but I think
[07:05:52,718] it's okay the way it is right now. I'm not sure about this change. I think uh
[07:05:58,400] it works just fine like this. And in here, I accidentally added two
[07:06:03,680] semicolons in the file explorer props. So, yes, of course, we can remove that. I'm going to do that in the next
[07:06:09,360] chapter. And there we go. Let's merge this pull request and let's go back here and let's
[07:06:16,878] go ahead and go back to main and let's synchronize our changes again.
[07:06:22,718] And once you've done that, go inside of source control graph and just confirm that you merged the 13 successfully.
[07:06:30,718] Amazing, amazing job. That marks the end of this chapter and see you in the next one.
[07:06:37,000] 
[07:06:38,000] In this chapter, we're going to develop the homepage. This will include creating the home layout, the homepage component
[07:06:45,040] which consists of project form and project list. Let's go ahead and let's
[07:06:50,320] start our app. Running npm rundev in one terminal and starting in justestdev
[07:06:56,400] server in the other. And now let's go ahead and make sure we are on the main branch. And you can click on synchronize
[07:07:04,000] changes just to make sure everything is up to date inside of your source control. The last merge should be number
[07:07:10,878] 13. Now, let's go ahead and let's fix one thing that's been bothering me. So,
[07:07:17,200] right now, uh I'm loading my previous project here. You can see that when the project loads, no fragment is selected.
[07:07:25,520] This is because in the messages container here, we commented out this use effect which selects the last
[07:07:31,120] fragment because it was causing problems. You can see that when I enable this, then it works. This is selected.
[07:07:38,958] But it's annoying because if I want to select this one and look at it, you can see that it automatically moves it after
[07:07:45,040] 5 seconds. Why after 5 seconds? Because we refetch every 5 seconds. So this use
[07:07:51,840] effect can obviously be improved. So let's go ahead and make it a little bit
[07:07:56,878] simpler. I'm going to go ahead and remove everything in here for now. And I'm going to start by adding a new ref
[07:08:03,120] right below the bottom ref. add last assistant message ID ref which can be a
[07:08:09,360] simple use ref of a type of string. And now inside of this use effect here
[07:08:16,320] let's go ahead and find the last assistant message. So last assistant message we'll use messages find last and
[07:08:24,958] then simply find the message whose role is assistant. So messages.findlast find the last API is that we are using and
[07:08:33,040] then in here we're going to open an if clause
[07:08:38,080] and what we are going to do is we're going to check if last assistant message
[07:08:43,120] fragment exists and if last assistant message do ID is not identical to last
[07:08:50,320] assistant message id refer. Let me just remove this. So if that's
[07:08:57,520] the case only then are we going to call set active fragment and do last assistant message. fragment and then we
[07:09:04,638] have to update last assistant message id ref.curren to be last assistant message
[07:09:12,878] id and this way we won't have any unnecessary updates and we can remove this to-do here. So let's go ahead and
[07:09:20,240] do a refresh again and there we go. So you can see how it selects the fragment the last assistant message it it can
[07:09:26,320] find. But if I manually select this one let's wait for 5 seconds and you can see
[07:09:31,520] that nothing will change it right simply because this last assistant message ID
[07:09:38,240] ref is stored. So the only time that we are going to override users selection is
[07:09:45,600] if an actual new message arrives. I think that's an okay UX. If you want to,
[07:09:51,840] you can uh improve this logic even further by creating two separate states.
[07:09:57,680] One for the automatic selection of the active fragment and one for the user selection of the active fragment. And
[07:10:04,798] then you can overrule one over the other if that's something you prefer. Because you can see now nothing can change the
[07:10:11,440] fact that this fragment is active unless I do build a yellow landing page.
[07:10:18,478] So if I add this still nothing is happening. I'm still uh having this
[07:10:24,878] older fragment as selected. Only after uh this finally responds with some new
[07:10:32,160] content will the new fragment be automatically selected because it is
[07:10:37,680] constantly looking for the last new assistant message. So, our message
[07:10:44,798] wasn't able to trigger that use effect. And if it simply calls the refetch
[07:10:51,760] request and it receives the exact same messages, we compare the last message ID
[07:10:57,040] with our ref ID. And if it's the same, no, we don't change anything. And there
[07:11:03,120] we go. You can see how it works. I didn't change anything. It just generated a new landing page and it
[07:11:08,798] selected that fragment. That is the exact behavior we hoped for. Amazing.
[07:11:14,638] So, what I want to do now, which you know, you can choose if you want to or not. I just want to remove this handle
[07:11:20,478] from here. I don't like it. So, this is what I'm going to do. I'm going to open
[07:11:25,840] both the project view and I'm going to open the file explorer. And the only thing I want to do in the file explorer
[07:11:32,558] is copy the class name from the resize handle. And then I'm going to go inside of the project view. I'm going to find
[07:11:38,400] the resizable handle here. remove the prop with handle and just paste the class name here. And there we go. Now I
[07:11:45,360] have this type of resizable. And there seems to be some kind of problem. You can see when when you have two
[07:11:51,040] resizables active, you can only move one of them, right? So you can't move this
[07:11:57,280] one. I'm going to explore at the end of the tutorial if that's something we can fix. There might be some solution, but
[07:12:03,440] you know, it's it's not too big of an issue. Great. So now let's go ahead and let's actually uh build the homepage.
[07:12:11,840] So we're going to go and do the following. Inside of your source app folder, create a new folder home. This
[07:12:19,920] is a route group. This will not be a part of the URL, but it can hold things
[07:12:25,520] like layouts. So let's go ahead and build a simple home layout here. The
[07:12:31,200] first thing we have to do in a layout is create props which hold the children. And then we have to do a default export
[07:12:37,600] like this. And in here we assign the props. And we extract the children. And
[07:12:44,320] then inside of here, let's add instead of div, let's add main.
[07:12:49,680] And let's give the main a class name of flex. Flex column, minimum height of
[07:12:55,360] screen, and the maximum height of screen. Like so. And in here, let's add
[07:13:01,360] a div with a class name flex one flex flex column ex four and padding bottom
[07:13:10,240] of four. And inside render the children.
[07:13:15,920] And then what I want you to do once you have this layout tsx it is important that this is called layout. This is a
[07:13:22,240] reserved file name just like a page, right? So, it's important that you use
[07:13:28,160] layout and it's important that you do a default export here. What I want you to do now is I want you to uh move the page
[07:13:36,240] tsx from the app folder, the global one, and drag it inside of the home folder.
[07:13:42,160] So, move it inside. And sometimes this can trigger some unsaved files. So, if
[07:13:47,440] you get any unsaved files here, you can just close them. And if it asks you if you want to save it or not, you can just
[07:13:53,680] click yes. If nothing happened, you can just continue. What basically happens if
[07:13:59,600] that does happen to you is cache, right? The hot reload is currently active. So
[07:14:05,280] sometimes the cache inside of this folder gets confused when you move a page that's currently uh active. So what
[07:14:11,920] did we do now? Well, if you go and click back to the dashboard, nothing changes,
[07:14:17,280] right? That's because what we just did is we created a layout for all of our uh
[07:14:24,718] homebased pages. Right now, this doesn't make too much sense because we only have one page, the homepage, right? But later
[07:14:32,000] in here, we're also going to have pricing and we're also going to have login forms. So that's why instead of
[07:14:38,478] copying this code every single time into each page, we're just going to uh create
[07:14:44,718] a nice little uh reusable layout like so. Now in here, let's go ahead and
[07:14:51,280] let's do the following. I want to create a uh self-closing div like so. and give
[07:14:57,200] it a class name of absolute inset zero minus Z 10 height of full width of full
[07:15:06,320] bg background on dark use bg
[07:15:11,840] radial-ashgradient like so and then inside of here write 39
[07:15:19,520] 9 so 3 93 E48_1
[07:15:24,558] pixel comma transparent
[07:15:29,840] and then underscore one pixel. So this is all one class name dark background
[07:15:36,638] radial gradient transparent right. So all of this is one class name. What's important is that when you hover over
[07:15:42,878] this if you have the tailwind extension you should see the underlying CSS. If
[07:15:48,080] you accidentally add space somewhere that breaks the class. You can see how now it's not working. So just be
[07:15:53,280] careful. Don't add any spaces. I mean, this is not important. This is just for a cool effect you're going to see in a
[07:15:59,360] second. Uh, and now what I want you to do is I want you to copy this again,
[07:16:05,040] paste it, but without the dark prefix here. And you're going to change the color of this to not be this one, but
[07:16:12,558] instead be da d2. And this can still be transparent. And
[07:16:18,160] then just add another one. background dash size 16 pixels underscore 16
[07:16:27,040] pixels. And now you will see a bunch of dots all over your page. So now let's go
[07:16:35,120] ahead and let's actually develop this. So I'm going to go back inside of my homepage right here and we're going to
[07:16:44,000] do the following. I'm going to remove all of these things here because we're not going to need any of them.
[07:16:51,520] I'm going to well I'm just going to clean the entire thing. I don't even need use client here. I'm going to open
[07:16:58,240] a div and I will add a class name here flex flex column maximum width of five
[07:17:05,120] excel maximum width of auto and width full. I will then add a section with a
[07:17:13,040] class name space Y6 py
[07:17:19,680] of 16 pixels. My apologies 16 VH to Excel will be py 48.
[07:17:29,440] Now inside of here I will add a div with a class name flex flex column and items
[07:17:37,440] center. In here, we're going to render an image from next image with the source of logo
[07:17:45,360] SVG out of vibe width of 50, height of
[07:17:52,638] 50, class name of hidden MD block.
[07:17:58,080] Outside of this div encapsulating that image, I will add an H1 build something
[07:18:04,240] with vibe or the name of your project. And we're going to put this heading give
[07:18:09,840] this heading class name text to Excel medium text 5 Excel font bold and text
[07:18:18,240] center. And you should already be seeing something here. Now below this heading
[07:18:24,240] add a paragraph create apps and websites by chatting with AI and give this a
[07:18:33,200] class name of text large medium text extra large text muted foreground and
[07:18:40,638] text center. There we go. And now below that add a div with a
[07:18:49,120] class name maximum width of 3 Excel MX auto and width full and nothing will
[07:18:57,760] appear now. That's because we have to create a new component called project
[07:19:03,600] form. Now the cool thing about project form is that you already built this. You
[07:19:10,000] just don't know it. So what we're going to do is we're going to reuse one
[07:19:15,120] component that we already have and we're going to go inside of modules projects
[07:19:20,638] UI components and in here we have the message form. Now technically we could
[07:19:26,160] modify this message form with a prop. You know I could just pass a prop here like is homepage is landing page and
[07:19:33,200] then we could modify the CSS. But honestly, I would rather keep components separate than creating this magical
[07:19:40,160] components which can be used a million times, right? I'm okay with copying my code if it's for one, two, three
[07:19:46,798] instances. I'm I would rather do that than creating this ambiguous abstract code that's impossible to keep track of.
[07:19:53,840] Right? So, this is what I'm going to do instead. I will copy that message form and I'm going to go ahead inside of
[07:20:00,400] modules and I will create home module. And inside of here UI and then
[07:20:06,878] components and then in here I will create project form.tsx.
[07:20:12,638] And then I will copy everything inside of the projects UI components message form and I will paste it here like this.
[07:20:20,878] And then I will remove the props because we don't need them. And this will now be called project form. There will be no
[07:20:27,440] props for this. the value will still be the same but it will not be creating a
[07:20:33,040] message. It will be creating the project. So this will be called create project.
[07:20:39,520] So let's go ahead and see what we have to do. We will reset the form. Uh actually we don't have to reset the form
[07:20:46,478] and I'll tell you why. Because on success we're going to uh reinvalidate anyway. So let's go ahead and do this.
[07:20:53,840] After we reset the form, the only thing we should actually oh I'm sorry after we successfully create a project, the only
[07:21:00,400] thing we should do is we should call PRPC.pro and we should just refetch get many.
[07:21:06,400] That's the only thing that should happen and then also we should invalidate the usage status. So we can leave this to do
[07:21:12,320] and the same thing for this. But also one more thing that should happen here is that we add router use router from
[07:21:19,200] next navigation. Let me just move this here.
[07:21:24,638] When you successfully do this, let's do router.push and we push to the newly created
[07:21:30,400] project. So that's going to be forward slash projects data
[07:21:36,240] id. As always, we have this data because in the projects create procedure here
[07:21:41,680] when we create the new project and then we invoke a background job, we return that new created project. So we have
[07:21:47,840] access to it right here. Great. So on submit we'll be calling create project
[07:21:53,360] and we don't need the project ID here at all. For the is pending we will have
[07:21:59,280] create project is pending like so we can remove the show usage uh from here
[07:22:05,840] entirely. We don't need it on the homepage. So you can remove this show
[07:22:10,878] usage here like so. Uh what would you like to build can stay the same to
[07:22:17,200] submit? to submit. Honestly, I think everything else here works just fine.
[07:22:23,200] So, yes, just a slight modification here. And now, let's go ahead and use it
[07:22:30,000] inside of our app homepage.tsx. Let's import project form from modules
[07:22:37,360] UI components project form. And I think we also need to add use client here
[07:22:43,200] because it's imported in a server component. So, it wouldn't work. And there we go. This is how it's going to look like
[07:22:50,878] and you can already try it. So, build a landing page. I like to use this example because I think it's super simple and
[07:22:57,200] works almost every time. And there we go. You can see what happens. So, from the landing page, we create a new
[07:23:02,558] project with build a landing page initial message. Perfect. So, if you want to, you can wait for the result.
[07:23:08,400] Uh, I know it's very fun to always see the results. So I I completely understand if you want to, but I'm going
[07:23:14,240] to go back to the project form. And what I'm going to do now is I'm going to show you how you can create some predefined
[07:23:20,798] prompts for the users so that they can easily click on them here. So it's so that they can see the results faster. So
[07:23:27,680] this is what we're going to do. We're going to do this inside of the project form. So in here,
[07:23:33,280] go outside of this native form elements and create a div
[07:23:38,558] with a class name. flex wrap justify center gap 2 hidden MD plex and a
[07:23:48,798] maximum width of 3XL. And now in here what you should do is
[07:23:54,320] you should create something called project templates.
[07:23:59,840] So you can go inside of the public assets folder which you can see the link for on the screen or you can use the
[07:24:05,600] link in the description and in here you can find uh constants.ts. TS. And in
[07:24:11,120] here, I just created a bunch of project templates for you. Uh, and you're going to have to, you know, test each of these
[07:24:17,200] out depending on the model you will use and what works for you and what doesn't because it's a good idea to showcase
[07:24:23,440] your project templates on something that you know will always work with your AI model. Right? So, I'm going to put this
[07:24:30,000] inside of home. I will create new constants. DS and I will paste that here. So basically something like build
[07:24:36,240] a Spotify clone, build an Airbnb clone, build a store page, YouTube clone, file
[07:24:41,280] manager. And I'm just using very descriptive prompts here because it will work better if you give it a good
[07:24:48,000] description. But the cool thing is that you know you have full freedom to improve the prompt in any way. In here
[07:24:55,440] when I select build a Netflix clone, the full prompt will be build a Netflix style homepage with a hero banner. uh
[07:25:02,320] use a nice dark mode compatible gradient here. Movie sections, responsive card, and a model for viewing details using
[07:25:08,638] mock data in local state, use dark mode, right? So, it's a very descriptive uh prompt. But depending on what model you
[07:25:15,520] use, you might be able to do it with just build a Netflix clone, right? It
[07:25:21,600] will just depend on the prompt that you're using and the model that you're using. For example, Claude Sonet
[07:25:28,160] understands uh your instructions very very well. But with OpenAI, I sometimes
[07:25:33,200] have to tell it, you know, if you're using dark mode, make sure you use Next
[07:25:38,558] themes because you have Shhatzen installed, right? I have to tell it uh a
[07:25:44,638] more in-depth about what's going on. So, make sure you have this project templates. And now what you're going to
[07:25:50,638] do is you're going to iterate over them. So, project templates, which I've just imported from dot dot /constants here,
[07:25:59,040] dom. And for each template,
[07:26:04,240] I'm going to return a button component, I'm going to give the button a key of
[07:26:11,040] template dot title. And then I'm going to add some additional attributes to the
[07:26:17,040] buttons. So variant of each will be outline. Size will be small. Class name
[07:26:25,040] will be background white and dark background sidebar.
[07:26:30,240] On click here on select will be called which we don't have yet. So let's just leave it as
[07:26:35,920] empty. And then let's put template emoji. And let's put template title.
[07:26:42,398] And let's see that now. And there we go. So you can see that now beneath this big
[07:26:47,440] input bar uh you can select any of these. So let's go ahead now uh and just
[07:26:54,478] properly space these things out. So what I want to do is I want to wrap my form inside
[07:27:01,280] of a section with a class name space Y
[07:27:07,360] six like so. and just encapsulate all the way to here like that. And then you
[07:27:14,798] can indent the entire thing and now you have a nice space in
[07:27:20,080] between. And now we have to create the ability to actually select this. So for
[07:27:25,280] this I'm going to add const on select content string
[07:27:31,600] form set value content or whatever you use. Let's see. So we use uh value is
[07:27:39,360] the one we use. So set value to be content or you know you can just put
[07:27:44,398] value here. A lot of value. Uh and what's important you do is you enable
[07:27:51,200] all three should to true should validate to true and should touch to true. This
[07:27:57,440] will basically simulate it to be in the same state as if the user actually typed this. So now what you have to do is you
[07:28:04,638] have to add the on select to the buttons. So call on select and pass in the template.prompt
[07:28:12,638] like so. So now when you click on build an admin dashboard there we go you can
[07:28:18,558] go ahead and run this. So I suggest that you try running this and also keep in
[07:28:24,638] mind some of these are larger tasks so they might actually time out right. So
[07:28:30,558] be mindful of that. The good thing about uh ingest is that if it notices a rate
[07:28:36,320] limit, it won't retry immediately. It will it will retry with exponentially
[07:28:41,600] longer pauses between each retry, which if you're using Open AI is perfect because Open AI has reasonable timeouts.
[07:28:49,040] So when you hit a limit in Open AI, they punish you with like 2 seconds of
[07:28:54,398] waiting time. So inest will wait for even longer than that. And if it happens
[07:28:59,440] again, it will wait for even longer. So you don't have to worry. Ingest and OP and I are quite a good combination. Uh
[07:29:06,478] and you can see that with this longer prompt right where I told it, let me just see create an admin dashboard with
[07:29:13,520] stat cards, placeholder, all of those things, blah blah blah. And here it takes a bit of a longer time. You can
[07:29:18,958] see almost a minute. But as I said, you can speed these things up by using a different model. You can create a
[07:29:25,120] smoother prompt, right? A lot of things you can do. So let's just see this result. I'm very curious if it will work
[07:29:31,200] or not. And there we go. So almost the exact same thing as we saw uh in the
[07:29:37,120] initial demo. Amazing. And you can see the code here. Very very good. So I
[07:29:43,840] would suggest that you, you know, try a couple of these and if some are obviously failing, well, you can try
[07:29:50,398] and, you know, fix them in the prompt or you can simply replace them with something simpler because if you're
[07:29:55,680] actually building this as a business, it's a good idea that you, you know, allow the user to select something that
[07:30:01,760] will 100% work, right? You don't want to give them something that might work or might fail, right? Perfect. And I'm just
[07:30:10,398] super interested. Let me just go back here. I want to change this to dark mode. I want to see how this looks like.
[07:30:16,320] Looks pretty good. Great. Uh but I actually prefer working in light mode. So let's go ahead now and let's develop
[07:30:24,478] the bottom part which is the project list. So so far we created the project
[07:30:29,520] form and the layout. Now let's create the project list. In order to do that, we have to go back to our page dsx where
[07:30:37,600] we render the project form and we have to render the project list outside of
[07:30:43,680] this section. So project projects list like this.
[07:30:50,240] And then let's go inside of our home modules here. So home UI components
[07:30:56,478] projects list.tsx. Let's mark this as use client. And let's
[07:31:03,280] import everything we need here. So link from next link and image from next image
[07:31:11,440] format distance to now from date FNS use query from tanstack react query
[07:31:21,440] and use tRPC from TRPC client and button from components UI button. Let's export
[07:31:27,840] cons projects list here and let's start by defining the RPC.
[07:31:34,320] Then let's define data projects to be use query
[07:31:39,840] DRPC projects get many query options
[07:31:45,600] like that and then in here let's return a div with a class name full width
[07:31:53,440] background color of white dark background color sidebar rounded extra
[07:31:59,360] large adding eight border flex X flex
[07:32:05,120] column gap Y 6 SM gap Y4.
[07:32:10,878] Then let's add an H2 element which will just say previous vibes or saved vibes.
[07:32:19,040] I thought it would be fun to call old projects vibes because the project name is vibe, right? You can of course just
[07:32:26,398] say old project, saved projects, whatever you want. So text to Excel and
[07:32:31,760] font semi bold. Later this will say Antonio's vibes or whoever is logged in.
[07:32:36,878] But since we don't have out yet, we can't display that just yet. So now let's just import the projects list
[07:32:43,120] simply so we can start seeing the progress. So right here at the bottom
[07:32:48,638] you should see saved vibes right here. It should look like this.
[07:32:55,520] So now let's go ahead below this and let's create a div with a class name of
[07:33:01,440] grid grid columns 1 SM grid columns three and gap of six and then in here
[07:33:10,080] check if projects.length this should be a question mark so if
[07:33:15,200] projects.length length is equal to zero. In that case, let's display a div with a
[07:33:21,120] class name all span full and text center. And inside a paragraph, no
[07:33:28,080] projects found and a class name text small and text
[07:33:34,160] muted foreground. Otherwise, let's do projects do map get
[07:33:40,718] the individual project here and then return a button.
[07:33:47,920] Give this button a key of project ID, a variant of outline, and a class name
[07:33:55,520] font normal, height auto, justify start, full width,
[07:34:02,320] text start, and the padding of four, and give it an as child prop. Then go ahead
[07:34:08,638] and add a link here with a dynamic href forward slash projects project.
[07:34:16,798] ID and then inside of here create a div
[07:34:22,240] with a class name flex item center and gap x of four. Then add an image here
[07:34:29,840] with a source of logo SVG out of vibe
[07:34:35,200] width of 32 height of 32 and the class name object contain. Below the image,
[07:34:43,520] add a new div with a class name flex and flex column.
[07:34:50,798] Inside of that div they have an H3 element with project.name name inside
[07:34:58,320] and give the H3 element a class name of truncate and font medium and below it a
[07:35:05,680] paragraph using format distance to now which we imported from date FNS
[07:35:11,760] project updated at add suffix true and give the paragraph a
[07:35:19,840] class name text small and text muted foreground and that is it. So in here now you can
[07:35:27,200] see all of your previous vibes. So you can go ahead and visit them. And in here
[07:35:32,798] the source code is of course preserved. Great. So I believe that that marks the
[07:35:38,798] end of this chapter where the goal was to build uh a
[07:35:43,920] the goal was to build uh a landing page and we added the templates, we added the
[07:35:49,440] project list. We added the ability to you know look at this older projects and
[07:35:55,280] I think we did an amazing amazing job here. Obviously there are some things still missing like the navbar but we
[07:36:02,080] will do that later when we add authentication. So, what I want to do in the next chapter is I actually want to improve
[07:36:08,878] the theme of this project because my original theme in the demo was some kind of yellowish color. So, I'm going to
[07:36:14,878] show you how I modify the theme to make it look like that. And I'm super interested in the result of this. So,
[07:36:20,638] I'm just going to wait. Uh hopefully it will work. If not, you know, it's just a lesson that these AI models are a bit
[07:36:27,840] undeterministic. You can't really rely on them too much. But if you spend you
[07:36:33,200] know more than uh I built this app in a span of a month right so I couldn't
[07:36:39,200] really spend too much time learning proper prompt engineering but if you actually use this for your business you
[07:36:45,600] are most certainly going to spend a lot of time on this and you will learn prompt engineering and you will learn
[07:36:51,680] how to improve the prompt and how to fix this little mistakes because in comparison to what you've just built an
[07:36:58,718] app failing is really not a big issue. You can learn how to speed it up. You
[07:37:03,760] can use a new model. Uh you can spend, you know, more credits. You can basically do a billion solutions, but
[07:37:10,638] the boilerplate is here and it's working.
[07:37:15,840] So, for example, you can see that I've gotten an error for this file manager. You might not get an error. Again, it's
[07:37:21,840] a very simple fix. It forgot to add use client to the top of the file. We can see that in the file grid, it was
[07:37:27,760] supposed to add use client, but it didn't. right? Or it should have added it to the page. So perhaps this can be a
[07:37:34,320] very very easy fix. You know, you can maybe tell it inside of the prompt right
[07:37:40,558] here. You can somewhere add a rule that it must add use client.
[07:37:48,080] How about this? Let's add always add use client to the top of page tsx.
[07:37:58,000] So because we are not expecting this to make any API calls right. So then I can
[07:38:03,520] maybe remove this and I can just extend it and any other relevant files which
[07:38:09,600] use browser APIs or react hooks use effect. Okay, I
[07:38:18,000] won't add too many tokens now. But for example, you can do things like this. And I think that already uh this should
[07:38:24,958] work much much better. And I purposely want to retry it now just to see if that will fix. I'm trying to teach you that
[07:38:30,878] you know you don't have to use this prompt. You can make your own prompt. Like I built this prompt and I have no
[07:38:36,160] idea about prompt engineering. I just started very simple and then I extended and I extended and I extended. Right? So
[07:38:43,360] I just added this file safety rule to always add use client at the top of page.tsx
[07:38:49,360] simply because uh if it does that it doesn't have to worry about adding it to the other places. So let's see if this
[07:38:56,000] will fix the problem or maybe some new problem will arrive.
[07:39:01,360] And finally I managed to get it to work. So this was very funny. It actually
[07:39:07,360] failed uh again, right? It forgot to add use client again. But look at this. It
[07:39:13,920] added it but it didn't add it at the top of the file. So you can see how funny these AI models are. Sometimes you will
[07:39:20,638] lose your mind trying to tell it to do something right. So this is what I did. I modified this always add use client to
[07:39:28,000] the top the first line of app page tsx. So this way it understood me and it did
[07:39:35,040] an interesting thing this time. You can see that it understood what I wanted now
[07:39:40,718] and also it decided to create a whole new separate file where it created
[07:39:46,160] everything. I'm not sure why it needed to do that. Um, but let's see what it
[07:39:51,200] created because I think that this is very interesting actually. Can I rename this? Okay, I can't do that. Oh, I can.
[07:39:59,120] One, two, three. Save. Oh, it works. I can rename. I can delete. Or can I? I
[07:40:05,600] can. This is actually super impressive. Can I delete entire folders? Looks like
[07:40:11,680] something's wrong with the models. Keep in mind that sometimes the problems aren't in code, but the problems are in
[07:40:17,520] the iframe, right? Sometimes you might have to visit a live example. Wow, this is actually a very very nice example of
[07:40:24,080] a file manager. But yeah, you can see that I had to struggle a bit with this, right? I got a very good result in the
[07:40:31,120] end. But you know, the prompt can always be better. Again, I'm not a prompt engineer. I have no idea what I'm doing
[07:40:37,280] when it comes to prompt engineering. So, spend some time learning that and you will get even better results than uh
[07:40:43,600] what I am in this tutorial. But I still managed to get extremely impressive results.
[07:40:48,958] Great. So I believe that that marks the end of this chapter now. So 14 homepage.
[07:40:55,280] Let's go ahead and close everything here. And I will go and create a new branch. 14 homepage
[07:41:03,920] like so. I'm going to stage all of my changes and I will create a commit. 14 homepage. I
[07:41:11,680] will commit and I will publish my branch. Perfect. Now, let's go ahead and open a
[07:41:18,160] new pull request here. And let's create a pull request.
[07:41:24,558] And let's wait for the summary to arrive. And here we have the summary. We
[07:41:30,798] introduced a new homepage layout with a visually enhanced background and responsive design. We added project
[07:41:37,040] creation form with template section, validation, and keyboard shortcut support. Basically, a copy of our
[07:41:43,040] message form, right? We implemented project list view showing saved projects with quick navigation and relative
[07:41:49,680] timestamps. We provided a set of predefined project templates for faster project setup. We also fixed the
[07:41:56,798] fragment handling uh to prevent repeated state updates. Exactly. Uh and we also
[07:42:02,878] updated the resizable handle styling for a smoother and more interactive user experience. And it also detected our
[07:42:09,680] prompt change where we clarified the requirement for the use client directive in relevant files. Excellent. So in here
[07:42:18,398] as always we have a more in-depth walk through. In here we have a sequence diagram explaining exactly how all of
[07:42:24,478] those things happen. And in here we have some comments. So it suggests adding some loading states here in the project
[07:42:32,160] list. Uh we could very much do that. We could even leverage our pre-fetching and suspense. We'll see how we're going to
[07:42:38,320] handle that later. And in here, it suggests also adding is dirty check. I'm
[07:42:45,440] not sure if we need that. I think I completed the project without it. So, I think we don't need this. So, I'm going
[07:42:52,718] to merge this pull request here. And after I've done that, I'm going to go back inside of the main branch. And I'm
[07:42:59,360] going to click on synchronize changes. And after that my graph here will update
[07:43:05,120] and it will show me that pull request 14 uh was just merged. Amazing amazing job.
[07:43:11,680] I believe that marks the end of this chapter and see you in the next one.
[07:43:17,000] 
[07:43:18,160] In this chapter we're going to learn how to change the theme of our project and
[07:43:23,200] I'm going to show you two ways you can do that. The first one is to simply visit my public assets folder or if you
[07:43:30,000] have access you can use the source code. Basically just visit the link you can see on the screen or the link in the
[07:43:35,120] description and from in here you can find globals.css
[07:43:40,798] and in here you can click copy or you can you know manually select and copy things and then go inside of your source
[07:43:49,280] app globals.css ensure that you are on your main branch
[07:43:54,320] and you can synchronize changes if you aren't sure. Make sure that the last merge was 14 and simply replace the
[07:44:01,920] entire globals CSS file. So in here uh
[07:44:07,680] alongside changing all the colors, this will update as well. This is basically
[07:44:12,718] what enables button to have a cursor pointer just in case you were wondering.
[07:44:18,000] So this is new and basically the colors were modified. And if you take a look at
[07:44:23,200] your app now, you will see that we have this new orange color. And if you go to
[07:44:28,558] the dashboard, you will see that it's more of a yellowish color. So this is the one that I like. But I want to show
[07:44:35,680] you exact place where I found this and how you can create your own uh CSS
[07:44:43,120] theme. So for now, what I'm going to do is I'm just going to revert this simply so it is the old global CSS. You don't
[07:44:51,680] have to, right? If you like the theme, you can copy from my uh GitHub assets,
[07:44:57,280] you can use it. But let me show you how I even found that theme. I basically
[07:45:02,638] used tweak cn.com. Again, you can use the link in the description or the link you can see on the screen. And in here,
[07:45:09,520] you can go inside of try it now. And you can basically click here and find a
[07:45:15,520] bunch of different themes for UI. And I think it is super cool. And the one I
[07:45:21,600] selected was cloth, right? And in here you can check how it looks in light mode and how it looks in dark mode. I think
[07:45:28,000] this is an amazing project. It has so many themes you can try from. So I
[07:45:33,120] purposely want to pick uh some theme that I haven't tried before. Let's see
[07:45:40,398] how about I try this claymorphism. So the way you would do it is you would click on code and in here you can see
[07:45:48,320] that they are taking care of Tailwind versions right so I would take Tailwind version 4 and if you want to you can
[07:45:55,040] just use the CLI to do it but you can also just copy this and then you will
[07:46:01,360] have to replace your root your dark and theme inline. So let me
[07:46:08,558] show you how you would do that. So starting from the theme inline root and dark, we select all of these and you can
[07:46:16,240] remove them. So this is how the global CSS looks now. And you just paste the new one here. And that changes the
[07:46:23,680] entire look of your app. As you can see, it looks very different now. Right? So if you like this one, you can use this
[07:46:30,160] one. Right? I personally like the look of Claude. So I'm going to select Claude
[07:46:38,080] right here. code uh code and I will click copy and then the same thing you basically select
[07:46:46,240] the root the dark and theme inline and you can delete it. So this is how it
[07:46:52,240] should look like and paste your new ones here and then your app should look like this. I think this is a very very nice
[07:46:59,120] look. Uh and it has nice borders. Everything just looks nice with this
[07:47:04,798] style. Again, I don't know how well this website will be maintained. I don't know
[07:47:10,398] if this will be available, you know, 2 years from now. I hope it will because it's an amazing project. But then again,
[07:47:16,000] Shhatzen can update a lot and they will probably update the app accordingly to that. So, because of that, I am offering
[07:47:22,478] you my globals.css which you can copy from the source code or the global assets and just paste the
[07:47:30,398] entire globals.css inside. And if you're using this my globals.css, you will
[07:47:37,120] notice that now buttons have cursor pointers. They look clickable, right?
[07:47:42,798] Each of these buttons look clickable. That is because of this part. Let me show you this one. So if you don't have
[07:47:50,558] this u it will not come with uh tweak CN. So it doesn't come with this. I added this myself in my global CSS. So
[07:47:59,360] basically this is a way to enable cursor pointer for all buttons which are not disabled. So you can add this little
[07:48:06,320] snippet if you want to and then your buttons will have proper uh cursor
[07:48:11,680] pointers. I just think that this looks way better than everything than anything else. Right now let me try and go to one
[07:48:19,760] of my previous projects where I have a lot of fragments. You can see how now fragments look clickable. Right? They
[07:48:26,478] have a proper cursor on them. Great. I am super satisfied with this one. So, I will leave it at this. And while we are
[07:48:34,240] here, there is just one more thing I want to do. So, just go in any of your projects and let's go ahead and do the
[07:48:40,000] following. Select your theme. I would recommend using my global CSS and then
[07:48:45,280] later at the end of the project, you can modify it to whatever theme you like, but it will be easier for you to have
[07:48:51,600] the exact same result as me. So, that's why you can use my global.css. Keep in mind that this is for let me show you
[07:49:00,240] next version for next 15.3.4 four, right? So, if you are watching this two
[07:49:07,200] years from now, I have no idea if it will work for you and whatever is the latest version, but if you're using a
[07:49:12,798] similar version like me, uh or if you're using the exact version as me, it will work. Great. So, now let's go ahead and
[07:49:21,280] do one more thing. Let's go inside of our button inside of source components UI button. And in here, I want to add a
[07:49:29,040] new variant called uh terriiary. I don't know how to pronounce this to be
[07:49:35,920] honest. I never I always mess this up. But basically, it's going to be background primary with 25% opacity. In
[07:49:43,600] dark mode is going to be BG primary again, but 30% opacity. Text will be
[07:49:49,600] primary. Shadow will be extra small. Hover will be BG primary 20.
[07:49:57,120] BG primary 20. And on dark mode, hover will be BG
[07:50:03,680] uh let me just check on dark mode hover will be BG primary
[07:50:09,680] 25%. And now go inside of your project view here
[07:50:14,798] and in these tabs find the upgrade button and give it a variant of this
[07:50:22,000] new one. However you pronounce this, right? And then when you look at it, it will
[07:50:28,080] look like this. It's a kind of uh lighter version. And let me switch to dark mode and still looks good. And of
[07:50:35,520] course, check your app in dark mode to see it looks fine. I very much like this
[07:50:40,878] look of the app more than all the other themes, but you're of course free to choose your own. And I like how this
[07:50:46,798] becomes orange now when you resize your panels. Uh great. So this was a very
[07:50:53,040] very easy chapter. So let's go ahead and just quickly merge this. So mark this as
[07:50:59,120] complete and 15 theme. I'm going to open a new branch here. Let me just see what
[07:51:06,080] did we all change. We'll change this to 30 this new variant here. And we changed our theme overall. So I'm going to
[07:51:14,798] create a new branch 15 theme. I'm going to add all of the
[07:51:21,440] changes. 15 theme. I'm going to commit and I'm going to publish the branch. And
[07:51:26,798] there's really no need for any review because this was a super simple uh change. So I'm going to immediately
[07:51:33,360] merge this pull request. So we speed things up. There we go.
[07:51:40,000] So just three simple changes and we can immediately merge it. We don't need to wait for any review this time. It's much
[07:51:46,478] simpler. And after that's done, let's go inside of main and let's synchronize our
[07:51:52,478] changes. And then your last merge here should be 15 theme. Amazing amazing job
[07:52:00,160] and see you in the next chapter. In this chapter, we're going to add
[07:52:03,000] 
[07:52:06,398] authentication to our project. This will include creating a clerk account,
[07:52:11,520] setting up clerk, creating the necessary components to display the authenticated state, creating protected TRPC
[07:52:18,958] procedures, and updating the Prisma schema. Let's start by creating the
[07:52:24,160] clerk account. You can use the link you can see on the screen or the link in the description.
[07:52:29,920] And once you get to the landing page, you might see something interesting in here where they mention the companies
[07:52:36,718] that use clerk. You can actually find injust the company that we are using for
[07:52:41,920] our background jaws. And you can confirm that yourself by going in their signin screen and searching for clerk inside of
[07:52:49,040] their network tab. And in here you can see that they are actually making requests for clerk. And I just think it
[07:52:54,798] is super interesting that such a uh great company uses the same authentication system that we are going
[07:53:00,558] to implement in our project right now. So let's go ahead and do that. Once you create your account here, you will be
[07:53:07,120] redirected to the dashboard. And in here you can click create application. I'm
[07:53:12,478] going to call this application Vibe. And I'm going to enable email and Google. You can of course enable all of these
[07:53:19,120] other providers if you want to. And I will click create application.
[07:53:24,718] After we do that, we have to install the Nex.js clerk package. But just before
[07:53:29,760] you do that, ensure that you are on your main branch. Ensure that your last change was 15 theme and that you have
[07:53:36,558] synchronized all of your changes. Now let's go ahead and let's run npm
[07:53:41,680] install lurk nex.js. And once it's been installed, I'm going to show you the
[07:53:46,718] exact version that I will be using, 6.23.0.
[07:53:52,878] Now that we have that, let's go ahead and add the environment variables to our environment file. So, I'm going to go
[07:53:59,280] ahead and add clerk and paste these two. I like to wrap them in parenthesis, but
[07:54:04,878] I think this might depend on the system. I think Windows might have problems with this. Uh, but I think maybe even not. I
[07:54:12,718] think all of these will work just fine. But yeah, in case you were wondering, I
[07:54:17,840] like to wrap them in parenthesis. They don't have to be in parenthesis. So, all of these could actually be without
[07:54:23,760] parenthesis if that's something you prefer. I just feel like the syntax looks better with parenthesis.
[07:54:31,040] Uh, I keep saying parenthesis, I mean quotes. Sorry. Uh, okay. Now, let's create our middleware file. So, that's
[07:54:38,638] going to be inside of the source folder. Create middleware.d DS. Make sure to not misspell this. Middleware.ds.
[07:54:46,160] It's a reserved file name. We import clerk middleware from clerk next.js server and we export default clerk
[07:54:52,718] middleware middleware and we add a matcher. So, uh, we target all of these files here.
[07:54:59,360] Excellent. So, now that we have this, let's go ahead and let's add the clerk provider to our layout. So, I'm just
[07:55:06,478] going to import clerk provider to our root layout. So app folder
[07:55:12,320] layout. Let's go ahead and import clerk provider from add clerk next.js
[07:55:21,520] and I'm going to wrap the entire application inside of a clerk provider. Yes, make sure you wrap your TRPC React
[07:55:28,558] provider inside of clerk provider as well. Like that. So let me just confirm that I use the correct package and just
[07:55:35,520] confirm that they've done this as well. Perfect. And now let's go ahead and
[07:55:40,558] let's do npm rundev here. You don't need to start your uh ingest right now
[07:55:48,478] because we will be doing some other things. So what I did is I went to the end here and I clicked on next steps.
[07:55:54,240] Utilize your own pages for authentication. The account portal is the fastest way to add authentication.
[07:55:59,600] So let's click continue to the next GS guide. And the first thing we're going to do is we're going to add this uh sign
[07:56:06,478] in pages. So let's go ahead and do that. I'm going to go inside of source app
[07:56:13,040] home here. And now I'm going to create a new folder called sign in. And then
[07:56:18,558] inside I will create another folder which will use the catch all route sign
[07:56:23,920] in like this. It needs to be exactly like this. And then page.dsx inside. And
[07:56:31,280] now let's go ahead and let's import sign in from clerk nextjs and let's do a page
[07:56:41,920] export here with a div which will have a class name of flex flex column maximum
[07:56:49,920] width of 3 excel mx out and width pool and then let's add a section which
[07:56:58,240] includes a class name space Y 6 padding top of 16 VH and to Excel padding top of
[07:57:07,760] 48. Inside of this section, add a div with a class name flex flex column items
[07:57:16,878] center. And inside of here, render sign in. Whoops.
[07:57:23,680] Sign in like this. And once you've added this, you can go ahead and copy this and
[07:57:31,040] you can add sign up here like so. And then change this to be sign up as well.
[07:57:38,558] Go inside of the sign up page and replace sign in import with sign up import.
[07:57:45,200] And then let's go ahead and do the following. So we're going to set this to be public
[07:57:52,398] route. So, we are going to go inside of our middleware.ts.
[07:58:01,040] We're going to import create route matcher right here. And we're going to define a
[07:58:06,878] constant is public route using create route matcher. And we are going to
[07:58:12,000] target sign in. And then we're going to change this
[07:58:17,840] expert default clerk middleware to include an arrow function which checks
[07:58:23,440] if the current request is not a public route and then it will redirect to the
[07:58:29,680] protect page. And then what we have to do is we have
[07:58:34,878] to modify our environment variables. So let's go ahead and go inside of
[07:58:40,878] environment variables here and let's add that next public clerk signin URL is
[07:58:47,360] forward slash signin and the fallbacks will be an empty forward slash. So next
[07:58:53,680] public clerk sign in fallback redirect and next clerk sign up fall back redirect urls. Perfect. And now I think
[07:59:01,680] that already you should be able to see this. If you go to localhost 3000, I think you should immediately be
[07:59:07,680] redirected to this page, right? And if you try to visit any other page like try
[07:59:13,440] to visit some older project like projects 1 2 3, you get immediately
[07:59:19,040] redirected back to the signin page. So all pages are now protected. We are of
[07:59:24,160] course going to slightly modify this by going inside of the middleware and let's
[07:59:29,760] modify this array of public routes to also include a forward slash and I like
[07:59:36,878] to use these types of quotes and we also uh actually yeah I think this uh
[07:59:46,398] we also need forward slap API inest
[07:59:51,920] like this. So make sure you add this otherwise background jobs will not be able to work. So we need to allow inest
[07:59:58,240] to be contacted. Great. So once you've done this you should now be able to visit the
[08:00:04,798] localhost 3000 page. There we go. You can see that now we can visit this but we still can't visit the individual
[08:00:11,280] project page. So uh and yes I am in dark mode. You might be in light mode. It
[08:00:16,878] doesn't matter. So now let's go ahead and do the same thing that we did.
[08:00:23,040] Let me just go here. The same thing that we just did for sign in. We are now going to do to the sign up page. So we
[08:00:30,240] just did this. So we don't have to do it. I told you like already that you can just copy the sign in and do it right
[08:00:37,280] here. But what we need to do is we need to add sign up to the list of our public
[08:00:42,320] routes. So let's see. Did we do that or not? We didn't. So let's add it.
[08:00:48,160] There we go. So sign up is now added to the list the same as sign in. And then
[08:00:53,200] we also need to add all the environment variables here. So let's go inside of environment here. And let's just add
[08:01:00,798] some so next clerk next public clerk sign up URL
[08:01:06,000] and the redirect URLs for sign up fallback and sign in fallback.
[08:01:12,558] And looks like these are duplicates. So yeah, I think you only need one of these
[08:01:18,000] and one of these. So yeah, you can do remove these two and just move these two. There we go. At least I think that
[08:01:25,360] they were duplicates, right? I think they were. Uh, and now you should be
[08:01:30,478] able to go uh manually. You can just enter any other route. Try going to
[08:01:36,160] projects one to three. You will be redirected. And if you click sign up, you should be taken on the same layout.
[08:01:42,558] As you can see, it loads the sign up page. So now you can switch between the two. Perfect. Uh so now what I want to
[08:01:50,878] do before we even log in, I want to go back to localhost 3000 here and I want
[08:01:57,040] to create a navbar. So let's go inside of our home module.
[08:02:04,240] So that's going to be inside of source modules home UI components. And in here,
[08:02:13,680] go ahead and create navbar esx. Let's go ahead and mark this as use
[08:02:19,360] client. And let's import link from next link. Let's import image from next
[08:02:25,600] image. Let's import all of these from clerk next.js. Signed in, signed out,
[08:02:31,040] sign in button, and sign up button. And then let's import button from components
[08:02:37,600] UI button. Let's export con navbar here and let's return a nav element.
[08:02:45,440] Give this nav element a class name of padding 4, background color transparent,
[08:02:51,520] fixed top zero, left zero, right zero, zindex of 50, transition all, duration
[08:03:00,638] 200, border bottom, and border transparent.
[08:03:06,398] Inside of this div uh nav add a div with a class name of maximum width 5 xl mxal
[08:03:14,798] width full flex justify between and items center.
[08:03:22,638] Add a link inside with an href to a forward slash with a class name of flex
[08:03:29,600] item center and gap of two. And in here render an image with a source
[08:03:37,120] of logo SVG out of vibe width of 24 and
[08:03:43,680] height of 24 as well. Add a span with a
[08:03:49,760] text vibe inside. Add a class name font semibold and text large like that.
[08:03:57,600] And let's go ahead and let's go inside of our layout in app folder home layout
[08:04:06,478] and let's render it just so we can start seeing some results. So navbar
[08:04:11,920] from modules home UI components navbar and you should now see the vibe right
[08:04:17,600] here at the top and the fun fact it should also appear if you go into out
[08:04:24,080] screens as well as you can see. So now you can always use it to quickly go back. So now let's continue developing
[08:04:31,280] the navbar here. The first thing we're going to add after the link is we're going to add signed out state like this.
[08:04:38,478] And then inside add a div with a class name flex gap 2 and add
[08:04:48,160] sign up button and add a normal button inside with a
[08:04:53,680] variant of outline and a size of small
[08:04:59,520] and render sign up inside. You can copy this and then
[08:05:05,360] change this to sign in button. This one will say sign in and this one won't have
[08:05:12,638] the outline variant. It will just have a size small. So there we go. Now you have sign up and sign in buttons that you can
[08:05:19,760] access only if you're logged out of course. And
[08:05:24,878] then if you are signed in let's just add a paragraph to do user control.
[08:05:32,320] And now we should be ready to log in. So I'm going to click sign in here and I'm
[08:05:38,160] going to continue with Google. And once you confirm your Google login,
[08:05:44,320] you will be redirected back here. And you should be redirected on the landing page with the text to-do user control
[08:05:52,798] like that. And you can see how now we can also load these apps. So, the reason they previously weren't even loading uh
[08:06:00,398] is because in the middleware, we didn't allow the TRPC to be a public route. So,
[08:06:08,160] in my case, I'm not going to have any public TRPC procedures. But if you want
[08:06:13,920] to, you can also add TRPC here like this. Let's just fix this TRPC. And
[08:06:21,200] then if you well, you can't log out now. So, let's just create a component to log out now. and then I will demonstrate
[08:06:26,718] this. It's completely fine to add this here because we are going to protect TRPC routes based on their procedure
[08:06:33,040] type as well because right now if you wanted to have any public API routes they don't exist. We prevent any
[08:06:40,478] anything other than this to be a public route. Uh also you can create the exact
[08:06:46,398] opposite right you can call this is private route and then all of these will
[08:06:51,760] be private routes right and then you would just modify your logic you would remove the exclamation point and you
[08:06:57,760] would do this so if you have the majority of the public routes and minority of the private ones you can
[08:07:04,240] just reverse the logic of the clerk middleware that's the cool thing about this it doesn't have to right we just
[08:07:09,680] called this is public route we could have called it anything and we could just put private routes inside and then
[08:07:14,878] use the reverse logic here, right? It's not like you need to add the public ones
[08:07:20,000] here. So, this is especially useful if you have a bunch of public routes, then just do the reverse logic, you know.
[08:07:27,360] Great. Now, let's add the user control uh component. So, I'm going to go ahead and close
[08:07:34,240] everything. I'm going to go inside of source components and I will create user control. DSX. I will mark this as use
[08:07:42,320] client and I'm going to import user button component. Here I will export
[08:07:48,398] const user control
[08:07:53,440] and I will create an interface props here to show name which is an optional
[08:07:58,958] boolean and in here I will add the props and show name.
[08:08:05,440] Then in here I'm going to return the user button component which is a self-closing tag.
[08:08:10,638] And I will modify well first I will pass the show name prop and then I'm going to
[08:08:16,000] modify the appearance prop to include the elements and then get the user button box to be
[08:08:24,160] rounded medium with an exclamation point at the end which basically means important
[08:08:29,600] user button avatar box rounded medium with size eight
[08:08:37,120] eight and user button trigger rounded medium like so.
[08:08:44,478] So I don't have to type this any every time I have uh created it in a component
[08:08:50,000] like this. So now let's go back inside of our navbar and inside of signed in
[08:08:56,240] render user control and pass in show name prop. So just make sure you have
[08:09:02,718] imported user control and there we go. Uh, and in here you now have this uh
[08:09:08,240] name which is barely visible because I'm in dark mode. Don't worry, we're going to fix that as well. But from here you
[08:09:15,200] can access your entire account, your security, uh, all of those things and
[08:09:20,638] you can also sign out from here. And you can see that now since I enabled inside of my middleware TRPC, I can fetch them,
[08:09:29,280] right? But if I remove this and refresh, I'm not able to fetch them because all
[08:09:34,320] the network requests for TRPC are failing. As you can see, all of them
[08:09:41,280] are failing. But we will protect our TRPC routes in a different way. So it's
[08:09:46,718] completely okay in my opinion to allow this. In fact, you can even just allow your entire API like this. then you
[08:09:54,240] don't have to worry about injust or DRPC specifically because our API should uh
[08:10:01,040] it should be protected in a different way in the first place. Let's just do a sanity check. What do we have here? We
[08:10:07,040] have ingest and we have uh TRPC. So inest needs to be publicly available
[08:10:12,080] simply because inest will contact this no one else. Right? And if you're
[08:10:18,000] wondering how this works, they probably have some kind of uh security header which is checked every time you access
[08:10:23,840] this route because you can see that we're using the serve from ingest next. So inside of here, they probably have
[08:10:29,600] their own request handler that does all the security features inside. And as for
[08:10:35,120] TRPC, uh well, we are going to be the ones who are going to have to protect
[08:10:40,160] each individual route here. And that's what we are going to do with the protected procedure. So I would actually
[08:10:45,360] recommend allowing all API endpoints to be public routes. So now let's go ahead
[08:10:52,320] and let's uh create the dark mode for this because you can see that when I log
[08:10:58,638] in of course it just looks weird. So what we're going to do is we're going to
[08:11:03,760] go and create a hooks folder. So go inside of source. Uh do we we
[08:11:09,360] already have hooks? Great. So this came with chats and UI. And now create use
[08:11:15,120] current theme.ts. So we already have use theme from next
[08:11:23,280] themes and we already use it in the project header use theme. The problem
[08:11:28,478] with this is that it has uh the following possible values. It can be
[08:11:35,120] system dark or light which is fine for this radio group. But if the value is
[08:11:42,638] system, what exactly is that? Is it light or is it dark? We
[08:11:48,398] don't know. That's why we have to create a custom use current theme here
[08:11:55,120] where we can extract the theme and system theme. Specifically
[08:12:02,878] use theme like that. And then if theme is dark
[08:12:08,798] or if theme is light, we can just return the theme as usual. Otherwise, return
[08:12:16,958] the system theme like that because you you cannot always just
[08:12:24,240] return the system theme. This only makes sense if the theme is system, right? If
[08:12:31,040] it's dark or light, then we don't care. we can just return whatever the value is. But if it is something other than
[08:12:36,718] dark or light, it means it is system. So then we cannot return theme. We have to return the actual value of the system
[08:12:43,200] theme. And now we can go inside of the user control right here. And we can
[08:12:49,600] adapt it as follow const current theme
[08:12:56,638] use current theme like this.
[08:13:02,320] And then inside of here, uh, let's also import. I think we need to install a
[08:13:08,160] package first. So, let's just do npm install at clerk forward slash themes.
[08:13:15,120] And I'm going to show you my package json here. 2.2.51
[08:13:21,120] is my version. And then from that package, you can now import
[08:13:27,360] dark from clerk themes. And then very simply in the appearance here set the
[08:13:34,478] base theme to check if current theme is equal to dark use dark otherwise use
[08:13:40,798] undefined. And now you can see the text is visible and this is now in dark mode.
[08:13:48,558] So you might be thinking could I have just added that to the clerk provider because clerk provider also allows for
[08:13:55,600] the appearance and base theme. Well, you can, but the problem is the theme
[08:14:00,718] provider for SHAT CN needs to be inside of the body and clerk provider needs to
[08:14:06,478] be outside of the HTML. So, we kind of have a conflicting situation here,
[08:14:13,440] right? Um, you can try moving both the clerk provider and TRPC react provider
[08:14:20,080] here maybe, but I'm not sure how that works, right? Uh I'm not sure if it
[08:14:26,478] matters but uh from all the documentation I've seen these two need to be outside of HTML. I'm not sure I
[08:14:33,360] could be wrong but basically if you are able to move these two like this inside
[08:14:40,718] then you can create an abstraction around cleric provider and then you can do the same thing like this. But for now
[08:14:48,638] I'm going to leave it like this simply because this is what worked for me initially. Great. So we now have this in the user
[08:14:55,280] control and we can now go inside of sign in and do the same thing because right
[08:15:01,440] now if I sign out and if I go here you can see that this uses light mode. So
[08:15:07,040] let's go inside of sign in page right here. Let's go ahead and mark this as use client
[08:15:14,080] and let's import use current theme from hooks use current theme which we just
[08:15:20,320] created. And let's import dark from clerk themes. Now in here we can extract the current
[08:15:26,240] theme and for this sign in let's add appearance here
[08:15:32,240] base theme we'll check if current theme is equal to dark and use dark otherwise
[08:15:38,718] use undefined. And let's also modify the elements a bit by adding card box here.
[08:15:43,840] Do not have any border, not have any shadow and be rounded for LG
[08:15:52,558] like this. And there we go. You can see how now this is in dark mode. And when you click on sign up, you can see it
[08:15:58,240] still uses the old theme. So let's just go ahead. We can just copy the entire file, go inside of sign up, paste the
[08:16:05,600] entire thing, and replace the import to be sign up. I think that's faster.
[08:16:11,200] And there we go. Now both of our sign in and sign ups have the proper team.
[08:16:17,760] Great. So let's see where we are. What did we do? We created a clerk account.
[08:16:23,520] We updated updated our environment. We added clerk provider signup screens
[08:16:28,878] middleware. Perfect. We added home layout in the navbar. We created the user control component. Now let's create
[08:16:35,600] protected tRPC procedures. and let's update the Prisma schema.
[08:16:41,120] So I just want to do one more thing with the user control component and that is
[08:16:46,718] inside of the project view. So go inside of this component here and in here after
[08:16:52,718] the tabs list here we added this ML auto flex and this button to upgrade. Now
[08:16:59,040] next to it also add user control like this and don't add the prop show
[08:17:05,600] name. So just make sure that you imported user control and let me show
[08:17:11,040] you how that will look like now. So now if you of course sign in. So let me just
[08:17:18,478] enter an account here and let me just go to uh any random
[08:17:25,360] project here. You can see that I have my user button right here. And let me just switch to
[08:17:31,520] light mode to see everything still works fine. There we go. You can see that now I can log out and access my account
[08:17:37,520] information from here as well. And let's just double check the light mode to see everything works fine. Everything works
[08:17:44,080] just great. Perfect. So now what we have to do is we have to create the protected
[08:17:49,920] TRPC procedures. So in order to do that, let's go inside of source tRPC
[08:17:56,320] and let's go inside of init. And now in here, we're going to modify the TRPC
[08:18:02,398] context here. So what I'm going to do is I'm going to remove this comment
[08:18:07,600] and I will return al to be await out from clerk next.js
[08:18:15,600] server. After that, I mean just below it, I'm going to
[08:18:20,878] export type context which uses awaited return type type of off create trpc
[08:18:26,478] context. And you can actually find these exact instructions in clerk documentation here. Let me just find
[08:18:33,040] tRC. Maybe I can find it. Integrate clerk into your next.js plus tRPC app.
[08:18:38,320] Let me see if that is uh what I'm looking for here.
[08:18:43,600] Let's try again. TRPC I think this might be it. So yes, you
[08:18:49,360] can see that they instruct you to wrap the clerk provider around the TRPC provider. So we already did that, right?
[08:18:58,478] We are using TRPC React provider simply because the documentation has changed since then, but it's the same thing.
[08:19:04,558] It's important that the clerk provider is wrapping around the TRPC provider. And now in here we are basically doing
[08:19:10,718] this in the create context and we are creating the context type
[08:19:15,760] here like that. And in here you can find all the other things that we are going to do. Uh for example they have a
[08:19:22,878] specific instruction to now add create context to this TRPC route. But if you look at the TRPC route
[08:19:30,878] we already do that right? So you don't have to worry about that. You can just follow what I do now. So I'm going to go
[08:19:38,320] after this T initialization and I will do const is outped like so and I will do
[08:19:45,280] T dot middleware and from here the structure next and
[08:19:51,600] context and check if not context out user ID
[08:20:00,718] in that case throw new TRPC error code.
[08:20:07,600] Uh let me just see what exactly is the problem in this one. Oh, so I need to
[08:20:14,160] import TRPC error from TRPC server. Okay, make sure you do this.
[08:20:20,080] Then let's do unauthorized here with a message of not authenticated
[08:20:27,120] like that. Nothing. uh and then after this if clause return next
[08:20:34,958] and extend the context to include out. Now we have to fix this problems that
[08:20:41,760] out doesn't exist. You can do that quite easily by going back to this t here and
[08:20:47,840] simply add dot context add the context type and execute it. And
[08:20:54,080] you can see that now we have the al property here which we added here.
[08:21:00,320] Perfect. And it's important that we also cache this in React. So this doesn't need to be called every single time. And
[08:21:08,080] we are simply relying on the user ID from it here. So make sure you don't do any mistakes here because now we're
[08:21:14,398] finally going to go ahead down here and do export const protected procedure to
[08:21:21,280] be t.procedure. Whoops. T.procedure.
[08:21:26,638] is authored. There we go. Now we have our protected
[08:21:32,160] procedure. So now it's time to replace a lot of our
[08:21:37,760] previous uh well procedures with this new one. So thankfully we don't have too
[08:21:44,638] many modules. So let's start with the messages procedures here. Let's see. At
[08:21:49,920] first we have get many instead of base procedure. What you can do is honestly I
[08:21:55,040] don't think there will be a single public procedure here. So what I like to do is I like to highlight base procedure
[08:22:01,840] and then I press command D or control D and then this just selects all of the
[08:22:07,520] other ones. Right? So 1 2 3 and I can remove them and I can add protected
[08:22:13,280] procedure like this. And nothing really changes
[08:22:18,878] now. So I'm just now using protected procedure for each of these for get many for create and I think that's that's the
[08:22:26,000] only two instances and you might think but nothing really changed now that's
[08:22:31,040] right but look at this if I'm using so just for example I will bring back base procedure here for the get many I'm now
[08:22:38,718] using base procedure if I try to extract context from here and if I try to do uh
[08:22:45,920] let's for example imagine that we can query the messages by user ID. Imagine
[08:22:51,440] if I do user ID here and do context. And then I try to do you know user ID in
[08:23:00,160] here. It can tell me that the user ID is string or null. So that means what I
[08:23:05,840] have to do is I have to first check if there is no context.out user ID and then
[08:23:10,878] I have to throw new tRPC error blah blah blah. But that makes no sense. we just
[08:23:17,120] created the protected procedure which does that for us and then uh passes the
[08:23:23,280] context further. So instead what we do when we know that something has to be a
[08:23:28,638] protected procedure that we will always throw an error if the user ID is missing we can now just use the protected
[08:23:34,958] procedure and this time the user ID is a type of string. see the difference. Base procedure tells
[08:23:42,080] me it can be string or it can be null. But protected procedure tells me this is
[08:23:48,240] definitely a string because it 100% exists at this point. So that's why
[08:23:54,638] we're replacing things with a protected procedure. And then at this point it
[08:23:59,840] doesn't matter that our API is allowing the public route for API. Right? An
[08:24:06,558] important thing you should know, you should never never ever ever rely on the
[08:24:12,718] middleware for authentication. So what I'm doing here is just a nice
[08:24:19,040] user experience, right? It is easy to redirect the user using the middleware.
[08:24:25,040] But this isn't my line of defense. This isn't what I'm doing to throw
[08:24:30,398] errors. That's why I have a data access layer called TRPC. And in here I have my
[08:24:36,160] protected procedures. So if this middleware fails even even in this case
[08:24:41,440] I explicitly allow the middleware to allow API routes. I'm still very much
[08:24:48,000] protected because I'm protecting my data access layer and you should do the same.
[08:24:53,120] Never ever rely on the middleware to protect your app. If you want to use the
[08:24:58,878] middleware for nice user experience like we are, of course you can do that. But it shouldn't be your last line of
[08:25:05,520] defense. You should have a data access layer and you should protect your routes
[08:25:10,878] individually because let's imagine this middleware breaks which can happen.
[08:25:15,920] Nex.js had a middleware security issue just a few versions ago and people who
[08:25:22,398] were shocked that that happened know got a very big security lesson. You shouldn't rely on the middleware. Even
[08:25:29,360] if the middleware was perfect, you should not rely on it. Uh don't confuse
[08:25:34,718] this middleware with this is also technically a middleware right we we
[08:25:40,240] just created a middleware this middleware and this middleware are two different things they are not comparable
[08:25:46,478] okay what I'm trying to tell you is don't try and do API and then projects
[08:25:52,798] and then create don't do this this is not enough for you to protect your API
[08:25:58,638] routes you should protect your API routes inside of the routes themselves like I
[08:26:05,360] am doing right now. So this is a different type of middleware. They're just using the same word. They're using
[08:26:11,920] the same keyword middleware here and middleware here. Right? I'm trying to explain the difference. So whenever you
[08:26:19,360] use the middleware, it should only be used to improve user experience like adding redirects which is very a very
[08:26:26,558] nice thing to use the middleware for. But if your middleware breaks and if the user actually ends up being able to
[08:26:33,120] visit my individual project page, I'm still just going to throw a bunch of
[08:26:38,160] errors because when we try to load the messages, it will be a protected procedure and it will just throw the
[08:26:44,958] user an error saying, "Hey, you're not authorized. I don't know how you access this API, but you cannot see that API."
[08:26:52,878] That's how authorization should work, not by the middleware. The middleware is just the first layer of security. The
[08:27:00,558] actual layer of security is the data access layer. In our case, the RPC. I
[08:27:05,840] hoped I cleared that up. Sorry for going on this rant, but it is important for you to understand that. Great. So now
[08:27:13,120] let's go ahead and once we finish the messages, let's go inside of projects server procedures. And I think that we
[08:27:18,958] have to do the very same thing here. I don't see a single thing that can be a base procedure here. So I'm just going
[08:27:24,958] to replace All of these instances I think this is the last one. Yes, with
[08:27:31,120] protected procedure. So let me show you the exact changes. Get one, get many,
[08:27:37,600] and create. So three procedures in this case. And when I search for base
[08:27:44,398] procedure now, not a single one exists except the actual instance here in the
[08:27:49,920] init file. And when I search for protected procedure, I have eight results in three files. the third one
[08:27:56,638] being in it file. So that's how your project should look as well. So now only
[08:28:03,120] authorized users can access this API routes and it absolutely doesn't matter that we are not protecting it in the
[08:28:09,680] middleware. Perfect. So now let's go ahead and let's
[08:28:14,798] add Prisma schema update because now we finally have the user ID. So that means
[08:28:21,920] we can go inside of Prisma schema here and we can modify
[08:28:28,000] some things. So let's start with the project. The project from now on will
[08:28:34,240] have a user ID which will be a required string like this.
[08:28:41,360] And since other entities relating to the project, all other entities end up being
[08:28:47,760] related to the root project. We don't really have to add it to the message as well. You can of course do that if you
[08:28:55,200] want to uh if you have any architectural reason for doing that. Of course, you
[08:29:00,318] can add individual user ID for the fragment, individual user ID uh for the
[08:29:05,520] message, right? But for the same reason I'm not adding project ID into the fragment because the fragment is related
[08:29:12,000] to the message which has the project ID already. I'm not going to be adding the user ID uh to my uh other entities
[08:29:19,920] because it is enough that the user ID is in the project. And once I've done that
[08:29:25,360] I'm going to shut down my app and I'm going to do npx prisma migrate reset. So
[08:29:31,360] again only do this in development. We are clearing up our database because we are in development and we can do that.
[08:29:38,478] And once we've done this, let's go ahead and do npx prisma migrate dev. And once
[08:29:44,000] it connects, let's simply call this user ID or out.
[08:29:49,600] Here we go. I'm going to call this user ID. And there we go. Now I'm going to do
[08:29:55,040] npm rundev. And I'm going to run npx inest cli latest dev. So both things
[08:30:01,600] should be running. And just double check that it was able to connect to API inest
[08:30:07,360] because as I said if you accidentally don't allow your API here then inest
[08:30:14,558] will not be able to connect. There we go. You can see that now it's 404. So that's wrong. That's why you need to
[08:30:21,920] make sure to allow all of your API routes and then after some time let's check again. It can connect to it.
[08:30:28,638] Exactly what we need. So now let's go ahead and fix all of the issues that we have because we do have them. We just
[08:30:35,360] got a new rule and that is that each project needs to have a user ID. So
[08:30:41,280] let's go ahead inside of our modules and let's go inside of projects server
[08:30:48,240] procedures and we can already see some errors here such as the create error. So
[08:30:54,000] in the create protected procedure we now have to also pass the user ID which we can easily extract from the context here
[08:31:01,600] because we are using a protected procedure. So context.out user id as
[08:31:07,520] simple as that problem fixed. Now what we have to do next is you also have to
[08:31:13,200] modify the get many. So whose projects are we loading? Very simple. The
[08:31:18,798] currently logged in users projects. So let's add a wear here.
[08:31:24,000] like this user ID matches context out user ID and
[08:31:30,000] now we are only loading this currently logged in users project and same thing
[08:31:35,120] for get one simply extract context from here and we can only load the existing
[08:31:40,878] project if we have a matching user ID if we don't this will be null and we're
[08:31:48,080] going to throw the error not found so even if the user is logged in and manages to surpass this protected
[08:31:55,040] procedure, we will still be able to throw the error because we have no idea
[08:32:00,478] which project with that specific ID and that user ID they are looking for. So we
[08:32:05,600] just throw we have no idea what you're talking about. We've never seen that project before. So full security in our
[08:32:12,318] application. And now we have to do the same thing but for messages. So let's go
[08:32:19,200] inside of procedures here and let's check get many. So in here I'm going to extract the context as well and I'm
[08:32:26,318] going to try and do project user ID and it seems like I can do that. So let's simply add context out user ID. There we
[08:32:34,160] go. So just like that we are now also protecting all of our messages. But since we don't have direct user ID in
[08:32:40,718] the message we have to go through the project ID first. Perfect. And for the create uh well we
[08:32:48,240] have to do the same thing but a little bit differently here. So what we're going to do here is we're going to do
[08:32:53,680] con existing project first await prisma project find unique where
[08:33:02,878] and simply add the ID to be input project ID and user ID to be
[08:33:11,760] context pal user ID like this.
[08:33:18,478] I mean maybe we can somehow do it from here. I don't know. I'm not that good
[08:33:23,920] with Prisma, but you can do it in two separate queries. You know, it's not the end of the world. And if there is no
[08:33:29,200] existing project, let's throw new TRPC error here code not found with a message
[08:33:39,920] project not found. So I have no idea what where what project do you want to
[08:33:46,080] create this message into. Right? And make sure you have imported the TRPC error from TRPC server. So this way,
[08:33:53,760] even if they somehow surpass the protected procedure, we are still not going to allow them to just create
[08:34:00,080] messages in someone else's project because they need to match the exact user ID who created that project. Uh
[08:34:07,840] great. So we now have this done right here. And then we can safely do the
[08:34:13,040] created message. You can even then use maybe it's even safer to use existing project ID for the project ID. So it's
[08:34:20,718] only this one which we can query from our database with the correct user ID that we're going to insert this message
[08:34:26,638] into. Excellent. And you don't have to worry about these background jobs because we
[08:34:32,638] are protecting them before we even trigger them. So that is for the create method. Let's
[08:34:39,360] see. Did I fix it for the get many? And I think that should be it. So obviously
[08:34:44,398] we should now just test our app to make sure things are still working. Uh so
[08:34:50,080] let's go ahead and do the following. Let's go inside of our projects list now. And I just want to do a slight
[08:34:57,360] modification here. And that modification is that I'm going to load the current
[08:35:05,040] user from use user which you can import from clerk next.js. And then this will
[08:35:11,680] allow us to do the following. We can then do user question mark first name
[08:35:17,680] and then apostrophes users vibes and then in here also do if
[08:35:24,718] there is no user return null. So we don't even load the project list if we
[08:35:30,398] are not logged in. We can of course do this in a million ways but I think this is just simple enough for now. Uh great.
[08:35:38,160] So you can see that when I am logged out nothing happens here. Great. So what I
[08:35:44,718] want to do first is I want to go inside of my project form and in here
[08:35:51,200] in my on success specifically on error I
[08:35:56,638] should redirect the user to the out screen as well if this fails because right now when I type test I'm just
[08:36:04,080] getting an error not authenticated. I mean, you could technically argue that's good enough, but uh let me show you what
[08:36:11,040] you can do. So, you can do router and then you can just push the user to sign
[08:36:16,240] up or sign in. That's an easy way you can do. But here's a cool thing. You can actually do con clerk use clerk from
[08:36:22,638] clerk.js. So, just make sure to add this import.
[08:36:28,878] And once you have it, you can do the following. If error
[08:36:35,520] data.code is equal to unauthorized, you can do clerk.open
[08:36:42,080] sign in like that. Uh, and let me just so error data is possibly undefined. So
[08:36:48,798] maybe I need to do this. There we go. And let me just move this to the top. So
[08:36:56,000] this way if this fails, it will open the signin model. So I write test.
[08:37:01,760] And there we go. It opens this nice model. I think it looks cool. If you want to, you can also just do, you know,
[08:37:08,000] router.push sign in. That also works.
[08:37:14,878] There we go. So, whichever one you prefer. I just thought I would show you this cool alternative.
[08:37:20,638] Uh, great. So, I'm pretty sure that we
[08:37:26,240] don't have to do anything more besides test the app. So now I'm going to log in here.
[08:37:32,240] And as you can see, it says Jones Vibes and no projects found. And I will do
[08:37:37,280] build a landing page here. And let's see, will I get any errors? I
[08:37:43,120] don't think I'm getting any errors at all. I do want to just check my functions.ts just to confirm I'm not
[08:37:49,360] getting any errors in here. Even though we shouldn't be getting any errors at all. This is a background job. This
[08:37:55,680] doesn't need any user ID. I think everything is just fine here and I think that we will be able to normally
[08:38:02,638] load the messages. But let's wait and see the result. And there we go. Once I am logged in,
[08:38:09,840] you can see that I can normally create my messages. I can even refresh this and I can load my messages. I can see my
[08:38:16,160] fragments. So all of this is obviously working. Perfect. Uh and let's try
[08:38:22,080] something fun. I'm going to copy the URL here and I will log out. And then I'm
[08:38:28,478] going to go ahead and paste that URL. So obviously I'm getting redirected. But let's say inside of my middleware I
[08:38:34,398] accidentally do projects and I do this. All right. So let's see
[08:38:39,680] what happens then. You can see that even if the middleware fails,
[08:38:45,920] nothing useful is shown to the user and finally an error is thrown. This is of
[08:38:52,240] course not ideal because we are missing an error boundary. uh we're going to fix this details in the last chapters,
[08:38:59,040] right? Obviously, it's not ideal that this types of errors shown even though this wouldn't show in production. This
[08:39:04,798] is what you would see in production, which is not any better, but we will I'm going to show you how to add proper
[08:39:10,558] error boundaries. I just wanted to show you that you can't fool this system we just created, right? You will either get
[08:39:16,718] redirected or you will be hit with a bunch of errors because you don't belong on that website. Amazing. Amazing job. I
[08:39:25,360] think that officially marks the end of this chapter. So now let's go ahead and let's open a pull request. So 16
[08:39:32,718] authentication. I'm going to create a new branch. 16 authentication.
[08:39:40,478] I'm going to stage all of my changes. 16 authentication. I'm going to commit and
[08:39:46,638] I'm going to publish the branch. Now, let's go ahead and open a pull request and let's review our changes.
[08:39:58,558] And here we have the summary. We added user authentication and theming support using clerk, including sign in and sign
[08:40:05,680] up pages with theme aare styling. We introduced a navigation bar with authentication controls and user
[08:40:12,318] display. We added a user control component for displaying user information and actions. We integrated
[08:40:18,798] authentication checks into project and message features, ensuring users can only access their own data. We improved
[08:40:27,360] project and message lists to only display personalized content and enforce userbased access. Exactly what we did in
[08:40:35,600] this chapter. As always, file by file walk through here and a whole sequence
[08:40:41,600] diagram explaining how our new clerk provider and authentication TRPC procedures work. And we did a very good
[08:40:49,920] job this time. The only comment is in the migration SQL. Um, we don't really care about this because we are in
[08:40:56,478] development phase and no other comments. Amazing, amazing job. Let's go ahead and
[08:41:01,600] merge this pull request. And once we've done that, let's go ahead and go back to the main branch and let's click on
[08:41:07,360] synchronize changes and okay. And in a few seconds, you will see that 16 was
[08:41:13,840] just merged authentication. That marks the end of this chapter.
[08:41:19,360] Amazing, amazing job and see you in the next one. In this chapter, we're going to
[08:41:23,000] 
[08:41:25,760] implement billing and the credit system into our project. In order to do that,
[08:41:31,360] we first have to enable billing in clerk. We then have to create a pricing page. After we've done those two, we can
[08:41:39,040] start and add rate limiting or usage or credit system in our application. This
[08:41:46,080] will include adding some new models to Prisma schema and creating the util for
[08:41:51,360] rate limiting. After that, we're going to have to create the usage component which will show to the user how many
[08:41:57,280] credits they have. And finally, we're going to have to update some procedures to actually call this util for rate
[08:42:04,160] limiting to trigger credit spend. So, let's start with enabling billing. So,
[08:42:10,718] this is the first time I'm using clerk billing. It was announced recently and
[08:42:16,240] the moment I heard it, I just knew it had to be an incredible developer
[08:42:21,840] experience. And I think that you will be shocked at how good it is because we all
[08:42:27,200] know that Clerk's developer experience is immaculate. They have completely solved the issue of uh complicated code.
[08:42:34,878] Everything regarding Clerk is super easy, super fast and super simple to do.
[08:42:40,160] And billing is one of the most complicated parts of building the authentication, especially if we are
[08:42:46,398] doing it with Stripe. So, you're going to be so impressed by the fact that we
[08:42:52,318] won't even need a web hook for this entire process. More so, we won't even
[08:42:58,798] have to build a single component besides our custom usage component, which actually has nothing to do with billing.
[08:43:07,440] Let's go ahead and do that. You can find information about clerk billing in their documentation here. You can scroll and
[08:43:14,000] find billing. And in here, you can select B2C. You can also do B2B but in
[08:43:19,520] this case it will be uh B2C SAS. The first thing we have to do is enable
[08:43:24,798] billing. So we have to go to billing settings. This will redirect you to your
[08:43:30,478] project. So you click into configure and down here billing settings.
[08:43:35,760] Go ahead and click create a plan. And the first thing we're going to do is we're going to create a free plan. So
[08:43:42,718] I'm going to go ahead and open this. And in here you can set the name of the plan and you can set the slug like this. So
[08:43:50,718] this is what we are going to use in our codebase to check if the user is on that plan. Right? So we're going to check if
[08:43:57,360] free user is active. That means the user is currently on the free tier. Uh and in
[08:44:03,280] here make sure to check publicly available. This basically means that this will appear on the pricing table.
[08:44:11,760] So you can create that and then you can click add another user plan and for
[08:44:16,798] example call this pro like this and give it a monthly fee of $29. And if you're
[08:44:24,398] wondering can I easily combine this into an annual discount? Yes, you can just enable annual discount and in here set
[08:44:31,920] it to something like 25. So, if they pay monthly, it's going to be $29 a month.
[08:44:39,200] But if they choose to pay annually, we're going to reduce the price to $25
[08:44:45,600] per month. So, you're going to get $300 instantly from them. And in return,
[08:44:51,600] they're going to have a bit of a cheaper plan. You can, of course, uh assign the price to whatever you want and click
[08:44:58,958] save. So, right now in your subscription plans, whoops. right here you should have two
[08:45:05,440] subscription plans, one free and one pro which is build monthly or annually. So
[08:45:11,520] in here, let me just go and click on the settings here. And in here, let's just click enable billing. There we go. So
[08:45:18,558] now billing is enabled. And in here, you can choose your payment getaway. So if you want to, you can add your own Stripe
[08:45:25,840] account, but you can also choose clerk's payment getaway, which is a zero conflict payment getaway. it is ready to
[08:45:32,240] process and test payments immediately. And this is amazing. You're going to see how simple this is. So, to recap, go
[08:45:40,478] inside of configure, go inside of billing settings, and make sure that you click enable. Make sure that you have a
[08:45:46,478] message billing is enabled. After that, go ahead and create two subscription plans right here. And now, let's go
[08:45:53,760] ahead and let's add a pricing table to our app. So, as always, make sure that you are on
[08:46:01,200] your main branch. Make sure that you synchronize your changes. And if you want to go inside of
[08:46:08,000] source control and confirm that the last change was adding authentication.
[08:46:13,360] What we have to do now is we have to implement the pricing page. So, let's go inside of source app home and let's
[08:46:20,878] create a new folder called pricing inside page.tsx. tsx
[08:46:28,718] like this. Let's mark this as use client. And then let's go ahead and
[08:46:34,638] let's import image from next image. And let's import
[08:46:40,240] pricing table from clerk next.js. And let's go ahead and export this page.
[08:46:47,040] So I'm going to export it like this. And inside of here for now, let's just do
[08:46:52,478] pricing table. Let's just do that and nothing more. If you now go into your
[08:46:58,160] app, just make sure you have it running. And if you go to forward slashpricing,
[08:47:06,398] uh it will redirect you to the login page. So, let's just make sure to add that here. So, forward slpricing
[08:47:15,600] like so. Now, you should be able to go to localhost 3000 pricing.
[08:47:22,240] There we go. we have a date a pricing table. So we didn't have to code a
[08:47:28,080] single component. All we have to do is style it a little bit now. So let's go ahead and do that. So I'm going to go
[08:47:34,478] back inside of here and I'm going to add a class name flex
[08:47:40,240] flex column maximum width of 3 Excel MX auto and full width. I will then add a
[08:47:48,398] section around our pricing table and I'm going to create a div inside of here
[08:47:54,558] with an image component and then in here I will add an H1
[08:47:59,680] element and then I'm going to add a paragraph. Now let's go ahead and style this. Starting with the section which
[08:48:05,920] will have space Y 6 padding top of 16 VH
[08:48:14,160] on to Excel padding top of 48.
[08:48:20,398] Then on this div encapsulating the image let's give it a class name of flex flex
[08:48:26,080] column and items center. For the image itself, give it a source logo SVG, alt
[08:48:36,398] vibe, width 50, and height 50 as well.
[08:48:42,958] And give it a class name hidden MD block. Then in the H1, go ahead and add the
[08:48:49,600] text pricing. And give this a class name of text extra large like this.
[08:48:57,120] on MD text 3 Excel font bold and text
[08:49:02,478] center for the paragraph. Enter the text. Choose the plan that fits your
[08:49:09,280] needs. And give this a class name text muted
[08:49:14,558] foreground text center text small and MD text base.
[08:49:22,718] And now let's just go to the pricing table appearance.
[08:49:28,398] And let's add elements here. Pricing table card. And let's change this to use
[08:49:34,478] the border shadow none rounded large. Just just make sure
[08:49:41,040] you're putting the exclamation points here. And just like that, we have a pricing table that clearly reflects the
[08:49:48,000] two plans that we created in clerk dashboard. So now let's go ahead and
[08:49:53,280] let's modify the descriptions of these and let's show some features which will be active once we upgrade.
[08:50:02,638] So let's go inside of our clerk dashboard here. Go inside of configure
[08:50:07,760] and in here subscription plans. Select the free one and let's go ahead and give
[08:50:13,120] it a description for getting started like this and click save.
[08:50:19,360] And then in here, let's add a feature. And let's go ahead and call this feature
[08:50:25,360] five monthly credits. Like that. Make sure it's publicly
[08:50:30,798] available. And let's click create feature. And let's click save. And just by doing that and refreshing, you will
[08:50:37,920] immediately see the new description reflected here. And you will also see the new feature five monthly credits.
[08:50:46,000] And now if you wanted to this is where you will add even more features for example public projects something like
[08:50:53,760] that. So for example we don't even have private or public projects all projects are private in our case but for example
[08:51:01,760] here you can see how that would look like. And now let's go ahead and let's modify the other plan which is the pro
[08:51:09,840] plan. So go back here back inside of our subscription plans
[08:51:15,680] and select the pro plan. So this one can have the description of for more
[08:51:22,958] projects and usage and then go inside of the features here
[08:51:30,240] and let's go ahead and add a new feature called 100 credits
[08:51:35,520] per month like this. Let's go ahead and let's add private
[08:51:42,478] projects like that. Let's add custom domains.
[08:51:48,398] Basically, whatever you plan to, you know, extend this application with, you can add here or maybe some collaboration
[08:51:54,318] like three editors per project. All right, just think of a bunch of features
[08:52:00,718] you would add to your app. And let's do uh remove the vibe badge. Imagine that
[08:52:07,520] we would create some kind of feature that adds the vibe badge. And click save. And you can of course, you know,
[08:52:13,040] drag and drop this however you like. I just wanted us to add a lot of features here simply because the the pricing
[08:52:20,160] table looks better if you add more features here. And I absolutely love how
[08:52:26,240] this looks. So now that we have uh this finished, let me just go ahead and do
[08:52:32,478] one thing. I want to go inside of layout right here and I want
[08:52:39,440] to modify the clerk provider and its appearance here. And I want to add variables here. Color primary. And I'm
[08:52:47,440] just going to set it to the light mode of our cloud theme, which is this.
[08:52:54,798] And when you save this, you can see that immediately it will pick up the theme that we are using throughout the
[08:53:00,638] project. And I just think this looks amazing. Now, let's just go back to the
[08:53:05,920] pricing here. And let's enable dark mode if we need it. So, I'm going to import
[08:53:15,040] dark from Clark themes. And I'm going to import use current theme. Make sure this is
[08:53:21,600] marked as use client. Go ahead and add this. And then simply in the appearance,
[08:53:29,200] go ahead and add base theme. checking if the current theme is dark, then use dark, otherwise it's undefined. And now
[08:53:36,478] this page will support dark mode as well. Uh, and if you try and subscribe, you can see that you're redirected to
[08:53:42,958] login. So you don't have to immediately uh try and subscribe simply because I want to demonstrate the entire upgrade
[08:53:49,920] process. You can see that when I log in, by default, every user is in the free tier. You didn't even have to write the
[08:53:56,878] code for that. you automatically, we automatically added this user to the free tier. If you click subscribe here,
[08:54:02,798] you can see how nicely this looks. As I said, you don't have to do this now. If you can, fine. Sure. But you're going to
[08:54:09,680] have to create a new account to test out our usage uh tryyouts. So, you can see
[08:54:15,680] how this looks. I think it's just, you know, amazing. Uh, and one thing that I
[08:54:20,798] want to fix that we forgot about is when I scroll, I want this navbar to stop
[08:54:27,760] being transparent because it just looks weird. So, let's quickly fix that by
[08:54:33,120] going inside of source hooks and let's create use scroll.ts
[08:54:40,558] like this. And inside of here, let's go ahead and do import use state use effect from
[08:54:48,718] React export const use scroll. And let's add the threshold
[08:54:57,360] to be 10. Define the state is scrolled and set is
[08:55:02,798] scrolled. Use state by default is going to be false. Call use effect
[08:55:10,160] with for now an empty dependency array
[08:55:15,360] like this. And inside create a handle scroll arrow function
[08:55:23,920] which will call set is scrolled to be window scroll Y which is above the
[08:55:31,600] threshold. And then let's add a window add event
[08:55:36,798] listener here to listen for scroll and handle scroll.
[08:55:44,160] And then simply call handle scroll. And in the return method call window remove
[08:55:49,760] event listener scroll handle scroll just
[08:55:54,878] like that. And add the threshold inside. And all you have to do is return is
[08:56:01,760] scrolled. There we go. So now that we have use scroll in our app, we can go back to the
[08:56:09,040] navbar inside of home module UI components navbar. And in here you can
[08:56:15,600] now easily get is scrolled. Use is scrolled.
[08:56:21,600] Use scroll. My apologies from hooks. Use scroll. and then make this a dynamic
[08:56:28,638] class name by wrapping it inside of curly brackets and adding the CN util.
[08:56:34,000] So we have to import CN from lib utils.
[08:56:39,440] I'm going to keep the static classes as the first argument and then I'm going to check if is scrolled. Let's do back bg
[08:56:47,280] background and border border. So now if you scroll ever so slightly,
[08:56:54,878] you can see that the navbar starts to stop being transparent and a
[08:57:01,600] border appears. Amazing. Now that we have this and now that we have the
[08:57:07,040] billing, let's go ahead and just check a couple of things. So now this upgrade button should take you to the pricing.
[08:57:13,680] If yours doesn't, make sure you check the project view here. And make sure
[08:57:19,280] that you have a button. Let me just find it. Here it is. Button with a link
[08:57:25,920] redirecting to pricing like that. And now it's time to create the usage model.
[08:57:33,920] So in order to do that, we're going to have to install a package called rate
[08:57:42,000] liimiter flexible. So let me just close this and this and let me do npm install
[08:57:49,840] rate limiter flexible like this. Let me show you the version.
[08:57:57,200] So I'm using 7.1.1. That's my version. Let me do npm rundev. And then in here,
[08:58:06,160] I'm going to go ahead and do the following. Inside of Prisma schema,
[08:58:11,840] I'm going to create uh a new model called usage. Right here at the bottom,
[08:58:18,558] model usage. Let's go ahead and give it a key, which
[08:58:25,520] will be a type of string, and that's going to be the ID. and then a points
[08:58:31,840] which will be integer and finally expire which will be an optional
[08:58:38,478] date time. So this will be my usage model. Now let's go ahead and let's do
[08:58:44,878] npx prisma migrate dev. We don't need to clear our database because this is not
[08:58:51,360] really conflicting with any other models. We're just adding a new one. So, I'm going to call this migration usage.
[08:59:00,558] Let's go ahead and add the name usage. And there we go.
[08:59:06,878] Now that we have the new usage model here and the new migration ready, let's
[08:59:12,160] go ahead and let's implement uh the usage tracker. So, this is what I'm
[08:59:18,638] going to do. I'm going to go ahead and create a new lib that I'm going to call
[08:59:24,000] usage.ts. ts. And inside of here, I'm going to go ahead and add an import for
[08:59:31,520] the rate limiter. So, specifically, it's going to be rate limiter Prisma right
[08:59:36,958] here. And let's go ahead and do export async function get usage tracker
[08:59:45,840] like this. And for now I'm just going to define const usage tracker to be new
[08:59:52,718] rate limiter Prisma store client will be our Prisma from the
[08:59:58,080] database like this
[09:00:04,398] and table name will be usage. So just make sure it matches exactly the model
[09:00:09,760] we named here. And for the points, let's go ahead and by default, uh, give everyone five
[09:00:18,718] points. And for the duration, let's go ahead and
[09:00:23,920] let's do 30 days. So, 30 * 24 * 60 * 60.
[09:00:29,920] Now, what I like to do is I like to do const free points. And let's go ahead
[09:00:35,840] and give everyone free points. So, you can replace this like so. Then let's do the cons duration to be 30 * 24 * 60 *
[09:00:44,798] 60. So you can add a little comment 30 days for example.
[09:00:52,878] And now that we have this, let's just return the usage tracker.
[09:01:01,200] And now let's go ahead and let's create a function called consume credits. So export async function consume credits
[09:01:10,958] and in here let's go ahead first uh and let's extract user ID to be await out
[09:01:19,840] from clerk next.js server
[09:01:25,440] like so and make sure to execute this. If there is no user ID, we can throw new
[09:01:33,120] error here. User not authenticated. That's the first thing. And then let's
[09:01:40,160] go ahead and do const usage tracker to be await usage tracker. Basically this
[09:01:46,798] function which we defined above. And then in here const result to be await
[09:01:53,280] usage tracker dot consume. pass in the user ID and then how many
[09:02:00,000] points do we want to take from them. So for that I'm going to define const generation cost cost to be one. So let's
[09:02:09,040] go ahead and add that here. So we're going to subtract one point from the user every time we consume credits. And
[09:02:17,120] then let's just return result. And then let's create the last function.
[09:02:24,000] Export asynchronous function get usage
[09:02:30,558] status. Again extract user ID from await out.
[09:02:37,840] If there is no user ID throw new error user not authenticated.
[09:02:46,160] And then let's do const usage tracker here to be await get usage tracker
[09:02:55,280] and then result will be await usage tracker
[09:03:01,360] dot get user id. So we are looking at how many points we have left.
[09:03:07,200] There we go. So we are basically using this very very cool library which can inject directly into Prisma. Uh, and I'm
[09:03:14,878] just going to open the documentation now for it so you can read more. So here it is. Node rate limiter
[09:03:22,638] flexible. Basically node limiter flexible counts and limits the number of actions by key
[09:03:28,160] and protects from DDOS and brute force attacks at any scale. It works with W key radius, prisma, dynamo, process
[09:03:35,360] memory, cluster, pm2, memach, myql, sqlite and posgress. Also works in
[09:03:41,680] the browser. It offers atomic increments. All operations are in memory or distributed environment. Use atomic
[09:03:48,558] increments against race conditions. So if that's something you were wondering about, yes, we solved the problem of
[09:03:54,398] race conditions by using this package. It is extremely fast. It is flexible,
[09:03:59,520] ready for growth and it is friendly. Now, should it be used exactly the way I'm using it? Right? I'm using it as a
[09:04:07,200] simple rate limiting for premium credits. I haven't really seen any
[09:04:12,558] advice not to do it. But since it solves uh a bunch of problems out of the box
[09:04:18,240] and it's just an npm package, I thought it was a no-brainer to use it. Uh given the fact that we can easily add it to
[09:04:25,440] Prisma, right? So that's why I chose this package. Uh I explored a bit what we should use. Should we develop our own
[09:04:31,520] and this ended up being the best decision. Great. So now that we have
[09:04:36,798] these three functions, a functions to get the usage status by the current user ID key, a function to consume credits
[09:04:44,318] for the current user, and the overall function to get the usage tracker, which
[09:04:50,160] right now doesn't make too much sense. This could have been a constant, but don't worry, it will make sense later.
[09:04:57,120] So now let's go ahead and let's actually create the procedure for the rate
[09:05:03,680] limiting here. So I'm going to go ahead and go inside of source. I will create a new module
[09:05:10,240] called usage and in here I'm going to create server and then I'm going to
[09:05:16,160] create procedures.ts. Let's go ahead and do get usage status
[09:05:22,558] from lib usage. Let's import create trpc router from trpc init and protected
[09:05:29,840] procedure. Then let's go ahead and export constage
[09:05:35,840] router to be create trpc router status is going to be protected procedure query
[09:05:44,798] asynchronous method and then in here let's open a try and
[09:05:50,000] catch block return null in the catch block and in the try attempt to get the
[09:05:55,760] result from await get usage status and return the
[09:06:03,600] As simple as that. So we we don't really worry about catching these errors and displaying something since this is a
[09:06:09,360] query, right? So once you've done this, go ahead and add that to your TRPC
[09:06:16,718] routers here. So usage usage router. There we go.
[09:06:23,520] And yes, if you want to, you can move everything usage related into this module. Perhaps you can move it out of
[09:06:29,520] the usage. Um, for now I will leave it here. But yeah,
[09:06:34,960] if you want to you can create a lib here. I think it will make more sense actually. Uh, okay. Now that we have
[09:06:41,122] this, let's go ahead and let's create the usage component. So this one will be
[09:06:46,640] interesting. Let's go inside of source modules projects UI components and let's
[09:06:54,160] create usage.tsx. So in here I want to create an interface
[09:06:59,680] props which accepts the points and milliseconds before next refresh.
[09:07:04,878] And for the imports let's go ahead and let's import link from next link. Let's
[09:07:11,360] go ahead and let's import the crown icon from lucid react and let's import format
[09:07:18,000] duration and interval to duration from date fns. And finally the button from
[09:07:24,000] components UI button. Now in here, let's go ahead and let's add the usage like
[09:07:30,480] so. Let's return a div with a class name
[09:07:35,680] rounded top extra large bg background border border bottom zero adding 2.5.
[09:07:46,960] another div inside with a class name flex items center and gap x of two
[09:07:56,480] in here a div which will have one more div inside and this inner deal div div
[09:08:02,878] will have a class name of text small and let's go ahead and simply render the
[09:08:08,480] number of points that we have and then let's just say you have that many free credits remaining and you can change
[09:08:16,078] this into a paragraph so we don't use so many divs. And then after that add
[09:08:22,238] another paragraph with a class name of text extra small
[09:08:27,598] and text muted foreground and inside resets
[09:08:34,320] in then add a space like this open curly brackets format duration
[09:08:43,438] inside of it interval to duration
[09:08:48,480] and set the start to be new date and set the end to be new date and inside date
[09:08:56,960] dot now plus milliseconds before next
[09:09:02,640] and then add a new prop here I mean a new param in this interval to duration
[09:09:09,122] uh my apologies format duration function which takes the format to be months days
[09:09:17,200] and hours so it's going to display in those intervals. And I think that's it. I think that's
[09:09:24,480] all we need. And then outside of this div right here,
[09:09:33,278] go ahead and add a button and a link inside. The link will have an href to
[09:09:40,160] the pricing page. We're going to render a crown icon and text upgrade. The
[09:09:46,480] button will have an as child size small variant will be the new one that we
[09:09:53,040] created tertiary I I guess class name ML auto
[09:09:59,438] now that we have this let's go ahead and display the usage prop
[09:10:06,398] in order to display it we have to go inside of our messages form
[09:10:13,200] component so it is inside of projects UI components message form and then let's
[09:10:20,000] go ahead above this and let's do show usage and end and then render the usage
[09:10:27,040] like so. Import the usage from dot / usage passing the points to be zero and
[09:10:33,918] milliseconds before next to be zero. Just make sure you have imported the
[09:10:38,960] usage component. So now go into any random project that
[09:10:45,438] you have. So I'm going to go ahead and go inside of this one that I already have. And once this loads, nothing
[09:10:52,878] changes. But if I go inside of the message form and if I change the show usage to true.
[09:11:01,360] And if I refresh, you will see zero free credits remaining, resets in nothing,
[09:11:07,438] and we have a button to upgrade. That's what I wanted to see. And now what we're
[09:11:12,960] going to do is we're actually going to fetch the usage from our new router. So let's go ahead to the top here and
[09:11:21,438] before the form, let's do const data usage to be use query which you can
[09:11:29,122] import from let me just find tanstack react query.
[09:11:34,878] Here it is. And in here pass TRPC usage status like
[09:11:42,480] this query options. And once you have the usage, let's go
[09:11:48,960] ahead and define the show usage to be double exclamation point and then usage.
[09:11:55,520] And then in here you're going to do if you pass the points to be usage remaining points and in here usage
[09:12:03,918] milliseconds before next. And now let's refresh.
[09:12:09,918] And it looks like it does not exist yet. I think that is because yes, so it's not
[09:12:16,960] going to exist right now because in order for this to be written to the database, let me just start npx Prisma
[09:12:24,558] studio so you can see what I'm talking about. We have this new model called usage. Right now we have the fields key
[09:12:33,122] points and expire but nothing exists here. It will not be created by itself.
[09:12:38,398] It will be created after the very first consume credits function
[09:12:44,398] is called. So the first time we do dot consume and take some points that's when
[09:12:49,918] it's going to be stored in the database. So let's go ahead and let's do that. So
[09:12:55,200] the first one we can do it for is the messages procedures. So let's go inside of messages server procedures and in the
[09:13:03,360] create here let's go ahead and do that. So before we even create the message
[09:13:10,398] here let's go ahead and let's do await and
[09:13:16,160] let's call consume credits like so. And now this will already work.
[09:13:24,160] But I want to do I want to just wrap this into try and catch because get
[09:13:30,320] usage uh usage.conume will have an error object right because
[09:13:37,680] there is an error that we have to catch and that is the error which says you have no more points. So we have to catch
[09:13:44,718] that here. So let's do it by wrapping this inside of try
[09:13:51,200] like so and then open catch and let's get the error. And the first thing we're
[09:13:56,320] going to do is we're going to check if error is actually an instance of error.
[09:14:01,918] This is this basically means that something else happened. Right? This
[09:14:06,960] doesn't mean that we hit a rate limit. This just means something literally
[09:14:12,320] failed. Maybe it's the database connection, right? Because this works by connecting to the database. So maybe that failed. So it would be incorrect to
[09:14:19,598] just throw a TRPC error saying rate limit exceeded if consume credits fail. That's why in here I will throw
[09:14:28,320] new ERPC error here with the code
[09:14:33,918] bad request and a message something went wrong. Right? So I have no idea what
[09:14:41,438] happened here but it's not something we expect otherwise it is so if it is not an
[09:14:48,878] instance of error that means this is the rate limit response. So in here add a
[09:14:55,360] code too many requests and add a message um let's see you have no more or maybe
[09:15:03,278] you have run out of credits something like that basically a message
[09:15:09,438] indicating to the user that they have no more points and now just for fun I'm
[09:15:14,640] going to modify my usage here and I'm going to set uh two free points
[09:15:20,640] so let's go ahead and try it out now I'm going to do build a landing page.
[09:15:26,078] Something that reliably works for me. And we should have done uh one thing here immediately. Oh yes, we forgot the
[09:15:33,840] ingest API. We forgot to do that. npx inest cli. Whoops. My bad. And let me
[09:15:42,320] just refresh this. And you can see that now when you refresh you you have one free credit remaining which resets in 29
[09:15:49,840] days and 23 hours. Do I have my Prisma Studio running? I do. So if I go here
[09:15:55,680] now in the usage and reset once we call this consume method, you can see that I have a key which is the user ID with
[09:16:04,480] some prefix here. And I can see when this will expire and I can also see how many points I have spent so far. So I
[09:16:11,122] only spent one point so far. And basically that is how this is going to
[09:16:16,480] work. So just for fun I will do build a landing page again. And this time uh I
[09:16:22,238] will refresh and I will have no free credits remaining. So if I try one more time I should get the error you have run
[09:16:29,122] out of credits and we just got that error. Amazing. You successfully implemented usage. Now you probably
[09:16:36,320] noticed a little bit of a weird thing here. Uh and that is that uh we call
[09:16:42,320] consume credits before we even know that this succeeded.
[09:16:50,078] So if you want to, you could move this consume credits function into the
[09:16:56,398] background job and then only consume the credit after you successfully save the
[09:17:01,918] result to the database. It will depend on what you want to protect, right? If you want to protect your resources, you
[09:17:09,200] will most likely add this before you even call uh something like inest. and
[09:17:15,680] you don't even want to spend any open AI credits if someone doesn't have enough credits, right? But if you were to pass
[09:17:22,558] this in the background job, you would also need to pass the user ID in the event data. So just be mindful of that.
[09:17:29,438] And then you would also have to modify the consume credits overall because in here we rely on it using ALF and I'm not
[09:17:36,640] sure how this will work if it is invoked from a background job. I just think that it will throw user not authenticated
[09:17:43,360] because background jobs by default are not authenticated. They are like web hooks. Right? So that's why I decided to
[09:17:51,598] do it in the procedure rather than in the background job. What we have to do
[09:17:56,718] is this to-do right here. So let's remove this. Let's add queryclient dot invalidate queriesc
[09:18:04,320] usage status query options like this. So now when we create a new message, we
[09:18:11,278] automatically invalidate the queries. And one easy way to reset this is to
[09:18:16,398] just go inside of your Prisma Studio and just bring back the points for your user
[09:18:22,320] to be zero and click save. And this way you will not have spent any points. So
[09:18:27,520] you are now back at three credits remaining. So if I go ahead and do test and send the message now, it should
[09:18:34,640] automatically upgrade. And there we go. You can see now it says one. So that is thanks to this invalidation here. And
[09:18:41,438] now we can also fix this to-do here as well. So if error.code error data question mark code is equal
[09:18:48,718] to too many requests, let's go ahead and do router. We don't have router. So
[09:18:55,360] let's add it. Con router. Use router from next navigation. Make
[09:19:01,918] sure you add this import. And just do router.push. push forward
[09:19:09,122] slash pricricing like that. So now when you hit too many requests it will yeah
[09:19:15,200] you can see this is kind of the not perfect thing. If you spend your credit
[09:19:20,560] on a bad query we take the credit away from you and you don't get the result.
[09:19:26,000] So yeah not exactly perfect but I think it's pretty good so far. Right. Let's go
[09:19:31,840] ahead and just I purposely just going to use stupid queries now just to get that error. There we go. So once I run out of
[09:19:39,200] credits, I'm redirected to the pricing page. Perfect. Now there is one more place where we need to do this exact
[09:19:45,436] thing. So I'm going to go inside of messages procedures just so I can copy
[09:19:50,480] the try and catch for my consume credits here. And now let's go ahead and go
[09:19:56,240] inside of projects server procedures.
[09:20:02,640] procedures right here and find the create right here and simply call that
[09:20:10,960] try catch before you create a new project and import consume credits
[09:20:20,000] like this and then go inside of project form component and we have to do the
[09:20:26,240] same thing. So first things first query client invalidate queries and pass in gRPC
[09:20:33,436] usage status query options
[09:20:39,680] and then in here if error data code is too many requests
[09:20:46,960] do router.push/pricing. There we go. So now you have the exact
[09:20:52,080] same thing happening from here. So if you try test from here same thing happens. you have run out of credits and
[09:20:58,960] you are redirected here. Amazing. But right now, if we were to upgrade,
[09:21:04,640] nothing would change. So, let's go ahead and fix that. So, in order to fix that,
[09:21:10,160] we have to go inside of our usage in the lib here. And then what we have to do uh
[09:21:17,276] is we have to get inside of here the status. So has and let's do await out
[09:21:27,916] hon has premium access will be has plan
[09:21:34,000] and then pro. So how do I know it's pro? Well because inside of the clerk
[09:21:39,276] configuration here the slug is pro. So maybe has row axis would be better. And
[09:21:47,756] then what I'm going to do is I'm just going to add const pro points 100 like
[09:21:53,756] this. And then if I have has proaxis, it's going to be row points. Otherwise,
[09:22:00,880] it's going to be three points like that. And here's a
[09:22:06,480] quick tip. If you also want to change the duration uh which I wouldn't
[09:22:12,160] recommend you know there there's also if you look at all of these apps chat GPT
[09:22:17,756] uh claude lovable bolt replet I've noticed that not all of them have annual
[09:22:22,880] plans and the reason for that is it is safer for them to bill you monthly uh
[09:22:29,520] simply because they don't know how many credits you can spend right so that's why I recommend not changing the
[09:22:35,596] duration for the proaxis. But even if you wanted to, the way this rate limiter
[09:22:40,640] works is that it will not update the duration, right? So you can update the
[09:22:45,756] points in the middle of an existing uh database record for rate limit, but you
[09:22:51,200] cannot do it for expiration just if you in case you were interested. But in this case, it doesn't really matter because
[09:22:57,756] it is safer for us business-wise to track monthly usage and do monthly
[09:23:03,200] billing, right? Even if a user is on an annual plan, we're just going to give them the same amount of points, 100
[09:23:09,120] points per month. Great. Now that we have this done, uh
[09:23:15,200] let me just check. I think this is the only place here uh where I have to do
[09:23:20,480] that. And now let's just do a comparison. So when I click on one of my projects, it says
[09:23:26,400] zero free credits remaining. I will click upgrade. I will click subscribe. Pay with the card.
[09:23:33,200] That's it. That was clerk billing. I don't know if you just saw that, but that was it. I can now go inside of my
[09:23:39,596] manage account billing and I can find that I am on this plan. And from here, I
[09:23:45,756] can see cancel subscription. I can switch. I can remove monthly, whatever I
[09:23:51,596] want. So, I think this is insanely good. And let's see if it worked. So, right
[09:23:57,276] now, uh I think that there we go. I have to refresh, right? And then it says 96
[09:24:03,276] free credits remaining. So we are have officially upgraded, right? I can now
[09:24:08,400] send another broken message. And it works. So we successfully added 100
[09:24:14,400] points. It seems like it has subtracted the existing points we spent during the free trial. So that's something we could
[09:24:21,436] improve, but overall it works. When the user is pro, we use a larger amount of
[09:24:28,080] points here. So now what we have to do is we have to
[09:24:34,240] change the text. This is no longer free credits. This is just credits now. And we can also remove all of the upgrade
[09:24:40,880] buttons. We no longer need them. So let's do that. I'm going to go inside of the usage.tsx
[09:24:48,000] here and let's see. So this is from out which means that in here we can access
[09:24:53,596] has from use out from clerk next.js. JS
[09:24:59,756] I have has here so I'm going to change let's go ahead and do const is has pro
[09:25:06,800] access has plan pro
[09:25:13,520] has question mark plan pro so let's check if has pro access then it's an
[09:25:20,240] empty string otherwise it is free so now it should just say 95 credits remaining.
[09:25:27,200] No free credits. And let's hide this button if I don't have Pro Access.
[09:25:37,360] So, only show this for users who don't have Pro Access. There we go. And let's
[09:25:43,200] do the same thing in the project view. So, I'm just going to
[09:25:48,320] copy this. Go inside of the project view. I'm going to add it here.
[09:25:54,720] I'm going to import use out from clerk nextjs.
[09:26:00,800] I'm going to move it here. And then if I don't have pro access, I'm
[09:26:06,800] going to show this button right here. So if I don't have pro access only, then
[09:26:15,916] show the button. And there we go. Now the button doesn't exist. If you want to use the reverse
[09:26:22,560] logic, if you want to create const is free tier, then you would do has plan.
[09:26:30,800] And be careful here. It's not free, right? You always have to go inside of
[09:26:36,320] here, inside of your plans, select the plan you want, and then check the slug.
[09:26:42,400] It's free user. This is the one you want. That's the mistake I made when I
[09:26:48,160] developed. So, I'm just warning you. But in here, we used this type of logic, so it's fine. And I think that that might
[09:26:56,720] be it regarding billing. It was that simple to do. I'm super impressed by
[09:27:02,080] this. No web hooks, nothing. I mean, 90% of this chapter wasn't even adding billing. It was adding usage rate
[09:27:09,436] limiting, right? So amazing, amazing job. I am super satisfied by this. So
[09:27:16,560] let's go ahead and merge all of this. I believe this chapter is called 17 billing and let's just mark things. So
[09:27:22,480] we enabled billing, created pricing page, added rate limiting, updated the Prisma schema, created the util, we
[09:27:29,276] created the usage component and we updated procedures to trigger credit spend. Yeah, one more thing I wanted to
[09:27:35,596] show you. If you want to, you can also implement something like usage procedure
[09:27:40,800] and then in the middleware you could check for the uh consume status. Maybe
[09:27:46,640] that would be something fun for you to try and then you would have a more abstracted routers and procedures to
[09:27:53,916] work with. Maybe homework for you if you want to after you finish the project.
[09:27:59,916] Okay. So, I'm going to go ahead and I will create a new branch here.
[09:28:06,000] 17 billing like this. I'm going to stage
[09:28:11,120] all of my changes. I'm going to add 17 billing commit here and I'm going to
[09:28:16,720] publish the branch. Just a quick reminder, there's a code rabbit free extension which you can use and it will
[09:28:23,756] review all of your files for you. Now, let's go ahead and let's open a
[09:28:29,276] pull request here and let's see the summary of our billing changes.
[09:28:36,320] And here we have the summary. We introduced a usage and credit tracking system for users with separate limits
[09:28:42,560] for free and pro plans. We added a new pricing page with dynamic theming and a
[09:28:48,000] detailed pricing table. We added a usage component to display remaining credits and reset time with an upgrade prompt
[09:28:55,200] for nonpro users. Navbar now dynamically changes style based on the scroll
[09:29:00,880] position. As per the enhancements, project and message creation now deducts
[09:29:06,480] credits and prevents actions if credits are exhausted, redirecting users to the pricing page when necessary. Usage
[09:29:13,436] status is now displayed and updated in relevant forms and components. The upgrade button is only shown to users
[09:29:20,160] without a pro plan. Perfect. So, that's exactly what we did. As always, an more
[09:29:25,916] in-depth walkthrough here. And we have a sequence diagram uh explaining exactly
[09:29:31,200] what happens. Right? So when user tries to submit a and create a new project or
[09:29:36,400] a message, we call the mutation. In here we call the consume credits and in here
[09:29:41,436] we call the database to check and update the usage. And then if we have credits
[09:29:47,040] available, we return with succeed with success and we proceed with the creation. And then we simply return the
[09:29:53,520] creation results. But if credits are exhausted, we throw too many requests and we redirect the user to pricing.
[09:30:01,040] Amazing. Exactly what we developed. And in here we also have the diagram for our
[09:30:07,360] get usage status method which simply reads the usage and it returns it.
[09:30:12,640] Perfect. So in here we have some actionable comments. This one recommends adding a default false in case has
[09:30:20,720] doesn't load, which is actually a good advice. We could do that in here. It recommends wrapping this
[09:30:28,480] instead of try and catch and fall backs to soon.
[09:30:34,240] So, this can happen if the dates are incorrect. And yeah, this this might be a good idea because it's kind of u weird
[09:30:42,960] that the entire page fails just because the date renders incorrectly. So we
[09:30:49,360] could actually do this in the next chapter. Uh so we ensure some kind of security here so it doesn't ruin the
[09:30:56,240] entire experience. And then in the usage.ts for all of the function, it
[09:31:01,360] recommends adding error tracking. But we don't have to do that simply because we track in the TRPC.
[09:31:07,276] So I'm going to merge this pull request. I'm going to keep in mind the changes it suggested. And then I'm going to change
[09:31:13,200] back to my main branch here. And I'm going to click on the synchronize changes button. And okay. And then I
[09:31:20,080] will confirm that we just merged that right here. 17 billing. Perfect.
[09:31:26,240] Amazing. Amazing job. We have finished billing. and see you in the next
[09:31:32,000] chapter. In this chapter, we're going to implement agent memory. Right now, our
[09:31:34,000] 
[09:31:39,596] agent and our conversations have no context. The agent doesn't know the
[09:31:45,276] history of our conversations. It doesn't understand our previous messages. Each
[09:31:51,680] message is technically a new project. Let's test that out. As always, ensure
[09:31:58,320] that you are on your main branch and feel free to synchronize the changes. The last chapter was 17 billing. Make
[09:32:06,320] sure you have npm rundev and injust running. And what I want you to do is I want you to create a very simple build a
[09:32:13,520] landing page. The one we already did hundreds of times. So go ahead and build
[09:32:20,320] a simple landing page. And here we have a very simple landing
[09:32:26,560] page. What if I just send it a message make it red?
[09:32:31,916] What we would expect to happen is that it would understand that my previous message was build a landing page and it
[09:32:39,520] will now change it to red. But the truth is that won't happen. Right? So it
[09:32:46,560] didn't modify the landing page. It's simply updated the page to be a red
[09:32:52,880] themed page. If I add add a calculator there, it won't understand what I mean,
[09:33:00,640] right? But what we want to is basically a landing page like this
[09:33:06,720] colored in red or if I tell it build a calculator in the hero segment, I want a
[09:33:14,000] little calculator here instead of the rocket. So let's go ahead and make that
[09:33:19,276] possible. The reason we really really need this is not for continuous conversation. The more important reason
[09:33:25,520] is AI can make mistakes. You already saw that sometimes it forgot to add use
[09:33:30,640] client. And we want to allow our users to say, "Hey, you made a mistake. You
[09:33:36,080] forgot use client." Because if I just give it that right now, it will have no
[09:33:42,000] idea what I'm talking about. it has no idea that previously it created this. So
[09:33:48,480] let's improve that. Let's fix that. What we're going to do is the following. We're going to go inside of our
[09:33:56,160] functions.ts and in here let's go right after we do
[09:34:03,596] sandbox ID and let's do const
[09:34:09,200] messages and let's do await step.r run
[09:34:15,840] get previous messages. It is an asynchronous arrow function like this.
[09:34:22,800] And then let's do con formatted messages and give it a type of message which you
[09:34:30,080] can import from inest agent kit. So I can put type message here as well
[09:34:37,756] and set it to be an empty array. And now let's fetch the messages using await
[09:34:43,916] prisma messages and let's do find many
[09:34:49,120] where project id is event data project
[09:34:54,320] id like that and let's add order by
[09:34:59,596] created at descending and then for con message of messages
[09:35:08,800] let's go ahead and push each message to this new array. The reason we are doing it like this is so that we have this
[09:35:15,756] type which cannot be uh broken. So formatted messages
[09:35:22,480] dot push type text ro if message ro is assistant it will be
[09:35:32,240] lowerase assistant otherwise lowerase user like this. And the content is going
[09:35:39,756] to be message dot content. And let me just see what uh what is the problem
[09:35:47,436] here. Formatted messages. Oh, it should be an array of message. My my apologies.
[09:35:54,320] There we go. And then let's go ahead and let's return formatted
[09:36:01,520] messages. There we go. So right now it it is going to have context of the entire
[09:36:07,120] conversation. and it will know exactly what we told it. It will know exactly what it responded back to us. So now
[09:36:13,200] let's go ahead and let's create a const state to be create state from agent kit
[09:36:20,080] again. So create state from inest agent kit.
[09:36:25,276] Let's give it a type of agent state. So we already have agent state defined
[09:36:31,040] right here. We have summary and files. And let's go ahead and do the following.
[09:36:37,680] The first object in here will be summary make it empty and files make them empty.
[09:36:44,000] And then in the second object you will have messages which will be previous messages.
[09:36:51,840] And now we have the state. So now we have to add this state uh to a couple of
[09:36:57,756] places. So let's go ahead and find our network execution right here. And let's add default state
[09:37:05,916] to be the state from above. And in the result when we run it, let's add state
[09:37:13,520] and make it state or you can use the shorthand operator like this. Perfect.
[09:37:18,720] So let's go ahead and do this again. Build a landing page. Let's do that.
[09:37:25,520] Build a landing page. And let's follow the context here. As you can see, we now have a step get previous messages. And
[09:37:32,160] you can now see that we included all of the new all of the older messages even
[09:37:38,160] the responses and the user messages here. So now the code agent as you can
[09:37:43,756] see has messages. So it knows exactly what we ask it to do now. So let's go
[09:37:50,400] ahead and wait for this result right here.
[09:37:55,916] We should see it any second. And you can see how it preserved the red color because that's what we asked previously.
[09:38:02,320] So it already knows the context. And now this is what I'm going to say. Add a
[09:38:07,520] calculator in the hero segment.
[09:38:12,880] So I didn't tell it to create a landing page. I didn't tell it anything other
[09:38:18,320] than this. And let's see how well it will do. Of course, it can make a mistake even at
[09:38:23,680] this point. But now it has the context. It knows that add a calculator in the hero segment is the message after build
[09:38:32,000] a landing page and it is a message after uh created a polished fully responsive
[09:38:38,080] red themed landing page. So let's see if it was able to do this or not.
[09:38:45,040] We should see any second now. Uh and looks like it wasn't able to do it. Let
[09:38:50,400] me refresh just in case and let's see the code.
[09:38:56,560] Looks like we didn't add it. So, let I just want to make sure that I
[09:39:02,480] didn't accidentally maybe do the incorrect order of loading the messages here.
[09:39:10,640] Created at descending. I think that should be okay. Let's try again. You
[09:39:17,040] didn't add the calculator component in the hero page. add the calculator
[09:39:25,120] component. So in the previous examp when I tried this privately off camera, it worked for
[09:39:32,640] me. So you can see that AI is sometimes a bit unpredictable, but I just want to tune it, you know. Uh we might even have
[09:39:40,240] to modify the prompt for this. We might have to tell it you have context of all
[09:39:45,840] older messages. You can use older messages, right? But you can already see
[09:39:51,200] a slight improvement, right? Because right now when we asked it to create that landing page, uh it's it made it
[09:39:58,160] red, right? So it understood the context, but I have a feeling it is still not understanding entirely what we
[09:40:05,120] want. Let's see if this will be better. And there we go. We now have a very very simple calculator in our landing page.
[09:40:13,916] Great. So this is exactly what we asked. Let's try and do make it green now just
[09:40:20,880] to make sure that this is the last message it sees. Right? I want I'm okay
[09:40:25,916] with adding state. I just don't want to make it so that it conf it's confused
[09:40:31,200] about what is the latest message. So let's follow along in the running here.
[09:40:36,960] So yes, make it green is the first message in the array here. Maybe that should be the opposite. I don't know
[09:40:45,680] because maybe it's now thinking that this the last message in the array is the newest one. And let's see the coding
[09:40:53,276] agent. I think the coding agent understands the same thing maybe or not.
[09:41:00,640] Yeah, in here it also the last message here is build a landing page. So I keep thinking that maybe
[09:41:07,840] or maybe not. Yeah, you can see that it preserved the fact that it's a landing page. It added the calculator and it ma
[09:41:14,320] changed it green. So obviously now it understands what we are doing. So I'm going to go ahead and add a little to-do
[09:41:21,360] here. To-do change to ascending if AI does not
[09:41:30,320] understand what is the latest message.
[09:41:36,160] But I think that it works pretty well. I think that it understands that make it green refers to the landing page which I
[09:41:44,080] scolded it for because it didn't add the calculator. So now it has both the calculator and it is green. And I think
[09:41:50,960] that's exactly what we wanted. So let's try and just do one more time make sure
[09:41:56,960] to use separate component files.
[09:42:02,480] And while this is happening uh let's go ahead and do the following. I want you to visit my uh public assets folder or
[09:42:10,640] the source code. You can use the link in the description or the link you can see on the screen. And in here I added a new
[09:42:16,160] file called additional prompts. And in here I have the response prompt and the
[09:42:21,276] fragment title prompt. So go ahead and copy this entire file. Go inside of your prompt.ts
[09:42:28,320] and at the end of it or if it's easier you know at the top just add those two
[09:42:33,840] and export both of them. So export the fragment title and export the response
[09:42:38,960] prompt. We're now going to use this to create two more agents so they create better responses
[09:42:46,080] and so they create a proper name here. So let's see what it did. There we go. So it understood the context. It it
[09:42:53,756] seems to again made it red. Uh I keep thinking that the way we are loading these previous messages maybe isn't
[09:43:00,000] perfect. So, you're going to have to tweak that a little bit or maybe you can
[09:43:05,120] somehow um maybe you can somehow modify it so that
[09:43:10,720] it knows you can add it in the content like maybe let's see
[09:43:16,640] I'm thinking of keeping a track of the index and then maybe we can modify the content and like say first message and
[09:43:23,680] then the message content like something like that and then maybe
[09:43:30,080] In here we can keep track of index and then replace this with the index for example. Maybe that can instruct it
[09:43:36,320] better to understand what's going on. But uh what's important is that it at
[09:43:41,360] least understands the last message right that's what I want to make sure. So I
[09:43:46,560] just told it to use separate components and that's exactly what it did. It preserved the fact that it's a landing
[09:43:52,080] page but it made it uh into separate components. Let's do make it green or
[09:43:58,240] let's do make it yellow. this time you know keep testing it make sure that it's listening to you and you can play around
[09:44:04,560] with changing the order here you can use that idea that I told you uh you can
[09:44:10,080] even explore you know in justest documentation about the state maybe in there we can find something uh I will of
[09:44:16,240] course research off camera and in the next chapter I will tell you more information if I find out anything new
[09:44:22,640] but what I want to do now is the following in the function here after the network
[09:44:28,960] finishes. So right here after we get the result, I want to go ahead and I want to
[09:44:35,436] do uh the following. So I want to create
[09:44:40,560] an agent called fragment title generator and that will be create
[09:44:48,480] agent like this. And let me just see I already
[09:44:53,520] forgot how do we create agents. So the name will be something and then
[09:44:59,200] the description and then the system and then model. Okay. So I will just copy this.
[09:45:04,720] Let's add it all over here. So the name will be fragment title generator.
[09:45:11,360] A description will be a fragment title
[09:45:16,560] generator. And for the model we can use open AI and you can use a cheaper model. You can use
[09:45:22,640] 4.0 for example. And you can remove the default parameters here. So in here use a cheaper model because this will just
[09:45:28,640] generate text and in here go ahead and use the fragment title prompt which we
[09:45:34,400] just added and also now import the response prompt.
[09:45:40,000] So let's go ahead and use this. Now after this go ahead and copy it and now
[09:45:46,640] this will be response generator. Change this to be response generator and
[09:45:54,000] a response generator and change the system here uh to be
[09:46:01,436] response prompt. And now you're going to define two outputs. The first output
[09:46:07,756] here will be t uh fragment title await
[09:46:13,916] fragment title generator run. And inside of here you will pass
[09:46:20,960] the result state data summary. And then you're going to copy this. And
[09:46:26,320] this will be response response generator from the same thing.
[09:46:32,960] And then you're going to go inside of save result.
[09:46:38,080] And for the fragment title, go ahead and do the following. Fragment title dot uh
[09:46:45,596] first in the array dot type is equal to text fragment title first in the array
[09:46:52,560] dot content otherwise just fragment like this and let me just see content is
[09:47:00,240] this um okay let me just build a little function
[09:47:06,960] uh so we don't have to do this in one file so we have fragment title
[09:47:13,360] output and we have response output here. So I'm going to just collapse this
[09:47:24,080] and then in here I'm going to do con generate fragment title
[09:47:30,720] and I will do if fragment title output type is not
[09:47:38,400] equal first in the array of course the text return fragment ment
[09:47:48,000] otherwise let's go ahead and do if fragment title generator first in the array
[09:47:54,480] content and let's check maybe if is array
[09:48:02,240] can I do this uh array is array I think
[09:48:11,040] fragment title output because this can be an array Okay, then let's return
[09:48:17,840] fragment title output first in the array.content.m map
[09:48:24,480] text join
[09:48:34,240] like this. So basically this should always return a string
[09:48:40,800] and otherwise just return
[09:48:46,160] in the else here just return the content
[09:48:56,560] and let me just see so this is a type of string here
[09:49:02,640] uh and well you can just add another safety one fragment And okay, but this
[09:49:08,400] is unreachable. So I don't know why exactly uh string is not uh okay. Yeah, my bad.
[09:49:19,120] And now go ahead and copy this and call this generate
[09:49:25,680] response. And basically the same thing. So response output.
[09:49:34,560] And in here we're going to just set the default to be here you go.
[09:49:42,560] Otherwise it can be this. And now when we have those two in here we can put generate
[09:49:50,160] fragment title. And in the content we can do generate
[09:49:56,880] response. There we go. And this should now improve
[09:50:02,720] uh our app. So let's see if that is uh true or not. So I'm going to do build a
[09:50:09,436] let's actually start a new project just to make sure everything is clear. So build a calculator app
[09:50:16,000] like this. And let's follow the ingest to see if we're going to mess something
[09:50:22,160] up or not. I mean technically I don't think it will ever be an array of items
[09:50:28,960] that we're going to have to join like this. It will almost always certainly be just this, but uh yeah, I guess we're
[09:50:37,520] trying it out. So, we successfully did this fragment title and we successfully
[09:50:44,480] did response generation. So, let's see what it came up with. There we go.
[09:50:49,680] Here's what I built for you. A snazzy calculator app with a sleek responsive design. And we have a name this time for
[09:50:56,560] the fragment calculator app. So that's what I wanted us to achieve, right? If
[09:51:01,756] you don't want this, you don't have to use it. I mean, the app worked just fine before this. So if this for some reason
[09:51:08,800] messes up your app, you don't have to use it. Of course, I just thought it would be, you know, fun to add that as
[09:51:15,596] well. And you can definitely write this in a better way. I mean, starting with the fact that we can just do con title
[09:51:22,640] and just make it this. So let's do output
[09:51:29,120] and just make it this like so. There we go. This is already better. And
[09:51:37,436] then you can do the same thing here. Con output. Change this to this.
[09:51:45,276] And then replace all instances here.
[09:51:50,720] There we go. And you can probably also just use a
[09:51:56,160] single function because it's exactly the same. So let's maybe do parse
[09:52:02,560] uh agent output. And in here let's go ahead and see this is a type of uh
[09:52:10,400] message or array. So let's try value message
[09:52:16,080] array like that. And then can I just use value
[09:52:24,480] con output value first in the array? Yeah, that works as well. So parse agent output
[09:52:32,560] then is the only function you need and you can then put it maybe at the top
[09:52:38,800] of the file and we are later going to move it to libs. So basically parse agent output and in
[09:52:46,160] here it accepts the value which is a message which is an array. The message is a type of message from agent kit. And
[09:52:53,276] now that we have parse agent output. Let's go down here
[09:53:00,080] and keep the fragment title generator, keep the response generator, keep the two outputs and remove generate response
[09:53:07,360] function. And now what you're just going to do is
[09:53:13,596] parse. How did I call the function? Uh, parse agent output.
[09:53:21,680] And in here, you're going to parse response
[09:53:27,276] output. And in here, you're going to pass
[09:53:33,200] fragment title output. There we go. And then you can move this function
[09:53:40,960] to utils here in the ingest. So export const parse agent output and
[09:53:47,276] import message from inent uh inest kit here. There we go.
[09:53:55,680] Then you can remove it from here. Find some place you're using it. And then
[09:54:01,040] there we go. Import from utils like this. And let's just do a sanity check
[09:54:07,520] here. Uh make the calculator use glossy
[09:54:13,276] glassy design or something like that. The only thing I'm trying to do here is
[09:54:20,080] again confirm it can kind of understand the context of my previous messages and
[09:54:25,276] that it will give me a nice response with a name for my fragment. So we can
[09:54:31,360] follow again inside of the running here to make sure that's what's happening.
[09:54:37,360] There we go. Fragment title generator response generator.
[09:54:42,960] And let's see. Here's what I built for you. A sleek glassy design calculator app with a modern twist. Very cool. So
[09:54:50,160] it understood that we just wanted a glassy design on top of our previous
[09:54:55,916] app. Amazing. I'm very very satisfied with this. Uh, and I think that marks the end
[09:55:03,520] of this chapter. As always, you know, your app worked just fine up until this point. So, don't let uh this ruin your
[09:55:11,680] project if you don't like it or, you know, feel free to research a bit yourself about whether this should be
[09:55:17,840] descending, ascending. Uh, and if this is failing for whatever reason, the
[09:55:24,720] fragment title generator and the response generator, you can also remove them. You don't need them. And make sure
[09:55:29,840] to just use a cheaper model here simply because you can even use an entirely new
[09:55:34,880] model, you know, like uh Gemini, Grock, whatever, because we are not calling any
[09:55:40,080] tools here. So, just make sure this is something cheap so it doesn't spend your credits for no reason when it's just
[09:55:46,160] generating some text. Uh, amazing. So, 18 agent memory. Let's go ahead and
[09:55:51,840] review that. I'm opening a new branch here. 18 agent memory.
[09:55:59,520] I'm going to stage all of my changes. 18 agent memory. And I'm going to commit
[09:56:05,436] and I'm going to publish the branch. Let's go ahead and open a pull request.
[09:56:12,880] And let's review our changes.
[09:56:18,080] And here we have the summary. We enhanced message handling by retrieving and formatting previous messages for
[09:56:24,800] improved agent interactions. We added automated generation of concise
[09:56:30,000] userfriendly summary messages and short descriptive fragment titles. We updated
[09:56:35,520] the process for saving results to use dynamically generated summaries and titles instead of static content. And we
[09:56:42,160] introduced utility functions and structured prompt templates to standardize agent outputs. And in here
[09:56:48,800] we have just one comment and that is that we should probably check if the value is actually valid. Um so yeah we
[09:56:56,960] could add this as well and I just noticed that we return the text fragment
[09:57:02,080] as placeholder even though we use this both for the response and for the fragment title. So, I should probably
[09:57:08,400] add a new value, something like fallback value, something like that. We'll see.
[09:57:15,200] Uh, nevertheless, very satisfied with this one. I will research before the next chapter if there's something we can
[09:57:21,840] do uh better when it comes to adding message history. But I think this is as
[09:57:28,000] good as we can do right now. Uh, great. So let's go ahead and change this to
[09:57:34,640] main and let's synchronize our changes and we should see our new poll request
[09:57:40,400] being merged. Amazing. Uh I believe that marks the end of this chapter. Amazing
[09:57:46,080] amazing job and see you in the next one. In this chapter, we're going to go over
[09:57:50,000] 
[09:57:53,276] some final bug fixes and improvements in our application. This will include
[09:57:58,720] learning how to increase the sandbox expiration, making A2B template private
[09:58:04,240] so no one else other than your team can use it, improving our conversation history from the previous chapter, and
[09:58:11,200] overall error handling improvement in our application. So, let's start by learning how to make our sandboxes last
[09:58:18,240] longer. As always, ensure that you're on your main branch and make sure you have
[09:58:23,276] synchronized your changes. The last chapter we we merged was 18 agent memory. So let's learn how to increase
[09:58:30,880] sandbox expiration. Right now inside of our application if I visit uh even this
[09:58:37,756] one 4 minutes ago, okay, this one works. But if you visit anything older than 5 minutes ago, it will show this the
[09:58:44,560] sandbox wasn't found, which is not ideal if you're doing some presentation or if you're showcasing this to someone. So
[09:58:51,360] here's what how you can increase your timeout. So the sandbox life cycle it
[09:58:56,560] will stay alive for 5 minutes by default but you can change that using the timeout parameter. Now of course
[09:59:02,640] depending if you are on free tier or if you're on premium tier you have different limits. On premium tier you
[09:59:08,560] can keep it alive up for 24 hours but on free tier which we are on we can keep it
[09:59:13,596] alive for 1 hour. So for example let's find something in between. Let's use uh
[09:59:19,436] half an hour. I think that's a fair amount. So all you can do is go inside
[09:59:24,480] of your functions inside of the ingest folder and in here when you create it go
[09:59:30,480] ahead and do await sandbox dot set timeout and now you have to enter in
[09:59:37,840] milliseconds right and in here you can see so the maximum time a sandbox can
[09:59:43,680] can be kept alive is 24 hours for pro users and 1 hour for hobie users. So, if
[09:59:50,160] you want to, you can set this and then this will be alive for an hour. But keep
[09:59:56,000] in mind, the longer you put this, the more credits are you going to spend. So, what I recommend is, you know, find a
[10:00:03,596] middle ground. This is half an hour. So, you can put this instead.
[10:00:09,756] Uh, and you also have this util here, I believe, get sandbox. Now, in here,
[10:00:18,800] it's also important to increase it, but you don't have to put half an hour here,
[10:00:25,756] but um yeah, let's be consistent. And let's put half an hour here as well. I just want to be careful and I don't want
[10:00:31,596] you to spend all your credits, but perhaps maybe add this to some kind of
[10:00:36,640] constant here. Types.ts DS export const sandbox timeout
[10:00:43,840] and add a comment 30 minutes in milliseconds like this. And then you can
[10:00:49,596] consistently use it in different places and you can easily change it if you change your mind. Let's go ahead and add
[10:00:56,880] that here. Sandbox timeout. There we go. So now we know how to increase our
[10:01:03,120] sandbox timeout. And I will try this out. I will do build a uh calculator app
[10:01:08,160] here and you know at the end of this chapter I'll I'll see if it still exists
[10:01:13,840] if it manages to do it without errors. So let's see what else do we have to do here. We just learned how to increase
[10:01:20,720] our sandbox expiration. Uh I'm going to leave this for last simply because we are in the middle of generating. Uh so
[10:01:27,436] let's go here. Improving conversation history. So in the previous chapter we
[10:01:33,200] learned that we can add previous messages and we can add it to the state and I've been experimenting a bit and I
[10:01:40,720] think I found kind of a perfect combination. So what I think we have to do is we have
[10:01:48,160] to limit our messages history because the longer the history the more confused
[10:01:54,880] the model gets. At least that was my experience. So, I limited it to five messages. I'm pretty sure it would work
[10:02:02,160] great with 10 messages also, but five was somehow the sweet spot where I was able to keep a conversation going and do
[10:02:08,960] some small changes uh constantly. And then the proper one is actually created
[10:02:15,040] at descending, but make sure that you do reverse in here. So, it's actually
[10:02:22,720] ascending. You need ascending here. But since we're limiting the take, we need
[10:02:28,320] to offset, right? You can also do the offset thing. Actually, it is skipped in Prisma, but honestly, I'm not really
[10:02:36,240] sure if we need to do that. And we can just do it descending and then just reverse them here. And this, in my
[10:02:42,960] opinion, gave me much much better results than anything else. So again, I
[10:02:49,276] invite you to experiment. But once I did this, so I keep this at descending. I
[10:02:54,400] limit this take to five and I reverse the formatted messages. And this made the AI understand much better what I'm
[10:03:01,276] building. So for example, let me do make it glassy design.
[10:03:07,200] I'm going to try and do this. So we're going to see. Okay. So we did that. We
[10:03:14,240] improved the conversation history. And now let's talk about error handling. So,
[10:03:19,520] uh, error handling in our app currently doesn't exist outside of TRRPC procedures, which means that all of our
[10:03:27,520] suspense can go wrong. So, here's what we can do. We can do npm install react
[10:03:34,800] error boundary. And let me show you my version here. So,
[10:03:39,840] package.json React error boundary 6.0.0.
[10:03:46,480] And then let's go ahead and find a random suspense here for example for loading the project. So how about we add
[10:03:54,160] error boundary here and wrap it in suspense.
[10:04:01,200] This is how you do error handling if you want to do it on a segment level. Nex.js
[10:04:09,040] also comes with its own error boundaries which are written the same as pages. you
[10:04:16,000] would have error.tsx. You can of course add this as well, but I want to show you this. So, uh I'm not sure if this is
[10:04:23,680] error boundary from react error boundary.
[10:04:30,320] Okay, I think it needs to be like this. There we go. And then in here you would add a fallback
[10:04:37,436] error like this. So, first let me just check if this is working. There we go.
[10:04:43,276] Glassy design. glassy calculator you can see it understands the context perfect
[10:04:48,320] so let me show you this now uh so first without error boundary so comment out
[10:04:54,320] error boundary I'm working inside of project ID let's go inside of uh projects get one here and in the query I
[10:05:03,520] want you to throw new tRPC error here with code bad request
[10:05:11,680] and refresh here And in here you can see it's loading project. It's loading
[10:05:16,720] project. Oh uh yes my apologies. No u uh I I'm
[10:05:23,916] trying to demonstrate this but I forgot we commented out error boundary and this happens then this is obviously not good.
[10:05:30,800] We don't want this to happen. That's why we have error boundaries like this. So go ahead and refresh now. And again it
[10:05:38,560] will keep trying to do this for 3 seconds for three attempts. one two
[10:05:44,000] three and then finally it will hit the error and this is what you can then
[10:05:50,160] design as your error page right so what's important is that the error
[10:05:55,200] boundary is around suspense now this doesn't make too much sense
[10:06:00,720] because I am wrapping the whole page here right but imagine if course let's
[10:06:08,560] just remove this TRPC error from here imagine the case where I'm doing where
[10:06:16,400] is it UI components where I have the project header here right so let me see
[10:06:21,916] where do I render project header in the project view so go inside of your project view and in here we have
[10:06:28,240] suspense so the error boundary from react error boundary would make a lot of
[10:06:33,596] sense here fallback project header error
[10:06:40,880] like that or in here error boundary again around this suspense
[10:06:48,000] with the fallback messages container error.
[10:06:54,800] So now let's say we go inside of the messages here. Let's go uh inside of
[10:07:01,360] messages get many and let me just try and do this. So throw new tRPC error here. code bad request. So something
[10:07:09,916] happened here and let's go ahead and refresh here. You can see that the project has loaded and you can see it's
[10:07:15,360] trying to load messages. It's trying to load the messages until eventually it fails. And since we added the boundary,
[10:07:23,120] we only see messages container error. But if you didn't have that here in the
[10:07:28,160] project view, if you didn't wrap the error boundary, let's see what would happen then. So let's refresh again. So
[10:07:35,596] it's loading messages. It's loading messages and you already know what will happen. The entire screen will error. So
[10:07:43,436] just like minimizing the loading state, you can use the error boundary to minimize the error state. So that's what
[10:07:50,800] you would do, right? That's why we use the error boundary. So I would recommend, you know, finding all the
[10:07:56,320] suspenses that you use in your project. And I think these are the only three. So we just added to all of them, right? And
[10:08:03,840] you can also do the following. You can also add inside of source app. You can add a page called error.tsx.
[10:08:12,560] Now this has to be a client component and in here make sure to call it error
[10:08:17,916] page. Don't call it error. This is a reserved keyword. Call it error. And you can return here global error. You can of
[10:08:25,756] course design this however you want. But this is useful. So this right now
[10:08:31,200] doesn't do much. But let's go ahead and do this. Let's go inside of project ID and let's say we forgot to wrap this
[10:08:37,916] error boundary here. So now uh and yes uh also go to project
[10:08:43,756] view and comment out the error boundary here.
[10:08:50,160] Now the error the global error takes care, right? So that's how the global error works. So if I didn't have this,
[10:08:57,200] let me just remove it. Now if I didn't have this, this is what would happen.
[10:09:02,960] Let's say we forgot all the inner error boundaries, right? This happens. So, this is the one thing
[10:09:10,320] you don't want to happen. This error just looks ugly. It looks like something really, really broken, right? That's why
[10:09:16,960] you want to make sure that you have the inner error boundaries. You want to make
[10:09:22,080] sure that you have your individual page error boundaries and you should also
[10:09:27,520] have your app error.tsx the sx simply because it is the last
[10:09:34,080] line of defense in case something goes wrong. Perfect. So now let's go back
[10:09:40,880] inside of our messages procedures here. Let's just remove the throwing of the
[10:09:46,880] error here. There we go. Perfect. Now what I want to do is I just want to
[10:09:52,560] go to the usage dsx here component. And I'm really worried about this format duration for a
[10:09:59,680] simple reason. Dates can often cause errors and it would be very stupid if
[10:10:05,596] our entire app here fails just because the date is invalid. So here's uh what I
[10:10:13,200] think we can do. Let's go ahead and try it. So
[10:10:19,840] I'm going to open a function like this. And let me
[10:10:25,200] just close it here. And I'm going to open curly brackets here. Let me close that here.
[10:10:34,080] And I'm going to open Actually, here's what I'm going to do.
[10:10:40,800] Instead of trying to do it here, I'm going to just do const reset time use
[10:10:46,640] memo like this. Make sure you added use memo from React. And then inside of here,
[10:10:54,400] what we're going to do is we're going to open the try and we're going to open catch. And in here, let's add an little
[10:11:00,480] error. And let's do console error. And let's do error formatting
[10:11:06,160] duration error like that. And let's simply return
[10:11:13,200] soon. So it will just say or maybe unknown or whatever you think is better user
[10:11:19,596] experience, right? And then in here let's return format duration and then inside interval to duration and then
[10:11:28,320] start new date and let's me just copy it
[10:11:35,276] and will be this. And then we're just missing the format here.
[10:11:42,800] There we go. And in here let's add ms before next. And then we can use this
[10:11:49,680] constant here. So resets in
[10:11:55,916] reset time. Let me just check if it still works. There we go. Resets in 29 days and 20
[10:12:04,080] hours. Because now if you if this MS before next happens to be something like not a number.
[10:12:11,436] There we go. Resets in now doesn't work and it doesn't break the page.
[10:12:17,916] That's what I at least wanted it to happen. Okay,
[10:12:24,240] perfect. So, now that we have this actually, I mean, we can try it out by doing throw new error. Whoops. And now
[10:12:31,916] it should say resets in unknown. Basically, it cannot block the page. It can still allow the user to work, which
[10:12:39,360] is what we wanted. Um, perfect. So, this is very good. Let's see what else we
[10:12:44,960] have in the list here. So we learned about improving the error handling and now let's talk about making our E2B
[10:12:50,480] template private. So if you go inside of your E2B dashboard in here you can see your templates and you can see that my
[10:12:56,880] Vibe Nex.js test 2 is currently public. That is because we have published it.
[10:13:03,436] The reason I told you to publish it is because I personally had problems with private uh templates. But what you can
[10:13:11,200] do is the following. Open your terminal. go inside of sandbox templates. Go inside of Next.js
[10:13:18,000] and since inside of here we have a E2B TOML file. We can easily
[10:13:25,360] just do E2B template unpublish. You don't have to add any other flags. It
[10:13:31,040] will read everything from here including your team ID. And just confirm that you
[10:13:36,400] want to unpublish it. And what this does is the following. If you now go back here and refresh,
[10:13:43,520] you will see that my vibe next.js test 2
[10:13:48,880] is now set to private. And that means that inside of the functions on the ingest here, whenever someone tries to
[10:13:56,560] create a sandbox with that, this will fail unless in their environment their
[10:14:02,720] E2B API key belongs to my organization. So what I suggest you do now is
[10:14:09,520] definitely try. So let's try make it red.
[10:14:15,436] And you can see that these sandbox are still going strong. So we def it definitely works what we increased the
[10:14:21,436] timeout for. So now what I'm interested in will this still work now that I have made my template private and I think
[10:14:28,560] that it does since I can fetch the sandbox ID. For me, it happened that the sandbox ID was not able to be fetched
[10:14:35,436] once I changed it to private. So, just make sure that it still works here.
[10:14:40,560] Let's see. Make it red. There we go. And you can see how the
[10:14:46,640] conversation history is improved. It made it glassy and red. Exactly what we
[10:14:52,160] wanted. So, we definitely improved the conversation history here. And for me, it seems to still be working. If for
[10:14:58,320] whatever reason yours stopped working, it shouldn't but you know it happened to me so maybe it will happen to you. You
[10:15:04,640] can easily go inside of here inside of next.js and just run E2B template
[10:15:10,080] publish. You don't need any arguments. You can just press publish and then you can confirm.
[10:15:17,596] And then from here you can go back inside of here, go inside of your templates and see the status. Make sure
[10:15:24,720] it's public. And you can even do that from here I think by clicking here if
[10:15:30,080] you want to. Um, perfect. Amazing. So I think that's all we wanted to fix. And
[10:15:37,756] there is one thing left to discuss and that is let's just search for to-do.
[10:15:43,596] Instead of messages container, we're using refetch interval as the live message update. And I was thinking about
[10:15:50,480] what I should do instead of this. But initially I built a project like this
[10:15:55,520] and it worked just fine. So the thing is this is not a multiplayer chat. This is
[10:16:01,040] a single person chat who receives responses from AI and most of the time
[10:16:06,080] you only send one message and then wait for the other message to uh come back.
[10:16:12,240] And we are not just doing any kind of polling. We are doing polling using the tan stack query. This means that this
[10:16:19,040] refetch interval will ddup it will use cache. It will be an extremely optimized interval. And also, I'm not sure if you
[10:16:26,800] knew this, but while right now new requests are being made every 5 seconds,
[10:16:33,040] if I change to this page, requests stop being made. So, you don't have to worry
[10:16:39,120] that in the background it's constantly going to fire. It is a very very optimized polling and it actually makes
[10:16:46,480] no problem to use in our type of application here and in fact you can
[10:16:51,756] even reduce it to 2 seconds if you want to. This will give you a better experience and it will still be very
[10:16:57,916] very optimized. Now in case you're wondering uh okay but does inest offer
[10:17:04,080] any uh realtime updates? They absolutely do.
[10:17:09,436] You can go inside the documentation and read about a real time. So in here you can subscribe to a channel and then from
[10:17:16,080] the function you can initialize uh you can publish to that channel. And I
[10:17:21,916] explored this option but the problem was I wasn't able uh to synchronize both my
[10:17:27,360] Prisma messages and uh the ingest subscription messages. It is absolutely
[10:17:33,360] possible uh and it can be a good homework for you if you want to give yourself a challenge and do that. For
[10:17:39,756] our use case, polling is more than enough. So I will just remove this from here. And if you want to, you can move
[10:17:46,480] this into a constant. So you can change it easily if you're using some polling in multiple places. Uh great. Amazing.
[10:17:54,480] So I believe we are now ready to deploy. I don't think there's anything else we have to do here. So let's go ahead now
[10:18:02,400] and let's merge this. So 19 bug fixes.
[10:18:07,916] I'm going to go ahead and open a new branch. 19 bug fixes.
[10:18:15,200] I will stage all of my changes. 19 bug fixes.
[10:18:20,720] And I'm going to commit. And I'm going to publish the branch. Uh, and since these changes were very very minimal, I
[10:18:28,480] think we can just go ahead and merge them because they were just some very small bug fixes here, we can do our own
[10:18:36,240] review here. So, we added React error boundary. We added global error page.
[10:18:42,240] We added some wrappers here, error boundary. We added the proper sandbox timeout. We
[10:18:49,120] properly uh reverse the messages. So the conversation history is improved.
[10:18:55,596] We use the same sandbox timeout in the utils here. We reduced the refetch
[10:19:01,200] interval. We made it safely here to fetch the reset interval. And we just
[10:19:06,960] added some more error boundaries. That's it. Nothing else needed here. We can merge this request immediately. Amazing.
[10:19:14,560] Amazing job. That marks the end of this chapter. As always, go back to your main
[10:19:20,320] branch here and synchronize the changes and then confirm in the source control that you just merged 19 bug fixes.
[10:19:28,640] Amazing, amazing job. And see you in the next chapter where we are going to deploy our app.
[10:19:35,000] 
[10:19:35,916] In this chapter, we're going to go ahead and deploy our app to Verscell.
[10:19:40,960] This will include the initial deployment. After that, we will obtain our app URL. Then we have to update our
[10:19:49,120] environment variables with that new URL and we have to redeploy and after that
[10:19:54,960] we have to connect inest to our versel project and redeploy once more and after
[10:20:00,160] that we are ready to test the app. So let's start with step one deploy to
[10:20:05,756] versel. So make sure that you are on your main branch and make sure the last one was 19 bug fixes. You can
[10:20:13,040] synchronize your changes if you haven't already. And at this point, you can also shut down your terminal. No point to
[10:20:19,596] have this running while you are deploying. Now, let's go ahead and make sure that
[10:20:26,480] you have a GitHub repository, right? I don't know if you followed the Git workflow through this tutorial, but if
[10:20:33,200] you have, then you have a GitHub repository. So, head to Verscell and
[10:20:39,436] click add new project. And in here, if you are connected with GitHub, you have
[10:20:44,800] your project right here. I'm going to click import. And then I'm going to open environment variables. And in here, I'm
[10:20:52,560] going to go into environment. And I'm going to copy all of them. And then I'm
[10:20:58,160] just going to paste them inside. So database URL, next public app URL, open
[10:21:03,436] AI API key, E2B key, and all of these other ones. And let's click deploy. We
[10:21:10,400] are now going to see the result of this. Perhaps it will succeed from the first try or maybe it will fail. I'm going to
[10:21:17,680] pause the screen and show you the result. And my deployment failed with a bunch of
[10:21:25,680] errors and I forgot about the first rule of deploying to Verscell and that is
[10:21:31,120] that you should try building locally first so you don't waste time with
[10:21:36,720] failed Verscell deployments. And we also forgot about one more important thing
[10:21:42,480] and that is that when we deploy the versel, we need to add a post install script. So let's go ahead and do a post
[10:21:49,756] install script and add it to our package.json here. Let me just add it
[10:21:55,596] here. Let me just check where do we add it in the scripts. Okay, so post install
[10:22:01,916] prisma generate like this. So now I'm going to go ahead and do npm run build
[10:22:08,080] locally and I'm going to see if I have any more errors and I'm going to show you how do you trigger a deployment
[10:22:15,276] again if your initial one failed. Basically from here you have buttons to
[10:22:20,560] go to project or to inspect deployment. You can click whichever one you like. Uh and from here you basically have your
[10:22:28,400] project vibe. You can click here and there we go. You have deployments. the first deployment was failed and now the
[10:22:35,040] way another deployment will be triggered is simply whenever it notices a new push
[10:22:40,800] in the GitHub. So now let's go ahead and see what we have here. So I seem to keep
[10:22:46,000] having these errors seemingly coming from here.
[10:22:51,520] These errors seem to be coming from source generated. So it seems to be
[10:22:56,560] linting this folder when it should not be linting this folder. So, I'm going to look into how I can prevent the app uh
[10:23:04,240] the build from looking at the generated folder right here and I'll tell you what
[10:23:09,436] I find. Okay, I have managed to find the
[10:23:14,480] combination which enables npm run build. So, just to remind you, the last change
[10:23:20,880] we did was we added post install to the scripts. We still need this regardless.
[10:23:26,080] So there are different ways you can fix the failing lint because the failing linting is what's going on here. One
[10:23:32,400] solution is to go to the next config here and add slint and enable ignore
[10:23:39,360] during builds. Now this isn't exactly recommended but you can see that once
[10:23:44,720] you add this slint will not fire during the build process or at least it won't
[10:23:51,360] fire in production. But you can see that in here it works perfectly fine now.
[10:23:56,560] Well, whereas if you don't have this feature and you try mpm run build, it is
[10:24:02,320] going to fail because it will try to lint our source generated uh folder.
[10:24:08,080] There we go. But I don't really recommend this simply because uh that will turn off linting for your entire
[10:24:15,436] project during the build and there's no need for that because what we can do instead is we can go inside of
[10:24:22,400] eslint.lint.config.mjs config.mjs here and we can open ignores
[10:24:30,720] and in here we can target asterisk asterisk forward slashgenerated and then
[10:24:37,200] everything inside of a generated folder. So basically ignore wherever you can find the generated folder and then
[10:24:44,080] everything inside. And I feel like this is a little bit better solution simply because we are still going to lint the
[10:24:51,120] rest of our project. But we are not going to lint the source
[10:24:57,360] generated one. So if you try this now, it should work. Let's wait a second. And
[10:25:03,200] there we go. Since the linting has passed, everything else seems to be working just fine. So try for yourself
[10:25:09,436] and choose one that works, right? If this works for you, sure, then use this.
[10:25:14,960] But I will recommend doing this if possible for you in the estate config mjs. Perfect. Once you have these two,
[10:25:22,320] let's go ahead and let's merge them uh like this. And let's go ahead and add
[10:25:29,360] deployment here. We can do this in the main branch. We don't need to branch out. And then just go ahead and
[10:25:35,200] synchronize the changes. In case you branched out, no problem. Just merge the
[10:25:40,960] branch to the main. And once it detects a new branch to the main uh it is going
[10:25:47,276] to uh trigger a redeployment.
[10:25:52,640] There we go. So in here you can see that it automatically detected a new push and it's going to deploy. So let's see if it
[10:26:00,160] succeeds this time. And here we have it. This time the build
[10:26:05,520] succeeded. And now we have our app deployed. So you can see it's still
[10:26:10,560] running some final uh things here, but down here you can see that we assigned a
[10:26:16,000] custom domain and we have the deployment summary. So what I care about is the
[10:26:21,436] custom domain. So what I recommend you do is you click on vibe up here and go
[10:26:26,720] inside of overview and in here you will find all of your domains. Do not use the
[10:26:32,000] deployment domain. Use this one, the shortest one that is the domain of your
[10:26:37,200] project. You can go ahead and visit it if you want to. And what I want you to do is I want you to copy the URL that
[10:26:48,320] you have and I want you to go back to Verscell and then go inside of settings
[10:26:54,480] environment variables and in here find next public app URL and you now have to
[10:27:00,960] modify this to be your new app. Just remove the forward slash like this and
[10:27:06,960] click save. And after you do this, you can see a prompt here to redeploy. So you can click it. If you don't get the
[10:27:13,680] prompt to redeploy, you can manually go in your deployments and then you can select the last one and you can click
[10:27:20,160] redeploy. So let me just check if uh I'm not sure if redeployment is now happening or not. So I will just click
[10:27:26,880] redeploy myself and just confirm. So every time you change environment variables, you have to redeploy. So I'm
[10:27:33,916] going to pause, wait for the redeployment, and then we have to connect inest to this versel project.
[10:27:42,320] And here we have the successful uh redeployment here. So now what I suggest
[10:27:48,400] you do is just try and use your application. If possible, wait out till
[10:27:54,640] this shows a success message as well. There we go. and then go to your main URL here. Always use the main URL and
[10:28:02,320] try something simple like signing in. So I'm going to go ahead and use my account here and I will try to just create a
[10:28:09,840] simple project. So I will go ahead and do uh you can see that all of our projects are saved. So our TRPC is
[10:28:16,480] working here. Let's try clicking on one of these and let's try sending a message. So I would add test here. And
[10:28:23,840] what should happen here is the following. You can see the message my message was generated but injust was
[10:28:29,916] unable to be fired. That's because we need to connect inest to production. So
[10:28:34,960] this will actually never finish. Let's go ahead and do that now. So use the link you can see on the screen or the
[10:28:41,040] link in the description to visit ingest and go ahead and sign up. I suggest
[10:28:46,160] using GitHub simply so you always have access to your repositories if needed. And then once you enter here down here
[10:28:53,436] at the bottom you can choose to switch organization. I recommend creating a new organization. So I'm going to call this
[10:28:59,840] Vibe. And I will click create organization. And I'm not going to invite any members
[10:29:05,680] now. And let's go ahead and click on apps here.
[10:29:11,040] And let's go ahead and just find oh sorry integrations. I think this is what I'm looking for. And let's click on
[10:29:18,000] Versel here to connect. Let's click connect Verscell to ingest and click on
[10:29:25,200] add integration here. And I'm I have multiple accounts. So I'm going to
[10:29:30,320] select this one where I just deployed the project and I will click continue.
[10:29:36,320] And in here go ahead and find your new project.
[10:29:41,596] So let me just find Vibe. Here it is. select it and click save configuration right here and click continue to the
[10:29:49,200] ingest uh Verscell dashboard. And now somewhere in here you have all of your
[10:29:55,200] Versel projects and you should now find Vibe and you can see it says enabled but
[10:30:00,640] in here it says deployment protection is enabled. Ingest may not be able to communicate with your application by
[10:30:07,360] default. Let's go ahead and click more here. And basically what we have to do is we have to configure protection
[10:30:14,080] bypass. So in here let's go ahead and uh
[10:30:19,360] I'm never sure how to properly access this. So don't worry I will tell you the exact steps in the versel dashboard but
[10:30:27,040] let me just see does this take me to Verscel. It does take me to Versel here. Basically I
[10:30:34,800] think this is where I need to go. Let's go to versel and let's select our new project here.
[10:30:41,276] Let's go inside of settings and let's go inside of deployment protection. Here it is. So go inside of your vibe settings
[10:30:47,840] deployment protection. And in here let's go ahead and let's do protection
[10:30:55,120] bypass for automation. So I think this is what we need. So let's click add secret. You don't need to add any value
[10:31:01,120] and just click save. And then in here you can copy this bypass secret. And
[10:31:07,520] then let me go ahead and go back and click click on configure here.
[10:31:13,756] And if I remember this correctly, you should now have deployment protection key that you can add here and click save
[10:31:20,400] configuration. There we go. So now inest should be able
[10:31:26,880] to access your uh Versell application. And let's go ahead and do one more thing
[10:31:33,756] here. So now I want to go back here to production. And in here, there we go. You can see
[10:31:39,840] that my app was already found vibe development on Versel. So this is a good
[10:31:45,360] sign. And it has found one function code agent. So I think that this means that
[10:31:50,400] it's running successfully. I'm just not 100% sure. I keep thinking that I need
[10:31:56,240] to redeploy. Um so h let's see. Let's try it out. If
[10:32:01,916] it doesn't work, it means we have to redeploy. So, go to your uh deployed URL this time and let's go ahead and do
[10:32:09,680] build a calculator app. Let's see if that will work. And let's
[10:32:15,916] go inside of Ingest here. Ingest cloud inest runs. And let's see if a new run
[10:32:21,520] will appear. And the new run is right here. That would mean that we
[10:32:26,800] successfully deployed our project and we connected inest to deployed instance.
[10:32:32,560] And looks like we didn't need to redeploy at all. Let's just go ahead and
[10:32:38,000] wait to see uh if this will actually work, if there are any issues we have to fix, and then we're going to be able to
[10:32:45,040] wrap up this project. And here I have the result. So, it seems
[10:32:51,756] to be working. This is entirely in production. So my URL is
[10:32:56,880] vibe-bond.cell.app. And if you check the cloud here, there
[10:33:02,400] we go. It seems to be working. Uh if it still says running, just do a refresh and it should update the status. Here we
[10:33:09,680] go. Amazing, amazing job. You finished an amazing project. I had so much fun
[10:33:16,880] building this. Uh I I'm sure you did as well. Make sure to test your app, you know, make sure everything's working.
[10:33:23,436] Sometimes the easiest fix can actually be for you to redeploy again. And you can see there was obviously a deployment
[10:33:29,680] that was running the entire time. So perhaps this happened automatically when we connected inest. You can always, you
[10:33:37,200] know, click here and click redeploy and that will just redeploy your latest version. And now in your settings
[10:33:42,560] environment variables, you should now see inest event keys and signing keys.
[10:33:47,596] So that's the trick. That's what made it work. Amazing, amazing job. I think this
[10:33:53,360] was an absolutely amazing project. Good job. See you in the next tutorial. And
[10:34:00,480] thank you so so much for watching.